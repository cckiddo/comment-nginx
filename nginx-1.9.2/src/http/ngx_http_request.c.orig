
/*
 * Copyright (C) Igor Sysoev
 * Copyright (C) Nginx, Inc.
 */


#include <ngx_config.h>
#include <ngx_core.h>
#include <ngx_http.h>


static void ngx_http_wait_request_handler(ngx_event_t *ev);
static void ngx_http_process_request_line(ngx_event_t *rev);
static void ngx_http_process_request_headers(ngx_event_t *rev);
static ssize_t ngx_http_read_request_header(ngx_http_request_t *r);
static ngx_int_t ngx_http_alloc_large_header_buffer(ngx_http_request_t *r,
    ngx_uint_t request_line);

static ngx_int_t ngx_http_process_header_line(ngx_http_request_t *r,
    ngx_table_elt_t *h, ngx_uint_t offset);
static ngx_int_t ngx_http_process_unique_header_line(ngx_http_request_t *r,
    ngx_table_elt_t *h, ngx_uint_t offset);
static ngx_int_t ngx_http_process_multi_header_lines(ngx_http_request_t *r,
    ngx_table_elt_t *h, ngx_uint_t offset);
static ngx_int_t ngx_http_process_host(ngx_http_request_t *r,
    ngx_table_elt_t *h, ngx_uint_t offset);
static ngx_int_t ngx_http_process_connection(ngx_http_request_t *r,
    ngx_table_elt_t *h, ngx_uint_t offset);
static ngx_int_t ngx_http_process_user_agent(ngx_http_request_t *r,
    ngx_table_elt_t *h, ngx_uint_t offset);

static ngx_int_t ngx_http_validate_host(ngx_str_t *host, ngx_pool_t *pool,
    ngx_uint_t alloc);
static ngx_int_t ngx_http_set_virtual_server(ngx_http_request_t *r,
    ngx_str_t *host);
static ngx_int_t ngx_http_find_virtual_server(ngx_connection_t *c,
    ngx_http_virtual_names_t *virtual_names, ngx_str_t *host,
    ngx_http_request_t *r, ngx_http_core_srv_conf_t **cscfp);

static void ngx_http_request_handler(ngx_event_t *ev);
static void ngx_http_terminate_request(ngx_http_request_t *r, ngx_int_t rc);
static void ngx_http_terminate_handler(ngx_http_request_t *r);
static void ngx_http_finalize_connection(ngx_http_request_t *r);
static ngx_int_t ngx_http_set_write_handler(ngx_http_request_t *r);
static void ngx_http_writer(ngx_http_request_t *r);
static void ngx_http_request_finalizer(ngx_http_request_t *r);

static void ngx_http_set_keepalive(ngx_http_request_t *r);
static void ngx_http_keepalive_handler(ngx_event_t *ev);
static void ngx_http_set_lingering_close(ngx_http_request_t *r);
static void ngx_http_lingering_close_handler(ngx_event_t *ev);
static ngx_int_t ngx_http_post_action(ngx_http_request_t *r);
static void ngx_http_close_request(ngx_http_request_t *r, ngx_int_t error);
static void ngx_http_log_request(ngx_http_request_t *r);

static u_char *ngx_http_log_error(ngx_log_t *log, u_char *buf, size_t len);
static u_char *ngx_http_log_error_handler(ngx_http_request_t *r,
    ngx_http_request_t *sr, u_char *buf, size_t len);

#if (NGX_HTTP_SSL)
static void ngx_http_ssl_handshake(ngx_event_t *rev);
static void ngx_http_ssl_handshake_handler(ngx_connection_t *c);
#endif


static char *ngx_http_client_errors[] = {

    /* NGX_HTTP_PARSE_INVALID_METHOD */
    "client sent invalid method",

    /* NGX_HTTP_PARSE_INVALID_REQUEST */
    "client sent invalid request",

    /* NGX_HTTP_PARSE_INVALID_09_METHOD */
    "client sent invalid method in HTTP/0.9 request"
};

//°Ñngx_http_headers_inÖĞµÄËùÓĞ³ÉÔ±×öhashÔËËã£¬È»ºó´æ·Åµ½cmcf->headers_in_hashÖĞ£¬¼ûngx_http_init_headers_in_hash
ngx_http_header_t  ngx_http_headers_in[] = {  
//Í¨¹ıngx_http_variable_headerº¯Êı»ñÈ¡ngx_http_core_variablesÖĞÏà¹Ø±äÁ¿µÄÖµ£¬ÕâĞ©ÖµµÄÀ´Ô´¾ÍÊÇngx_http_headers_inÖĞµÄhander½âÎöµÄ¿Í»§¶ËÇëÇóÍ·²¿

    { ngx_string("Host"), offsetof(ngx_http_headers_in_t, host),
                 ngx_http_process_host }, //ngx_http_process_request_headersÖĞÖ´ĞĞhandler

    { ngx_string("Connection"), offsetof(ngx_http_headers_in_t, connection),
                 ngx_http_process_connection },

    { ngx_string("If-Modified-Since"),
                 offsetof(ngx_http_headers_in_t, if_modified_since),
                 ngx_http_process_unique_header_line },

    { ngx_string("If-Unmodified-Since"),
                 offsetof(ngx_http_headers_in_t, if_unmodified_since),
                 ngx_http_process_unique_header_line },

    { ngx_string("If-Match"),
                 offsetof(ngx_http_headers_in_t, if_match),
                 ngx_http_process_unique_header_line },

    { ngx_string("If-None-Match"),
                 offsetof(ngx_http_headers_in_t, if_none_match),
                 ngx_http_process_unique_header_line },

    { ngx_string("User-Agent"), offsetof(ngx_http_headers_in_t, user_agent),
                 ngx_http_process_user_agent },

    { ngx_string("Referer"), offsetof(ngx_http_headers_in_t, referer),
                 ngx_http_process_header_line },

    { ngx_string("Content-Length"),
                 offsetof(ngx_http_headers_in_t, content_length),
                 ngx_http_process_unique_header_line },

    { ngx_string("Content-Type"),
                 offsetof(ngx_http_headers_in_t, content_type),
                 ngx_http_process_header_line },

/*
ÊµÏÖ¶ÏµãĞø´«¹¦ÄÜµÄÏÂÔØ 

Ò». Á½¸ö±ØÒªÏìÓ¦Í·Accept-Ranges¡¢ETag
        ¿Í»§¶ËÃ¿´ÎÌá½»ÏÂÔØÇëÇóÊ±£¬·şÎñ¶Ë¶¼ÒªÌí¼ÓÕâÁ½¸öÏìÓ¦Í·£¬ÒÔ±£Ö¤¿Í»§¶ËºÍ·şÎñ¶Ë½«´ËÏÂÔØÊ¶±ğÎª¿ÉÒÔ¶ÏµãĞø´«µÄÏÂÔØ£º
Accept-Ranges£º¸æÖªÏÂÔØ¿Í»§¶ËÕâÊÇÒ»¸ö¿ÉÒÔ»Ö¸´Ğø´«µÄÏÂÔØ£¬´æ·Å±¾´ÎÏÂÔØµÄ¿ªÊ¼×Ö½ÚÎ»ÖÃ¡¢ÎÄ¼şµÄ×Ö½Ú´óĞ¡£»
ETag£º±£´æÎÄ¼şµÄÎ¨Ò»±êÊ¶£¨ÎÒÔÚÓÃµÄÎÄ¼şÃû+ÎÄ¼ş×îºóĞŞ¸ÄÊ±¼ä£¬ÒÔ±ãĞø´«ÇëÇóÊ±¶ÔÎÄ¼ş½øĞĞÑéÖ¤£©£»
²Î¿¼http://www.cnblogs.com/diyunpeng/archive/2011/12/29/2305702.html
*/
    { ngx_string("Range"), offsetof(ngx_http_headers_in_t, range),
                 ngx_http_process_header_line },

    { ngx_string("If-Range"),
                 offsetof(ngx_http_headers_in_t, if_range),
                 ngx_http_process_unique_header_line },

    { ngx_string("Transfer-Encoding"),
                 offsetof(ngx_http_headers_in_t, transfer_encoding),
                 ngx_http_process_header_line },

    { ngx_string("Expect"),
                 offsetof(ngx_http_headers_in_t, expect),
                 ngx_http_process_unique_header_line },

    { ngx_string("Upgrade"),
                 offsetof(ngx_http_headers_in_t, upgrade),
                 ngx_http_process_header_line },

#if (NGX_HTTP_GZIP)
    { ngx_string("Accept-Encoding"),
                 offsetof(ngx_http_headers_in_t, accept_encoding),
                 ngx_http_process_header_line },

    { ngx_string("Via"), offsetof(ngx_http_headers_in_t, via),
                 ngx_http_process_header_line },
#endif

    { ngx_string("Authorization"),
                 offsetof(ngx_http_headers_in_t, authorization),
                 ngx_http_process_unique_header_line },

    { ngx_string("Keep-Alive"), offsetof(ngx_http_headers_in_t, keep_alive),
                 ngx_http_process_header_line },

#if (NGX_HTTP_X_FORWARDED_FOR)
    { ngx_string("X-Forwarded-For"),
                 offsetof(ngx_http_headers_in_t, x_forwarded_for),
                 ngx_http_process_multi_header_lines },
#endif

#if (NGX_HTTP_REALIP)
    { ngx_string("X-Real-IP"),
                 offsetof(ngx_http_headers_in_t, x_real_ip),
                 ngx_http_process_header_line },
#endif

#if (NGX_HTTP_HEADERS)
    { ngx_string("Accept"), offsetof(ngx_http_headers_in_t, accept),
                 ngx_http_process_header_line },

    { ngx_string("Accept-Language"),
                 offsetof(ngx_http_headers_in_t, accept_language),
                 ngx_http_process_header_line },
#endif

#if (NGX_HTTP_DAV)
    { ngx_string("Depth"), offsetof(ngx_http_headers_in_t, depth),
                 ngx_http_process_header_line },

    { ngx_string("Destination"), offsetof(ngx_http_headers_in_t, destination),
                 ngx_http_process_header_line },

    { ngx_string("Overwrite"), offsetof(ngx_http_headers_in_t, overwrite),
                 ngx_http_process_header_line },

    { ngx_string("Date"), offsetof(ngx_http_headers_in_t, date),
                 ngx_http_process_header_line },
#endif

    { ngx_string("Cookie"), offsetof(ngx_http_headers_in_t, cookies),
                 ngx_http_process_multi_header_lines },

    { ngx_null_string, 0, NULL }
};

//ÉèÖÃngx_listening_tµÄhandler£¬Õâ¸öhandler»áÔÚ¼àÌıµ½¿Í»§¶ËÁ¬½ÓÊ±±»µ÷ÓÃ£¬¾ßÌå¾ÍÊÇÔÚngx_event_acceptº¯ÊıÖĞ£¬ngx_http_init_connectionº¯Êı¹ËÃûË¼Òå£¬¾ÍÊÇ³õÊ¼»¯Õâ¸öĞÂ½¨µÄÁ¬½Ó
void
ngx_http_init_connection(ngx_connection_t *c) 
//µ±½¨Á¢Á¬½Óºó¿ª±Ùngx_http_connection_t½á¹¹£¬ÕâÀïÃæ´æ´¢¸Ã·şÎñÆ÷¶Ëip:portËùÔÚserver{}ÉÏÏÂÎÄÅäÖÃĞÅÏ¢£¬ºÍserver_nameĞÅÏ¢µÈ£¬È»ºóÈÃ
//ngx_connection_t->dataÖ¸Ïò¸Ã½á¹¹£¬ÕâÑù¾Í¿ÉÒÔÍ¨¹ıngx_connection_t->data»ñÈ¡µ½·şÎñÆ÷¶ËµÄserv loc µÈÅäÖÃĞÅÏ¢ÒÔ¼°¸Ãserver{}ÖĞµÄserver_nameĞÅÏ¢

{
    ngx_uint_t              i;
    ngx_event_t            *rev;
    struct sockaddr_in     *sin;
    ngx_http_port_t        *port;
    ngx_http_in_addr_t     *addr;
    ngx_http_log_ctx_t     *ctx;
    ngx_http_connection_t  *hc;
#if (NGX_HAVE_INET6)
    struct sockaddr_in6    *sin6;
    ngx_http_in6_addr_t    *addr6;
#endif

    //×¢Òângx_connection_tºÍngx_http_connection_tµÄÇø±ğ£¬Ç°ÕßÊÇ½¨Á¢Á¬½ÓacceptÇ°Ê¹ÓÃµÄ½á¹¹£¬ºóÕßÊÇÁ¬½Ó³É¹¦ºóÊ¹ÓÃµÄ½á¹¹
    hc = ngx_pcalloc(c->pool, sizeof(ngx_http_connection_t));
    if (hc == NULL) {
        ngx_http_close_connection(c);
        return;
    }

    //ÔÚ·şÎñÆ÷¶Ëaccept¿Í»§¶ËÁ¬½Ó³É¹¦(ngx_event_accept)ºó£¬»áÍ¨¹ıngx_get_connection´ÓÁ¬½Ó³Ø»ñÈ¡Ò»¸öngx_connection_t½á¹¹£¬Ò²¾ÍÊÇÃ¿¸ö¿Í»§¶ËÁ¬½Ó¶ÔÓÚÒ»¸öngx_connection_t½á¹¹£¬
    //²¢ÇÒÎªÆä·ÖÅäÒ»¸öngx_http_connection_t½á¹¹£¬ngx_connection_t->data = ngx_http_connection_t£¬¼ûngx_http_init_connection
    c->data = hc;

    /* find the server configuration for the address:port */

    port = c->listening->servers;  

    if (port->naddrs > 1) {  
    
        /*
         * there are several addresses on this port and one of them
         * is an "*:port" wildcard so getsockname() in ngx_http_server_addr()
         * is required to determine a server address
         */
        //ËµÃ÷listen ip:port´æÔÚ¼¸ÌõÃ»ÓĞbindÑ¡Ïî£¬²¢ÇÒ´æÔÚÍ¨Åä·ûÅäÖÃ£¬Èçlisten *:port,ÄÇÃ´¾ÍĞèÒªÍ¨¹ıngx_connection_local_sockaddrÀ´È·¶¨
    //¾¿¾¹¿Í»§¶ËÊÇºÍÄÇ¸ö±¾µØipµØÖ·½¨Á¢µÄÁ¬½Ó
        if (ngx_connection_local_sockaddr(c, NULL, 0) != NGX_OK) { //
            ngx_http_close_connection(c);
            return;
        }

        switch (c->local_sockaddr->sa_family) {

#if (NGX_HAVE_INET6)
        case AF_INET6:
            sin6 = (struct sockaddr_in6 *) c->local_sockaddr;

            addr6 = port->addrs;

            /* the last address is "*" */

            for (i = 0; i < port->naddrs - 1; i++) {
                if (ngx_memcmp(&addr6[i].addr6, &sin6->sin6_addr, 16) == 0) {
                    break;
                }
            }

            hc->addr_conf = &addr6[i].conf;

            break;
#endif

        default: /* AF_INET */
            sin = (struct sockaddr_in *) c->local_sockaddr;

            addr = port->addrs; 

            /* the last address is "*" */
            //¸ù¾İÉÏÃæµÄngx_connection_local_sockaddrº¯Êı»ñÈ¡µ½¿Í»§¶ËÁ¬½Óµ½±¾µØ£¬±¾µØIPµØÖ·»ñÈ¡µ½ºó£¬±éÀúngx_http_port_tÕÒµ½¶ÔÓ¦
            //µÄIPµØÖ·ºÍ¶Ë¿Ú£¬È»ºó¸³Öµ¸øngx_http_connection_t->addr_conf£¬ÕâÀïÃæ´æ´¢ÓĞserver_nameÅäÖÃĞÅÏ¢ÒÔ¼°¸Ãip:port¶ÔÓ¦µÄÉÏÏÂÎÄĞÅÏ¢
            for (i = 0; i < port->naddrs - 1; i++) {
                if (addr[i].addr == sin->sin_addr.s_addr) {
                    break;
                }
            }

          /*
                ÕâÀïÒ²ÌåÏÖÁËÔÚngx_http_init_connectionÖĞ»ñÈ¡http{}ÉÏÏÂÎÄctx£¬Èç¹û¿Í»§¶ËÇëÇóÖĞ´øÓĞhost²ÎÊı£¬Ôò»á¼ÌĞøÔÚngx_http_set_virtual_server
                ÖĞÖØĞÂ»ñÈ¡¶ÔÓ¦µÄserver{}ºÍlocation{}£¬Èç¹û¿Í»§¶ËÇëÇó²»´øhostÍ·²¿ĞĞ£¬ÔòÊ¹ÓÃÄ¬ÈÏµÄserver{},¼û ngx_http_init_connection  
            */
            hc->addr_conf = &addr[i].conf;

            break;
        }

    } else {

        switch (c->local_sockaddr->sa_family) {

#if (NGX_HAVE_INET6)
        case AF_INET6:
            addr6 = port->addrs;
            hc->addr_conf = &addr6[0].conf;
            break;
#endif

        default: /* AF_INET */
            addr = port->addrs;
            hc->addr_conf = &addr[0].conf;
            break;
        }
    }

    /* the default server configuration for the address:port */
    //listen add:port¶ÔÓÚµÄ server{}ÅäÖÃ¿éµÄÉÏÏÂÎÄctx
    hc->conf_ctx = hc->addr_conf->default_server->ctx;

    ctx = ngx_palloc(c->pool, sizeof(ngx_http_log_ctx_t));
    if (ctx == NULL) {
        ngx_http_close_connection(c);
        return;
    }

    ctx->connection = c;
    ctx->request = NULL;
    ctx->current_request = NULL;

    c->log->connection = c->number;
    c->log->handler = ngx_http_log_error;
    c->log->data = ctx;
    c->log->action = "waiting for request";

    c->log_error = NGX_ERROR_INFO;

    rev = c->read;
    rev->handler = ngx_http_wait_request_handler;
    c->write->handler = ngx_http_empty_handler;

#if (NGX_HTTP_SPDY)
    if (hc->addr_conf->spdy) {
        rev->handler = ngx_http_spdy_init;
    }
#endif

#if (NGX_HTTP_SSL)
    {
    ngx_http_ssl_srv_conf_t  *sscf;

    sscf = ngx_http_get_module_srv_conf(hc->conf_ctx, ngx_http_ssl_module);

    if (sscf->enable || hc->addr_conf->ssl) {

        c->log->action = "SSL handshaking";

        if (hc->addr_conf->ssl && sscf->ssl.ctx == NULL) {
            ngx_log_error(NGX_LOG_ERR, c->log, 0,
                          "no \"ssl_certificate\" is defined "
                          "in server listening on SSL port");
            ngx_http_close_connection(c);
            return;
        }

        hc->ssl = 1;

        rev->handler = ngx_http_ssl_handshake;
    }
    }
#endif

    if (hc->addr_conf->proxy_protocol) {
        hc->proxy_protocol = 1;
        c->log->action = "reading PROXY protocol";
    }

    /*
     Èç¹ûĞÂÁ¬½ÓµÄ¶ÁÊÂ¼şngx_event_t½á¹¹ÌåÖĞµÄ±êÖ¾Î»readyÎª1£¬Êµ¼ÊÉÏ±íÊ¾Õâ¸öÁ¬½Ó¶ÔÓ¦µÄÌ×½Ó×Ö»º´æÉÏÒÑ¾­ÓĞÓÃ»§·¢À´µÄÊı¾İ£¬
     ÕâÊ±¾Í¿Éµ÷ÓÃÉÏÃæËµ¹ıµÄngx_http_init_request·½·¨´¦ÀíÇëÇó¡£
     */
    //ÕâÀïÖ»¿ÉÄÜÊÇµ±listenµÄÊ±ºòÌí¼ÓÁËdefered²ÎÊı²¢ÇÒÄÚºËÖ§³Ö£¬ÔÚngx_event_acceptµÄÊ±ºò²Å»áÖÃ1£¬²Å¿ÉÄÜÖ´ĞĞÏÂÃæµÄifÀïÃæµÄÄÚÈİ£¬·ñÔò²»»áÖ»ĞèifÀïÃæµÄÄÚÈİ
    if (rev->ready) {
        /* the deferred accept(), iocp */
        if (ngx_use_accept_mutex) { //Èç¹ûÊÇÅäÖÃÁËaccept_mutex£¬Ôò°Ñ¸Ãrev->handlerÑÓºó´¦Àí£¬
        //Êµ¼ÊÉÏÖ´ĞĞµÄµØ·½Îªngx_process_events_and_timersÖĞµÄngx_event_process_posted
            ngx_post_event(rev, &ngx_posted_events);
            return;
        }

        rev->handler(rev); //ngx_http_wait_request_handler
        return;
    }

/*
ÔÚÓĞĞ©Çé¿öÏÂ£¬µ±TCPÁ¬½Ó½¨Á¢³É¹¦Ê±Í¬Ê±Ò²³öÏÖÁË¿É¶ÁÊÂ¼ş£¨ÀıÈç£¬ÔÚÌ×½Ó×ÖlistenÅäÖÃÊ±ÉèÖÃÁËdeferredÑ¡ÏîÊ±£¬ÄÚºË½öÔÚÌ×½Ó×ÖÉÏÈ·ÊµÊÕµ½ÇëÇóÊ±²Å»áÍ¨Öªepoll
µ÷¶ÈÊÂ¼şµÄ»Øµ÷·½·¨¡£µ±È»£¬ÔÚ´ó²¿·ÖÇé¿öÏÂ£¬ngx_http_init_request·½·¨ºÍ
ngx_http_init_connection·½·¨¶¼ÊÇÓÉÁ½¸öÊÂ¼ş£¨TCPÁ¬½Ó½¨Á¢³É¹¦ÊÂ¼şºÍÁ¬½ÓÉÏµÄ¿É¶ÁÊÂ¼ş£©´¥·¢µ÷ÓÃµÄ
*/

/*
µ÷ÓÃngx_add_timer·½·¨°Ñ¶ÁÊÂ¼şÌí¼Óµ½¶¨Ê±Æ÷ÖĞ£¬ÉèÖÃµÄ³¬Ê±Ê±¼äÔòÊÇnginx.confÖĞclient_header_timeoutÅäÖÃÏîÖ¸¶¨µÄ²ÎÊı¡£
Ò²¾ÍÊÇËµ£¬Èç¹û¾­¹ıclient_header_timeoutÊ±¼äºóÕâ¸öÁ¬½ÓÉÏ»¹Ã»ÓĞÓÃ»§Êı¾İµ½´ï£¬Ôò»áÓÉ¶¨Ê±Æ÷´¥·¢µ÷ÓÃ¶ÁÊÂ¼şµÄngx_http_init_request´¦Àí·½·¨¡£
 */
    ngx_add_timer(rev, c->listening->post_accept_timeout, NGX_FUNC_LINE); //°Ñ½ÓÊÕÊÂ¼şÌí¼Óµ½¶¨Ê±Æ÷ÖĞ£¬µ±post_accept_timeoutÃë»¹Ã»ÓĞ¿Í»§¶ËÊı¾İµ½À´£¬¾Í¹Ø±ÕÁ¬½Ó
    ngx_reusable_connection(c, 1);
    
    if (ngx_handle_read_event(rev, 0, NGX_FUNC_LINE) != NGX_OK) { //µ±ÏÂ´ÎÓĞÊı¾İ´Ó¿Í»§¶Ë·¢ËÍ¹ıÀ´µÄÊ±ºò£¬»áÔÚngx_epoll_process_events°Ñ¶ÔÓ¦µÄreadyÖÃ1¡£
        ngx_http_close_connection(c);
        return;
    }
}

//¿Í»§¶Ë½¨Á¢Á¬½Óºó£¬Ö»ÓĞµÚÒ»´Î¶ÁÈ¡¿Í»§¶ËÊı¾İµ½Êı¾İµÄÊ±ºò£¬Ö´ĞĞµÄhandlerÖ¸Ïò¸Ãº¯Êı£¬Òò´Ëµ±¿Í»§¶ËÁ¬½Ó½¨Á¢³É¹¦ºó£¬Ö»ÓĞµÚÒ»´Î¶ÁÈ¡
//¿Í»§¶ËÊı¾İ²Å»á×ß¸Ãº¯Êı£¬Èç¹ûÔÚ±£»îÆÚÄÚÓÖÊÕµ½¿Í»§¶ËÇëÇó£¬Ôò²»»áÔÙ×ß¸Ãº¯Êı£¬¶øÊÇÖ´ĞĞngx_http_process_request_line£¬ÒòÎª¸Ãº¯Êı
//°ÑhandlerÖ¸ÏòÁËngx_http_process_request_line
static void
ngx_http_wait_request_handler(ngx_event_t *rev)
{
    u_char                    *p;
    size_t                     size;
    ssize_t                    n;
    ngx_buf_t                 *b;
    ngx_connection_t          *c;
    ngx_http_connection_t     *hc;
    ngx_http_core_srv_conf_t  *cscf;

    c = rev->data;
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0, "http wait request handler");

    if (rev->timedout) { //Èç¹ûtcpÁ¬½Ó½¨Á¢ºó£¬µÈÁËclient_header_timeoutÃëÒ»Ö±Ã»ÓĞÊÕµ½¿Í»§¶ËµÄÊı¾İ°ü¹ıÀ´£¬Ôò¹Ø±ÕÁ¬½Ó
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, "client timed out");
        ngx_http_close_connection(c);
        return;
    }

    if (c->close) {
        ngx_http_close_connection(c);
        return;
    }

    hc = c->data;
    cscf = ngx_http_get_module_srv_conf(hc->conf_ctx, ngx_http_core_module);

    size = cscf->client_header_buffer_size; //Ä¬ÈÏ1024

    b = c->buffer;

    if (b == NULL) {
        b = ngx_create_temp_buf(c->pool, size);
        if (b == NULL) {
            ngx_http_close_connection(c);
            return;
        }

        c->buffer = b;

    } else if (b->start == NULL) {

        b->start = ngx_palloc(c->pool, size);
        if (b->start == NULL) {
            ngx_http_close_connection(c);
            return;
        }

        b->pos = b->start;
        b->last = b->start;
        b->end = b->last + size;
    }

    //ÕâÀïÈç¹ûÒ»´ÎÃ»ÓĞ°ÑËùÓĞ¿Í»§¶ËµÄÊı¾İ¶ÁÈ¡Íê£¬ÔòÔÚngx_http_process_request_lineÖĞ»á¼ÌĞø¶ÁÈ¡
    //Óëngx_http_read_request_headerÅäºÏ¶Á
    n = c->recv(c, b->last, size);  //¶ÁÈ¡¿Í»§¶ËÀ´µÄÊı¾İ    Ö´ĞĞngx_unix_recv

    if (n == NGX_AGAIN) {
        if (!rev->timer_set) {
            ngx_add_timer(rev, c->listening->post_accept_timeout, NGX_FUNC_LINE);
            ngx_reusable_connection(c, 1);
        }

        if (ngx_handle_read_event(rev, 0, NGX_FUNC_LINE) != NGX_OK) {
            ngx_http_close_connection(c);
            return;
        }

        /*
         * We are trying to not hold c->buffer's memory for an idle connection.
         */

        if (ngx_pfree(c->pool, b->start) == NGX_OK) {
            b->start = NULL;
        }

        return;
    }

    if (n == NGX_ERROR) {
        ngx_http_close_connection(c);
        return;
    }

    if (n == 0) {
        ngx_log_error(NGX_LOG_INFO, c->log, 0,
                      "client closed connection");
        ngx_http_close_connection(c);
        return;
    }

    b->last += n;

    if (hc->proxy_protocol) {
        hc->proxy_protocol = 0;

        p = ngx_proxy_protocol_read(c, b->pos, b->last);

        if (p == NULL) {
            ngx_http_close_connection(c);
            return;
        }

        b->pos = p;

        if (b->pos == b->last) {
            c->log->action = "waiting for request";
            b->pos = b->start;
            b->last = b->start;
            ngx_post_event(rev, &ngx_posted_events);
            return;
        }
    }

    c->log->action = "reading client request line";

    ngx_reusable_connection(c, 0);
    //´ÓĞÂÈÃc->dataÖ¸ÏòĞÂ¿ª±ÙµÄngx_http_request_t
    c->data = ngx_http_create_request(c);
    if (c->data == NULL) {
        ngx_http_close_connection(c);
        return;
    }

    rev->handler = ngx_http_process_request_line;
    ngx_http_process_request_line(rev);
}

//Ö»ÓĞÔÚÁ¬½Ó½¨Á¢²¢½ÓÊÜµ½¿Í»§¶ËµÚÒ»´ÎÇëÇóµÄÊ±ºò²Å»á´´½¨ngx_connection_t£¬¸Ã½á¹¹Ò»Ö±³ÖĞøµ½Á¬½Ó¹Ø±Õ²ÅÊÍ·Å
ngx_http_request_t *
ngx_http_create_request(ngx_connection_t *c)
{
    ngx_pool_t                 *pool;
    ngx_time_t                 *tp;
    ngx_http_request_t         *r;
    ngx_http_log_ctx_t         *ctx;
    ngx_http_connection_t      *hc;
    ngx_http_core_srv_conf_t   *cscf;
    ngx_http_core_loc_conf_t   *clcf;
    ngx_http_core_main_conf_t  *cmcf;

    c->requests++;

    hc = c->data;
    //ÔÚngx_http_wait_request_handlerµÄÊ±ºò£¬dataÖ¸Ïòngx_http_connection_t,¸Ãº¯Êı·µ»Øºó c->dataÖØĞÂÖ¸ÏòĞÂ¿ªÅÌµÄngx_http_request_t
    //Ö®Ç°c->dataÖ¸ÏòµÄngx_http_connection_tÓÃr->http_connection±£´æ

    cscf = ngx_http_get_module_srv_conf(hc->conf_ctx, ngx_http_core_module);

    pool = ngx_create_pool(cscf->request_pool_size, c->log);
    if (pool == NULL) {
        return NULL;
    }

    r = ngx_pcalloc(pool, sizeof(ngx_http_request_t));
    if (r == NULL) {
        ngx_destroy_pool(pool);
        return NULL;
    }

    r->pool = pool; 

    //µ±Á¬½Ó½¨Á¢³É¹¦ºó£¬µ±ÊÕµ½¿Í»§¶ËµÄµÚÒ»¸öÇëÇóµÄÊ±ºò»áÍ¨¹ıngx_http_wait_request_handler->ngx_http_create_request´´½¨ngx_http_request_t
    //Í¬Ê±°Ñr->http_connectionÖ¸Ïòaccept¿Í»§¶ËÁ¬½Ó³É¹¦Ê±ºò´´½¨µÄngx_http_connection_t£¬ÕâÀïÃæÓĞ´æ´¢server{}ÉÏÏÂÎÄctxºÍserver_nameµÈĞÅÏ¢
    //¸Ãngx_http_request_t»áÒ»Ö±ÓĞĞ§£¬³ı·Ç¹Ø±ÕÁ¬½Ó¡£Òò´Ë¸Ãº¯ÊıÖ»»áµ÷ÓÃÒ»´Î£¬Ò²¾ÍÊÇµÚÒ»¸ö¿Í»§¶ËÇëÇó±¨ÎÄ¹ıÀ´µÄÊ±ºò´´½¨£¬Ò»Ö±³ÖĞøµ½Á¬½Ó¹Ø±Õ
    r->http_connection = hc; //ÖØĞÂ°Ñc->data¸³Öµ¸ør->http_connection£¬ÕâÑùr->http_connection¾Í±£´æÁËngx_http_connection_tĞÅÏ¢
    r->signature = NGX_HTTP_MODULE;
    r->connection = c;

    r->main_conf = hc->conf_ctx->main_conf;
    r->srv_conf = hc->conf_ctx->srv_conf;
    r->loc_conf = hc->conf_ctx->loc_conf;

    r->read_event_handler = ngx_http_block_reading;

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    ngx_set_connection_log(r->connection, clcf->error_log);

    r->header_in = hc->nbusy ? hc->busy[0] : c->buffer;

    if (ngx_list_init(&r->headers_out.headers, r->pool, 20,
                      sizeof(ngx_table_elt_t))
        != NGX_OK)
    {
        ngx_destroy_pool(r->pool);
        return NULL;
    }

    r->ctx = ngx_pcalloc(r->pool, sizeof(void *) * ngx_http_max_module);
    if (r->ctx == NULL) {
        ngx_destroy_pool(r->pool);
        return NULL;
    }

    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);

    r->variables = ngx_pcalloc(r->pool, cmcf->variables.nelts
                                        * sizeof(ngx_http_variable_value_t));
    if (r->variables == NULL) {
        ngx_destroy_pool(r->pool);
        return NULL;
    }

#if (NGX_HTTP_SSL)
    if (c->ssl) {
        r->main_filter_need_in_memory = 1;
    }
#endif

    r->main = r;
    r->count = 1;

    tp = ngx_timeofday();
    //ngx_http_request_t½á¹¹ÌåÖĞÓĞÁ½¸ö³ÉÔ±±íÊ¾Õâ¸öÇëÇóµÄ¿ªÊ¼´¦ÀíÊ±¼ä£ºstart_sec³ÉÔ±ºÍstart_msec³ÉÔ±
    r->start_sec = tp->sec;
    r->start_msec = tp->msec;

    r->method = NGX_HTTP_UNKNOWN;
    r->http_version = NGX_HTTP_VERSION_10;

    r->headers_in.content_length_n = -1;
    r->headers_in.keep_alive_n = -1;
    r->headers_out.content_length_n = -1;
    r->headers_out.last_modified_time = -1;

    r->uri_changes = NGX_HTTP_MAX_URI_CHANGES + 1;
    r->subrequests = NGX_HTTP_MAX_SUBREQUESTS + 1;

    r->http_state = NGX_HTTP_READING_REQUEST_STATE;

    ctx = c->log->data;
    ctx->request = r;
    ctx->current_request = r;
    r->log_handler = ngx_http_log_error_handler;

#if (NGX_STAT_STUB)
    (void) ngx_atomic_fetch_add(ngx_stat_reading, 1);
    r->stat_reading = 1;
    (void) ngx_atomic_fetch_add(ngx_stat_requests, 1);
#endif

    return r;
}


#if (NGX_HTTP_SSL)

static void
ngx_http_ssl_handshake(ngx_event_t *rev)
{
    u_char                   *p, buf[NGX_PROXY_PROTOCOL_MAX_HEADER + 1];
    size_t                    size;
    ssize_t                   n;
    ngx_err_t                 err;
    ngx_int_t                 rc;
    ngx_connection_t         *c;
    ngx_http_connection_t    *hc;
    ngx_http_ssl_srv_conf_t  *sscf;

    c = rev->data;
    hc = c->data;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, rev->log, 0,
                   "http check ssl handshake");

    if (rev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, "client timed out");
        ngx_http_close_connection(c);
        return;
    }

    if (c->close) {
        ngx_http_close_connection(c);
        return;
    }

    size = hc->proxy_protocol ? sizeof(buf) : 1;

    n = recv(c->fd, (char *) buf, size, MSG_PEEK);

    err = ngx_socket_errno;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, rev->log, 0, "http recv(): %d", n);

    if (n == -1) {
        if (err == NGX_EAGAIN) {
            rev->ready = 0;

            if (!rev->timer_set) {
                ngx_add_timer(rev, c->listening->post_accept_timeout, NGX_FUNC_LINE);
                ngx_reusable_connection(c, 1);
            }

            if (ngx_handle_read_event(rev, 0, NGX_FUNC_LINE) != NGX_OK) {
                ngx_http_close_connection(c);
            }

            return;
        }

        ngx_connection_error(c, err, "recv() failed");
        ngx_http_close_connection(c);

        return;
    }

    if (hc->proxy_protocol) {
        hc->proxy_protocol = 0;

        p = ngx_proxy_protocol_read(c, buf, buf + n);

        if (p == NULL) {
            ngx_http_close_connection(c);
            return;
        }

        size = p - buf;

        if (c->recv(c, buf, size) != (ssize_t) size) {
            ngx_http_close_connection(c);
            return;
        }

        c->log->action = "SSL handshaking";

        if (n == (ssize_t) size) {
            ngx_post_event(rev, &ngx_posted_events);
            return;
        }

        n = 1;
        buf[0] = *p;
    }

    if (n == 1) {
        if (buf[0] & 0x80 /* SSLv2 */ || buf[0] == 0x16 /* SSLv3/TLSv1 */) {
            ngx_log_debug1(NGX_LOG_DEBUG_HTTP, rev->log, 0,
                           "https ssl handshake: 0x%02Xd", buf[0]);

            sscf = ngx_http_get_module_srv_conf(hc->conf_ctx,
                                                ngx_http_ssl_module);

            if (ngx_ssl_create_connection(&sscf->ssl, c, NGX_SSL_BUFFER)
                != NGX_OK)
            {
                ngx_http_close_connection(c);
                return;
            }

            rc = ngx_ssl_handshake(c);

            if (rc == NGX_AGAIN) {

                if (!rev->timer_set) {
                    ngx_add_timer(rev, c->listening->post_accept_timeout, NGX_FUNC_LINE);
                }

                ngx_reusable_connection(c, 0);

                c->ssl->handler = ngx_http_ssl_handshake_handler;
                return;
            }

            ngx_http_ssl_handshake_handler(c);

            return;
        }

        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, rev->log, 0, "plain http");

        c->log->action = "waiting for request";

        rev->handler = ngx_http_wait_request_handler;
        ngx_http_wait_request_handler(rev);

        return;
    }

    ngx_log_error(NGX_LOG_INFO, c->log, 0, "client closed connection");
    ngx_http_close_connection(c);
}


static void
ngx_http_ssl_handshake_handler(ngx_connection_t *c)
{
    if (c->ssl->handshaked) {

        /*
         * The majority of browsers do not send the "close notify" alert.
         * Among them are MSIE, old Mozilla, Netscape 4, Konqueror,
         * and Links.  And what is more, MSIE ignores the server's alert.
         *
         * Opera and recent Mozilla send the alert.
         */

        c->ssl->no_wait_shutdown = 1;

#if (NGX_HTTP_SPDY                                                            \
     && (defined TLSEXT_TYPE_application_layer_protocol_negotiation           \
         || defined TLSEXT_TYPE_next_proto_neg))
        {
        unsigned int             len;
        const unsigned char     *data;
        static const ngx_str_t   spdy = ngx_string(NGX_SPDY_NPN_NEGOTIATED);

#ifdef TLSEXT_TYPE_application_layer_protocol_negotiation
        SSL_get0_alpn_selected(c->ssl->connection, &data, &len);

#ifdef TLSEXT_TYPE_next_proto_neg
        if (len == 0) {
            SSL_get0_next_proto_negotiated(c->ssl->connection, &data, &len);
        }
#endif

#else /* TLSEXT_TYPE_next_proto_neg */
        SSL_get0_next_proto_negotiated(c->ssl->connection, &data, &len);
#endif

        if (len == spdy.len && ngx_strncmp(data, spdy.data, spdy.len) == 0) {
            ngx_http_spdy_init(c->read);
            return;
        }
        }
#endif

        c->log->action = "waiting for request";

        c->read->handler = ngx_http_wait_request_handler;
        /* STUB: epoll edge */ c->write->handler = ngx_http_empty_handler;

        ngx_reusable_connection(c, 1);

        ngx_http_wait_request_handler(c->read);

        return;
    }

    if (c->read->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, "client timed out");
    }

    ngx_http_close_connection(c);
}

#ifdef SSL_CTRL_SET_TLSEXT_HOSTNAME

int
ngx_http_ssl_servername(ngx_ssl_conn_t *ssl_conn, int *ad, void *arg)
{
    ngx_str_t                  host;
    const char                *servername;
    ngx_connection_t          *c;
    ngx_http_connection_t     *hc;
    ngx_http_ssl_srv_conf_t   *sscf;
    ngx_http_core_loc_conf_t  *clcf;
    ngx_http_core_srv_conf_t  *cscf;

    servername = SSL_get_servername(ssl_conn, TLSEXT_NAMETYPE_host_name);

    if (servername == NULL) {
        return SSL_TLSEXT_ERR_NOACK;
    }

    c = ngx_ssl_get_connection(ssl_conn);

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   "SSL server name: \"%s\"", servername);

    host.len = ngx_strlen(servername);

    if (host.len == 0) {
        return SSL_TLSEXT_ERR_NOACK;
    }

    host.data = (u_char *) servername;

    if (ngx_http_validate_host(&host, c->pool, 1) != NGX_OK) {
        return SSL_TLSEXT_ERR_NOACK;
    }

    hc = c->data;

    if (ngx_http_find_virtual_server(c, hc->addr_conf->virtual_names, &host,
                                     NULL, &cscf)
        != NGX_OK)
    {
        return SSL_TLSEXT_ERR_NOACK;
    }

    hc->ssl_servername = ngx_palloc(c->pool, sizeof(ngx_str_t));
    if (hc->ssl_servername == NULL) {
        return SSL_TLSEXT_ERR_NOACK;
    }

    *hc->ssl_servername = host;

    hc->conf_ctx = cscf->ctx;

    clcf = ngx_http_get_module_loc_conf(hc->conf_ctx, ngx_http_core_module);

    ngx_set_connection_log(c, clcf->error_log);

    sscf = ngx_http_get_module_srv_conf(hc->conf_ctx, ngx_http_ssl_module);

    if (sscf->ssl.ctx) {
        SSL_set_SSL_CTX(ssl_conn, sscf->ssl.ctx);

        /*
         * SSL_set_SSL_CTX() only changes certs as of 1.0.0d
         * adjust other things we care about
         */

        SSL_set_verify(ssl_conn, SSL_CTX_get_verify_mode(sscf->ssl.ctx),
                       SSL_CTX_get_verify_callback(sscf->ssl.ctx));

        SSL_set_verify_depth(ssl_conn, SSL_CTX_get_verify_depth(sscf->ssl.ctx));

#ifdef SSL_CTRL_CLEAR_OPTIONS
        /* only in 0.9.8m+ */
        SSL_clear_options(ssl_conn, SSL_get_options(ssl_conn) &
                                    ~SSL_CTX_get_options(sscf->ssl.ctx));
#endif

        SSL_set_options(ssl_conn, SSL_CTX_get_options(sscf->ssl.ctx));
    }

    return SSL_TLSEXT_ERR_OK;
}

#endif

#endif

/*
ÕâÑùµÄÇëÇóĞĞ³¤¶ÈÊÇ²»¶¨µÄ£¬ËüÓëURI³¤¶ÈÏà¹Ø£¬ÕâÒâÎ¶×ÅÔÚ¶ÁÊÂ¼ş±»´¥·¢Ê±£¬ÄÚºËÌ×½Ó×Ö»º³åÇøµÄ´óĞ¡Î´±Ø×ã¹»½ÓÊÕµ½È«²¿µÄHTTPÇëÇóĞĞ£¬ÓÉ´Ë¿ÉÒÔµÃ³ö½áÂÛ£º
µ÷ÓÃÒ»´Îngx_http_process_request_line·½·¨²»Ò»¶¨ÄÜ¹»×öÍêÕâÏî¹¤×÷¡£ËùÒÔ£¬ngx_http_process_request_line·½·¨Ò²»á×÷Îª¶ÁÊÂ¼şµÄ»Øµ÷·½·¨£¬Ëü¿ÉÄÜ»á±»
epollÕâ¸öÊÂ¼şÇı¶¯»úÖÆ¶à´Îµ÷¶È£¬·´¸´µØ½ÓÊÕTCPÁ÷²¢Ê¹ÓÃ×´Ì¬»ú½âÎöËüÃÇ£¬Ö±µ½È·ÈÏ½ÓÊÕµ½ÁËÍêÕûµÄHTTPÇëÇóĞĞ£¬Õâ¸ö½×¶Î²ÅËãÍê³É£¬²Å»á½øÈëÏÂÒ»¸ö½×¶Î½ÓÊÕHTTPÍ·²¿¡£
*/
/*
ÔÚ½ÓÊÕÍêHTTPÍ·²¿£¬µÚÒ»´ÎÔÚÒµÎñÉÏ´¦ÀíHTTPÇëÇóÊ±£¬HTTP¿ò¼ÜÌá¹©µÄ´¦Àí·½·¨ÊÇngx_http_process_request¡£µ«Èç¹û¸Ã·½·¨ÎŞ·¨Ò»´Î´¦
ÀíÍê¸ÃÇëÇóµÄÈ«²¿ÒµÎñ£¬ÔÚ¹é»¹¿ØÖÆÈ¨µ½epollÊÂ¼şÄ£¿éºó£¬¸ÃÇëÇóÔÙ´Î±»»Øµ÷Ê±£¬½«Í¨¹ıngx_http_request_handler·½·¨À´´¦Àí
*/
static void
ngx_http_process_request_line(ngx_event_t *rev) //ngx_http_process_request_line·½·¨À´½ÓÊÕHTTPÇëÇóĞĞ
{
    ssize_t              n;
    ngx_int_t            rc, rv;
    ngx_str_t            host;
    ngx_connection_t    *c;
    ngx_http_request_t  *r;

    c = rev->data;
    r = c->data;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, rev->log, 0,
                   "http process request line");
    /*
     ¼ì²éÕâ¸ö¶ÁÊÂ¼şÊÇ·ñÒÑ¾­³¬Ê±£¬³¬Ê±Ê±¼äÈÔÈ»ÊÇnginx.confÅäÖÃÎÄ¼şÖĞÖ¸¶¨µÄclient_header_timeout¡£Èç¹ûngx_event_tÊÂ¼şµÄtimeout±êÖ¾Îª1£¬
     ÔòÈÏÎª½ÓÊÕHTTPÇëÇóÒÑ¾­³¬Ê±£¬µ÷ÓÃngx_http_close_request·½·¨¹Ø±ÕÇëÇó£¬Í¬Ê±ÓÉngx_http_process_request_line·½·¨ÖĞ·µ»Ø¡£
     */
    if (rev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, "client timed out");
        c->timedout = 1;
        ngx_http_close_request(r, NGX_HTTP_REQUEST_TIME_OUT);
        return;
    }

    rc = NGX_AGAIN;

//¶ÁÈ¡Ò»ĞĞÊı¾İ£¬·ÖÎö³öÇëÇóĞĞÖĞ°üº¬µÄmethod¡¢uri¡¢http_versionĞÅÏ¢¡£È»ºóÔÙÒ»ĞĞÒ»ĞĞ´¦ÀíÇëÇóÍ·£¬²¢¸ù¾İÇëÇómethodÓëÇëÇóÍ·µÄĞÅÏ¢À´¾ö¶¨
//ÊÇ·ñÓĞÇëÇóÌåÒÔ¼°ÇëÇóÌåµÄ³¤¶È£¬È»ºóÔÙÈ¥¶ÁÈ¡ÇëÇóÌå
    for ( ;; ) {

        if (rc == NGX_AGAIN) {
            n = ngx_http_read_request_header(r);

            if (n == NGX_AGAIN || n == NGX_ERROR) { 
            //Èç¹ûÄÚºËÖĞµÄÊı¾İÒÑ¾­¶ÁÍê£¬µ«ÕâÊ±ºòÍ·²¿×Ö¶Î»¹Ã»ÓĞ½âÎöÍê±Ï£¬Ôò°Ñ¿ØÖÆÆ÷½»»¹¸øHTTP£¬µ±Êı¾İµ½À´µÄÊ±ºò´¥·¢
            //ngx_http_process_request_line£¬ÒòÎª¸Ãº¯ÊıÍâÃærev->handler = ngx_http_process_request_line;
                return;
            }
        }
    
        rc = ngx_http_parse_request_line(r, r->header_in);

        if (rc == NGX_OK) { //ÇëÇóĞĞ½âÎö³É¹¦

            /* the request line has been parsed successfully */
            //ÇëÇóĞĞÄÚÈİ¼°³¤¶È    //GET /sample.jsp HTTP/1.1ÕûĞĞ
            r->request_line.len = r->request_end - r->request_start;
            r->request_line.data = r->request_start;
            r->request_length = r->header_in->pos - r->request_start;

            ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c->log, 0,
                           "http request line: \"%V\"", &r->request_line);

            //ÇëÇó·½·¨ GET  POSTµÈ    //GET /sample.jsp HTTP/1.1  ÖĞµÄGET
            r->method_name.len = r->method_end - r->request_start + 1;
            r->method_name.data = r->request_line.data;

            //GET /sample.jsp HTTP/1.1  ÖĞµÄHTTP/1.1
            if (r->http_protocol.data) {
                r->http_protocol.len = r->request_end - r->http_protocol.data;
            }

            if (ngx_http_process_request_uri(r) != NGX_OK) {
                return;
            }

            if (r->host_start && r->host_end) {

                host.len = r->host_end - r->host_start;
                host.data = r->host_start;

                rc = ngx_http_validate_host(&host, r->pool, 0);

                if (rc == NGX_DECLINED) {
                    ngx_log_error(NGX_LOG_INFO, c->log, 0,
                                  "client sent invalid host in request line");
                    ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
                    return;
                }

                if (rc == NGX_ERROR) {
                    ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
                    return;
                }

                if (ngx_http_set_virtual_server(r, &host) == NGX_ERROR) {
                    return;
                }

                r->headers_in.server = host;
            }

            if (r->http_version < NGX_HTTP_VERSION_10) { //1.0ÒÔÏÂ°æ±¾Ã»ÓĞÇëÇóÍ·²¿×Ö¶Î£¬
                /*
                    ÓÃ»§ÇëÇóµÄHTTP°æ±¾Ğ¡ÓÚ1.0£¨ÈçHTTP 0.9°æ±¾£©£¬Æä´¦Àí¹ı³Ì½«ÓëHTTP l.0ºÍHTTP l.1µÄÍêÈ«²»Í¬£¬Ëü²»»áÓĞ½ÓÊÕHTTP
                    Í·²¿ÕâÒ»²½Öè¡£ÕâÊ±½«»áµ÷ÓÃngx_http_find_virtual_server·½·¨Ñ°ÕÒµ½ÏàÓ¦µÄĞéÄâÖ÷»ú£
                    */
                if (r->headers_in.server.len == 0
                    && ngx_http_set_virtual_server(r, &r->headers_in.server) //http0.9Ó¦¸ÃÊÇ´ÓÇëÇóĞĞ»ñÈ¡ĞéÄâÖ÷»ú?
                       == NGX_ERROR)
                {
                    return;
                }

                ngx_http_process_request(r);
                return;
            }

            //³õÊ¼»¯ÓÃÓÚ´æ·ÅhttpÍ·²¿ĞĞµÄ¿Õ¼ä£¬ÓÃÀ´´æ·ÅhttpÍ·²¿ĞĞ
            if (ngx_list_init(&r->headers_in.headers, r->pool, 20,
                              sizeof(ngx_table_elt_t))
                != NGX_OK)
            {
                ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
                return;
            }

            c->log->action = "reading client request headers";

            rev->handler = ngx_http_process_request_headers;
            ngx_http_process_request_headers(rev);//¿ªÊ¼½âÎöhttpÍ·²¿ĞĞ

            return;
        }

        if (rc != NGX_AGAIN) {//¶ÁÈ¡Íê±ÏÄÚºË¸ÃÌ×½Ó×ÖÉÏÃæµÄÊı¾İ£¬Í·²¿ĞĞ²»È«£¬ÔòËµÃ÷Í·²¿ĞĞ²»È«¹Ø±ÕÁ¬½Ó

            /* there was error while a request line parsing */

            ngx_log_error(NGX_LOG_INFO, c->log, 0,
                          ngx_http_client_errors[rc - NGX_HTTP_CLIENT_ERROR]);
            ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
            return;
        }

        //±íÊ¾¸ÃĞĞÄÚÈİ²»¹»£¬ÀıÈçrecv¶ÁÈ¡µÄÊ±ºò£¬Ã»ÓĞ°ÑÕûĞĞÊı¾İ¶ÁÈ¡³öÀ´£¬·µ»Øºó¼ÌĞørecv£¬È»ºó½Ó×ÅÉÏ´Î½âÎöµÄÎ»ÖÃ¼ÌĞø½âÎöÖ±µ½ÇëÇóĞĞ½âÎöÍê±Ï
        /* NGX_AGAIN: a request line parsing is still incomplete */
        /*
             Èç¹ûngx_http_parse_request_line·½·¨·µ»ØNGX_AGAIN£¬Ôò±íÊ¾ĞèÒª½ÓÊÕ¸ü¶àµÄ×Ö·ûÁ÷£¬ÕâÊ±ĞèÒª¶Ôheader_in»º³åÇø×öÅĞ¶Ï£¬¼ì²é
         ÊÇ·ñ»¹ÓĞ¿ÕÏĞµÄÄÚ´æ£¬Èç¹û»¹ÓĞÎ´Ê¹ÓÃµÄÄÚ´æ¿ÉÒÔ¼ÌĞø½ÓÊÕ×Ö·ûÁ÷£¬¼ì²é»º³åÇøÊÇ·ñÓĞÎ´½âÎöµÄ×Ö·ûÁ÷£¬·ñÔòµ÷ÓÃ
         ngx_http_alloc_large_header_buffer·½·¨·ÖÅä¸ü´óµÄ½ÓÊÕ»º³åÇø¡£µ½µ×·ÖÅä¶à´óÄØ£¿ÕâÓÉnginx.confÎÄ¼şÖĞµÄlarge_client_header_buffersÅäÖÃÏîÖ¸¶¨¡£
          */
        if (r->header_in->pos == r->header_in->end) {

            rv = ngx_http_alloc_large_header_buffer(r, 1);

            if (rv == NGX_ERROR) {
                ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
                return;
            }

            if (rv == NGX_DECLINED) {
                r->request_line.len = r->header_in->end - r->request_start;
                r->request_line.data = r->request_start;

                ngx_log_error(NGX_LOG_INFO, c->log, 0,
                              "client sent too long URI");
                ngx_http_finalize_request(r, NGX_HTTP_REQUEST_URI_TOO_LARGE);
                return;
            }
        }
        //±íÊ¾Í·²¿ĞĞÃ»ÓĞ½âÎöÍê³É£¬¼ÌĞø¶ÁÊı¾İ½âÎö
    }
}


ngx_int_t
ngx_http_process_request_uri(ngx_http_request_t *r)
{
    ngx_http_core_srv_conf_t  *cscf;

    if (r->args_start) {
        r->uri.len = r->args_start - 1 - r->uri_start;
    } else {
        r->uri.len = r->uri_end - r->uri_start;
    }

    if (r->complex_uri || r->quoted_uri) {

        r->uri.data = ngx_pnalloc(r->pool, r->uri.len + 1);
        if (r->uri.data == NULL) {
            ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
            return NGX_ERROR;
        }

        cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);

        if (ngx_http_parse_complex_uri(r, cscf->merge_slashes) != NGX_OK) {
            r->uri.len = 0;

            ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                          "client sent invalid request");
            ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
            return NGX_ERROR;
        }

    } else {
        r->uri.data = r->uri_start;
    }

    r->unparsed_uri.len = r->uri_end - r->uri_start;
    r->unparsed_uri.data = r->uri_start;

    r->valid_unparsed_uri = r->space_in_uri ? 0 : 1;

    if (r->uri_ext) {
        if (r->args_start) {
            r->exten.len = r->args_start - 1 - r->uri_ext;
        } else {
            r->exten.len = r->uri_end - r->uri_ext;
        }

        r->exten.data = r->uri_ext;
    }

    if (r->args_start && r->uri_end > r->args_start) {
        r->args.len = r->uri_end - r->args_start;
        r->args.data = r->args_start;
    }

#if (NGX_WIN32)
    {
    u_char  *p, *last;

    p = r->uri.data;
    last = r->uri.data + r->uri.len;

    while (p < last) {

        if (*p++ == ':') {

            /*
             * this check covers "::$data", "::$index_allocation" and
             * ":$i30:$index_allocation"
             */

            if (p < last && *p == '$') {
                ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                              "client sent unsafe win32 URI");
                ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
                return NGX_ERROR;
            }
        }
    }

    p = r->uri.data + r->uri.len - 1;

    while (p > r->uri.data) {

        if (*p == ' ') {
            p--;
            continue;
        }

        if (*p == '.') {
            p--;
            continue;
        }

        break;
    }

    if (p != r->uri.data + r->uri.len - 1) {
        r->uri.len = p + 1 - r->uri.data;
        ngx_http_set_exten(r);
    }

    }
#endif

/*
2016/01/07 12:38:01[      ngx_http_process_request_line,  1002]  [debug] 20090#20090: *14 http request line: "GET /download/nginx-1.9.2.rar?st=xhWL03HbtjrojpEAfiD6Mw&e=1452139931 HTTP/1.1"
2016/01/07 12:38:01[       ngx_http_process_request_uri,  1223]  [debug] 20090#20090: *14 http uri: "/download/nginx-1.9.2.rar"
2016/01/07 12:38:01[       ngx_http_process_request_uri,  1226]  [debug] 20090#20090: *14 http args: "st=xhWL03HbtjrojpEAfiD6Mw&e=1452139931"
2016/01/07 12:38:01[       ngx_http_process_request_uri,  1229]  [debug] 20090#20090: *14 http exten: "rar"
*/
    //http://10.135.10.167/aaaaaaaa?bbbb  http uri: "/aaaaaaaa"  http args: "bbbb"  Í¬Ê±"GET /aaaaaaaa?bbbb.txt HTTP/1.1"ÖĞµÄ/aaaaaaa?bbbb.txtºÍuriÖĞµÄÒ»Ñù
    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   "http uri: \"%V\"", &r->uri);

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   "http args: \"%V\"", &r->args);

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   "http exten: \"%V\"", &r->exten);

    return NGX_OK;
}

/*
GET /sample.jsp HTTP/1.1

 

Accept:image/gif.image/jpeg,**

Accept-Language:zh-cn

Connection:Keep-Alive

Host:localhost

User-Agent:Mozila/4.0(compatible:MSIE5.01:Windows NT5.0)

Accept-Encoding:gzip,deflate.

*/ //½âÎöÉÏÃæµÄGET /sample.jsp HTTP/1.1ÒÔÍâµÄÅäÖÃ

//ngx_http_parse_request_line½âÎöÇëÇóĞĞ£¬ ngx_http_process_request_headers(ngx_http_parse_header_line)½âÎöÍ·²¿ĞĞ(ÇëÇóÍ·²¿) ½ÓÊÕ°üÌångx_http_read_client_request_body
static void
ngx_http_process_request_headers(ngx_event_t *rev)
{
    u_char                     *p;
    size_t                      len;
    ssize_t                     n;
    ngx_int_t                   rc, rv;
    ngx_table_elt_t            *h;
    ngx_connection_t           *c;
    ngx_http_header_t          *hh;
    ngx_http_request_t         *r;
    ngx_http_core_srv_conf_t   *cscf;
    ngx_http_core_main_conf_t  *cmcf;

    c = rev->data;
    r = c->data;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, rev->log, 0,
                   "http process request header line");

    if (rev->timedout) {//Èç¹ûtcpÁ¬½Ó½¨Á¢ºó£¬µÈÁËclient_header_timeoutÃëÒ»Ö±Ã»ÓĞÊÕµ½¿Í»§¶ËµÄÊı¾İ°ü¹ıÀ´£¬Ôò¹Ø±ÕÁ¬½Ó
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, "client timed out");
        c->timedout = 1;
        ngx_http_close_request(r, NGX_HTTP_REQUEST_TIME_OUT);
        return;
    }

    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);

    rc = NGX_AGAIN;

    for ( ;; ) {

        if (rc == NGX_AGAIN) {

            if (r->header_in->pos == r->header_in->end) {//ËµÃ÷header_in¿Õ¼äÒÑ¾­ÓÃÍêÁË£¬ÎŞ·¨¼ÌĞø´æ´¢recvµÄÊı¾İ£¬ÔòÖØĞÂ·ÖÅä´ó¿Õ¼ä

                rv = ngx_http_alloc_large_header_buffer(r, 0);

                if (rv == NGX_ERROR) {
                    ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
                    return;
                }

                if (rv == NGX_DECLINED) {
                    p = r->header_name_start;

                    r->lingering_close = 1;

                    if (p == NULL) {
                        ngx_log_error(NGX_LOG_INFO, c->log, 0,
                                      "client sent too large request");
                        ngx_http_finalize_request(r,
                                            NGX_HTTP_REQUEST_HEADER_TOO_LARGE);
                        return;
                    }

                    len = r->header_in->end - p;

                    if (len > NGX_MAX_ERROR_STR - 300) {
                        len = NGX_MAX_ERROR_STR - 300;
                    }

                    ngx_log_error(NGX_LOG_INFO, c->log, 0,
                                "client sent too long header line: \"%*s...\"",
                                len, r->header_name_start);

                    ngx_http_finalize_request(r,
                                            NGX_HTTP_REQUEST_HEADER_TOO_LARGE);
                    return;
                }
            }

            //ÕâÀïÖÁÉÙ¶ÁÒ»´Î
            n = ngx_http_read_request_header(r); //ËµÃ÷ÄÚ´æÖĞµÄÊı¾İ»¹Ã»ÓĞ¶ÁÍê£¬ĞèÒª¶ÁÍêºó¼ÌĞø½âÎö

            if (n == NGX_AGAIN || n == NGX_ERROR) {  
                return;
            }
        }

        /* the host header could change the server configuration context */
        cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);

        rc = ngx_http_parse_header_line(r, r->header_in,
                                        cscf->underscores_in_headers);


        if (rc == NGX_OK) {

            r->request_length += r->header_in->pos - r->header_name_start; //request_lengthÔö¼ÓÒ»ĞĞ×Ö·û³¤¶È

            if (r->invalid_header && cscf->ignore_invalid_headers) {

                /* there was error while a header line parsing */

                ngx_log_error(NGX_LOG_INFO, c->log, 0,
                              "client sent invalid header line: \"%*s\"",
                              r->header_end - r->header_name_start,
                              r->header_name_start);
                continue;
            }

            /* a header line has been parsed successfully */
            /* ½âÎöµÄÍ·²»»áKEY:VALUE´æÈëµ½headers_inÖĞ */
            h = ngx_list_push(&r->headers_in.headers);
            if (h == NULL) {
                ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
                return;
            }

            h->hash = r->header_hash;
            //¿½±´name:valueÖĞµÄnameµ½keyÖĞ,nameºóÃæµÄÃ°ºÅ±»ÓÃ\0Ìæ»»ÁË
            h->key.len = r->header_name_end - r->header_name_start;
            h->key.data = r->header_name_start;
            h->key.data[h->key.len] = '\0';
            
            //¿½±´name:valueÖĞµÄvalueµ½valueÖĞ£¬valueºóµÄ»»ĞĞ·û±»ÓÃ\0Ìæ»»ÁË
            h->value.len = r->header_end - r->header_start;
            h->value.data = r->header_start;
            h->value.data[h->value.len] = '\0';

            h->lowcase_key = ngx_pnalloc(r->pool, h->key.len);
            if (h->lowcase_key == NULL) {
                ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
                return;
            }

             //¿½±´name:valueÖĞµÄnameµ½keyÖĞ,°üÀ¨nameºóÃæµÄÃ°ºÅ
            if (h->key.len == r->lowcase_index) {
                ngx_memcpy(h->lowcase_key, r->lowcase_header, h->key.len);

            } else {
                ngx_strlow(h->lowcase_key, h->key.data, h->key.len);
            }

            //¼ûngx_http_headers_in  //¼ì²é½âÎöµ½µÄÍ·²¿key:valueÖĞµÄ¶ÔÓ¦ngx_http_header_t½á¹¹£¬¼´ngx_http_headers_inÖĞµÄ³ÉÔ±
            hh = ngx_hash_find(&cmcf->headers_in_hash, h->hash,
                               h->lowcase_key, h->key.len); 
            

            //´Óngx_http_headers_inÕÒµ½ÓënameÆ¥ÅäµÄ×Ö·û´®£¬È»ºóÖ»Ğè¶ÔÓ¦µÄhandler,Ò»°ã¾ÍÊÇ°Ñ½âÎö³öµÄname:valueÖĞµÄvalue´æ·Åµ½headers_in³ÉÔ±µÄheadersÁ´±íÖĞ
            
            //²Î¿¼ngx_http_headers_in£¬Í¨¹ı¸ÃÊı×éÖĞµÄ»Øµ÷handerÀ´´æ´¢½âÎöµ½µÄÇëÇóĞĞname:valueÖĞµÄvalueµ½headers_inµÄÏìÓ¦³ÉÔ±ÖĞ£¬¼ûngx_http_process_request_headers
            if (hh && hh->handler(r, h, hh->offset) != NGX_OK) {
                return;
            }

            ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                           "http header: \"%V: %V\"",
                           &h->key, &h->value); //Èç¹û´ò¿ªµ÷ÊÔ¿ª¹Ø£¬Ôòname:value¿ÉÒÔ´æµ½error.logÖĞ

            continue; //¼ÌĞø½âÎöÏÂÒ»ĞĞ
        }

        if (rc == NGX_HTTP_PARSE_HEADER_DONE) {//Í·²¿ĞĞ½âÎöÍê±Ï

            /* a whole header has been parsed successfully */

            ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                           "http header done");
            /*
                ÇëÇóĞĞ
                Í·²¿ĞĞ
                ¿ÕĞĞ(ÕâÀïÊÇ\r\n)
                ÄÚÈİ
               */
            r->request_length += r->header_in->pos - r->header_name_start;//°Ñ¿ÕĞĞµÄ\r\n¼ÓÉÏ

            r->http_state = NGX_HTTP_PROCESS_REQUEST_STATE;

            rc = ngx_http_process_request_header(r);

            if (rc != NGX_OK) {
                return;
            }

            ngx_http_process_request(r);

            return;
        }

        if (rc == NGX_AGAIN) {//·µ»ØNGX_AGAINÊ±£¬±íÊ¾»¹ĞèÒª½ÓÊÕµ½¸ü¶àµÄ×Ö·ûÁ÷²ÅÄÜ¼ÌĞø½âÎö

            /* a header line parsing is still not complete */

            continue;
        }

        /* rc == NGX_HTTP_PARSE_INVALID_HEADER: "\r" is not followed by "\n" */
        /*
            µ±µ÷ÓÃngx_http_parse_header_line·½·¨½âÎö×Ö·û´®¹¹³ÉµÄHTTPÊ±£¬ÊÇÓĞ¿ÉÄÜÓöµ½·Ç·¨µÄ»òÕßNginxµ±Ç°°æ±¾²»Ö§³ÖµÄHTTPÍ·²¿µÄ£¬
            ÕâÊ±¸Ã·½·¨»á·µ»Ø´íÎó£¬ÓÚÊÇµ÷ÓÃngx_http_finalize_request·½·¨£¬Ïò¿Í»§¶Ë·¢ËÍNGX_ HTTP BAD_REQUESTºê¶ÔÓ¦µÄ400´íÎóÂëÏìÓ¦¡£
          */
        ngx_log_error(NGX_LOG_INFO, c->log, 0,
                      "client sent invalid header line: \"%*s\\r...\"",
                      r->header_end - r->header_name_start,
                      r->header_name_start);
        ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
        return;
    }
}


static ssize_t
ngx_http_read_request_header(ngx_http_request_t *r)
{
    ssize_t                    n;
    ngx_event_t               *rev;
    ngx_connection_t          *c;
    ngx_http_core_srv_conf_t  *cscf;

    c = r->connection;
    rev = c->read;

    //ËüµÄpos³ÉÔ±ºÍlast³ÉÔ±Ö¸ÏòµÄµØÖ·Ö®¼äµÄÄÚ´æ¾ÍÊÇ½ÓÊÕµ½µÄ»¹Î´½âÎöµÄ×Ö·ûÁ÷
    n = r->header_in->last - r->header_in->pos; //header_inÖ¸ÕëÖ¸Ïòngx_connection_t->buffer

    //µÚÒ»´Îµ÷ÓÃngx_http_process_request_line·½·¨Ê±»º³åÇøÀï±ØÈ»ÊÇ¿ÕµÄ£¬ÕâÊ±»áµ÷ÓÃ·â×°µÄrecv·½·¨°ÑLinuxÄÚºËÌ×½Ó×Ö»º³åÇøÖĞµÄTCPÁ÷¸´ÖÆµ½header_in»º³åÇøÖĞ
    if (n > 0) {//ÔÚngx_http_wait_request_handlerÖĞ»áÊ×ÏÈ¶ÁÈ¡Ò»´Î£¬ÕâÀïÒ»°ãÊÇ´óÓÚ0µÄ
        return n;
    }

    if (rev->ready) { //Èç¹ûÀ´×Ô¶Ô¶ËµÄÊı¾İ»¹Ã»ÓĞ¶ÁÈ¡»ñÈ¡»¹Ã»ÓĞ¶ÁÍê£¬Ôò¼ÌĞø¶Á
        n = c->recv(c, r->header_in->last,
                    r->header_in->end - r->header_in->last); //ngx_unix_recv
    } else {
        n = NGX_AGAIN;
    }

    //Ã¿´Î¶ÁÈ¡Íê¿Í»§¶Ë¹ıÀ´µÄÇëÇóÊı¾İºó£¬¶¼»áÖ´ĞĞµ½ÕâÀï£¬Ò»°ãÇé¿öÊÇµÚÒ»´ÎÔÚngx_http_wait_request_handler¶ÁÈ¡ÍêËùÓĞÊı¾İ£¬È»ºó»áÔÚ
    //ngx_http_process_request_lineÖĞÔÙ´Îµ÷ÓÃ±¾ngx_http_read_request_headerº¯Êı£¬µÚ¶ş´ÎµÄÊ±ºòÒÑ¾­Ã»Êı¾İÁË£¬»á×ßµ½ÕâÀï,ÀıÈç¿Í»§¶Ë·¢ËÍ¹ıÀ´µÄ
    //Í·²¿ĞĞ²»È«£¬µ¥¿Í»§¶ËÒ»Ö±²»·¢ÉúÊ£ÓàµÄ²¿·Ö
    if (n == NGX_AGAIN) { //Èç¹ûrecv·µ»ØNGX_AGAIN,ÔòĞèÒªÖØĞÂadd read event,ÕâÑùÏÂ´ÎÓĞÊı¾İÀ´¿ÉÒÔ¼ÌĞø¶Á,
        //µ±Ò»´Î´¦Àí¿Í»§¶ËÇëÇó½áÊøºó£¬»á°Ñngx_http_process_request_lineÌí¼Óµ½¶¨Ê±Æ÷ÖĞ£¬Èç¹ûµÈclient_header_timeout»¹Ã»ÓĞĞÅµÄÇëÇóÊı¾İ¹ıÀ´£¬
        //Ôò»á×ßµ½ngx_http_read_request_headerÖĞµÄngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);´Ó¶ø¹Ø±ÕÁ¬½Ó
        if (!rev->timer_set) {
            cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);
            //×¢Òâ£¬ÔÚ½âÎöµ½ÍêÕûµÄÍ·²¿ĞĞºÍÇëÇóĞĞºó£¬»áÔÚngx_http_process_requestÖĞ»á°Ñ¶ÁÊÂ¼ş³¬Ê±¶¨Ê±Æ÷É¾³ı
            //ÔÚÇëÇó´¦ÀíÍê·¢ËÍ¸ø¿Í»§¶ËÊı¾İºó£¬rev->handler = ngx_http_keepalive_handler
            ngx_add_timer(rev, cscf->client_header_timeout, NGX_FUNC_LINE);
        }

        if (ngx_handle_read_event(rev, 0, NGX_FUNC_LINE) != NGX_OK) {
            ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
            return NGX_ERROR;
        }

        return NGX_AGAIN;
    }

    if (n == 0) {
        ngx_log_error(NGX_LOG_INFO, c->log, 0,
                      "client prematurely closed connection");
    }

    if (n == 0 || n == NGX_ERROR) { //TCPÁ¬½Ó³ö´í
        c->error = 1;
        c->log->action = "reading client request headers";

        ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
        return NGX_ERROR;
    }

    r->header_in->last += n;

    return n;
}

/*
//client_header_buffer_sizeÎª¶ÁÈ¡¿Í»§¶ËÊı¾İÊ±Ä¬ÈÏ·ÖÅäµÄ¿Õ¼ä£¬Èç¹û¸Ã¿Õ¼ä²»¹»´æ´¢httpÍ·²¿ĞĞºÍÇëÇóĞĞ£¬Ôò»áµ÷ÓÃlarge_client_header_buffers
//´ÓĞÂ·ÖÅä¿Õ¼ä£¬²¢°ÑÖ®Ç°µÄ¿Õ¼äÄÚÈİ¿½±´µ½ĞÂ¿Õ¼äÖĞ£¬ËùÒÔ£¬ÕâÒâÎ¶×Å¿É±ä³¤¶ÈµÄHTTPÇëÇóĞĞ¼ÓÉÏHTTPÍ·²¿µÄ³¤¶È×ÜºÍ²»ÄÜ³¬¹ılarge_client_ header_
//buffersÖ¸¶¨µÄ×Ö½ÚÊı£¬·ñÔòNginx½«»á±¨´í¡£
*/
//ngx_http_alloc_large_header_buffer·½·¨·ÖÅä¸ü´óµÄ½ÓÊÕ»º³åÇø¡£µ½µ×·ÖÅä¶à´óÄØ£¿ÕâÓÉnginx.confÎÄ¼şÖĞµÄlarge_client_header_buffersÅäÖÃÏîÖ¸¶¨¡£
static ngx_int_t
ngx_http_alloc_large_header_buffer(ngx_http_request_t *r,
    ngx_uint_t request_line)
{
    u_char                    *old, *new;
    ngx_buf_t                 *b;
    ngx_http_connection_t     *hc;
    ngx_http_core_srv_conf_t  *cscf;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   "http alloc large header buffer");

    if (request_line && r->state == 0) {

        /* the client fills up the buffer with "\r\n" */

        r->header_in->pos = r->header_in->start;
        r->header_in->last = r->header_in->start;

        return NGX_OK;
    }

    old = request_line ? r->request_start : r->header_name_start;

    cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);

    if (r->state != 0
        && (size_t) (r->header_in->pos - old)
                                     >= cscf->large_client_header_buffers.size)
    {
        return NGX_DECLINED;
    }

    hc = r->http_connection;

    if (hc->nfree) {
        b = hc->free[--hc->nfree];

        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       "http large header free: %p %uz",
                       b->pos, b->end - b->last);

    } else if (hc->nbusy < cscf->large_client_header_buffers.num) {

        if (hc->busy == NULL) {
            hc->busy = ngx_palloc(r->connection->pool,
                  cscf->large_client_header_buffers.num * sizeof(ngx_buf_t *));
            if (hc->busy == NULL) {
                return NGX_ERROR;
            }
        }

        b = ngx_create_temp_buf(r->connection->pool,
                                cscf->large_client_header_buffers.size);
        if (b == NULL) {
            return NGX_ERROR;
        }

        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       "http large header alloc: %p %uz",
                       b->pos, b->end - b->last);

    } else {
        return NGX_DECLINED;
    }

    hc->busy[hc->nbusy++] = b;

    if (r->state == 0) {
        /*
         * r->state == 0 means that a header line was parsed successfully
         * and we do not need to copy incomplete header line and
         * to relocate the parser header pointers
         */

        r->header_in = b;

        return NGX_OK;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   "http large header copy: %d", r->header_in->pos - old);

    new = b->start;

    ngx_memcpy(new, old, r->header_in->pos - old);

    b->pos = new + (r->header_in->pos - old);
    b->last = new + (r->header_in->pos - old);

    if (request_line) {
        r->request_start = new;

        if (r->request_end) {
            r->request_end = new + (r->request_end - old);
        }

        r->method_end = new + (r->method_end - old);

        r->uri_start = new + (r->uri_start - old);
        r->uri_end = new + (r->uri_end - old);

        if (r->schema_start) {
            r->schema_start = new + (r->schema_start - old);
            r->schema_end = new + (r->schema_end - old);
        }

        if (r->host_start) {
            r->host_start = new + (r->host_start - old);
            if (r->host_end) {
                r->host_end = new + (r->host_end - old);
            }
        }

        if (r->port_start) {
            r->port_start = new + (r->port_start - old);
            r->port_end = new + (r->port_end - old);
        }

        if (r->uri_ext) {
            r->uri_ext = new + (r->uri_ext - old);
        }

        if (r->args_start) {
            r->args_start = new + (r->args_start - old);
        }

        if (r->http_protocol.data) {
            r->http_protocol.data = new + (r->http_protocol.data - old);
        }

    } else {
        r->header_name_start = new;
        r->header_name_end = new + (r->header_name_end - old);
        r->header_start = new + (r->header_start - old);
        r->header_end = new + (r->header_end - old);
    }

    r->header_in = b;

    return NGX_OK;
}


static ngx_int_t
ngx_http_process_header_line(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    ngx_table_elt_t  **ph;

    ph = (ngx_table_elt_t **) ((char *) &r->headers_in + offset);

    if (*ph == NULL) {
        *ph = h;
    }

    return NGX_OK;
}


static ngx_int_t
ngx_http_process_unique_header_line(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    ngx_table_elt_t  **ph;

    ph = (ngx_table_elt_t **) ((char *) &r->headers_in + offset);

    if (*ph == NULL) {
        *ph = h;
        return NGX_OK;
    }

    ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                  "client sent duplicate header line: \"%V: %V\", "
                  "previous value: \"%V: %V\"",
                  &h->key, &h->value, &(*ph)->key, &(*ph)->value);

    ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);

    return NGX_ERROR;
}

//ngx_http_process_request_headers->ngx_http_process_host->ngx_http_set_virtual_server
/*
handlerµÄÈı¸ö²ÎÊı·Ö±ğÎª(r, h, hh->offset):rÎª¶ÔÓ¦µÄÁ¬½ÓÇëÇó£¬h´æ´¢ÎªÍ·²¿ĞĞkey:value(Èç:Content-Type: text/html)Öµ£¬hh->offset¼´
ngx_http_headers_inÖĞ³ÉÔ±µÄ¶ÔÓ¦offset(ÈçÇëÇóĞĞ´øÓĞhost£¬Ôòoffset=offsetof(ngx_http_headers_in_t, host))
*/
static ngx_int_t
ngx_http_process_host(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset) //¸ù¾İÇëÇóÖĞµÄhostÀ´½øĞĞserver²éÕÒºÍ¶¨Î»
{
    ngx_int_t  rc;
    ngx_str_t  host;

    if (r->headers_in.host == NULL) {
        r->headers_in.host = h;
    }

    host = h->value;

    rc = ngx_http_validate_host(&host, r->pool, 0);

    if (rc == NGX_DECLINED) {
        ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                      "client sent invalid host header");
        ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
        return NGX_ERROR;
    }

    if (rc == NGX_ERROR) {
        ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
        return NGX_ERROR;
    }

    if (r->headers_in.server.len) { //À´×ÔÍ¬Ò»¸öTCPÁ¬½ÓµÄ¿Í»§¶Ë£¬ËûÃÇµÄserverÊÇÒ»ÑùµÄ
        return NGX_OK;
    }

    if (ngx_http_set_virtual_server(r, &host) == NGX_ERROR) {
        return NGX_ERROR;
    }

    r->headers_in.server = host;

    return NGX_OK;
}


static ngx_int_t
ngx_http_process_connection(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    if (ngx_strcasestrn(h->value.data, "close", 5 - 1)) { 
        r->headers_in.connection_type = NGX_HTTP_CONNECTION_CLOSE;

    } else if (ngx_strcasestrn(h->value.data, "keep-alive", 10 - 1)) {//³¤Á¬½Ó
        r->headers_in.connection_type = NGX_HTTP_CONNECTION_KEEP_ALIVE;
    }

    return NGX_OK;
}


static ngx_int_t
ngx_http_process_user_agent(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    u_char  *user_agent, *msie;

    if (r->headers_in.user_agent) {
        return NGX_OK;
    }

    r->headers_in.user_agent = h;

    /* check some widespread browsers while the header is in CPU cache */

    user_agent = h->value.data;

    msie = ngx_strstrn(user_agent, "MSIE ", 5 - 1);

    if (msie && msie + 7 < user_agent + h->value.len) {

        r->headers_in.msie = 1;

        if (msie[6] == '.') {

            switch (msie[5]) {
            case '4':
            case '5':
                r->headers_in.msie6 = 1;
                break;
            case '6':
                if (ngx_strstrn(msie + 8, "SV1", 3 - 1) == NULL) {
                    r->headers_in.msie6 = 1;
                }
                break;
            }
        }

#if 0
        /* MSIE ignores the SSL "close notify" alert */
        if (c->ssl) {
            c->ssl->no_send_shutdown = 1;
        }
#endif
    }

    if (ngx_strstrn(user_agent, "Opera", 5 - 1)) {
        r->headers_in.opera = 1;
        r->headers_in.msie = 0;
        r->headers_in.msie6 = 0;
    }

    if (!r->headers_in.msie && !r->headers_in.opera) {

        if (ngx_strstrn(user_agent, "Gecko/", 6 - 1)) {
            r->headers_in.gecko = 1;

        } else if (ngx_strstrn(user_agent, "Chrome/", 7 - 1)) {
            r->headers_in.chrome = 1;

        } else if (ngx_strstrn(user_agent, "Safari/", 7 - 1)
                   && ngx_strstrn(user_agent, "Mac OS X", 8 - 1))
        {
            r->headers_in.safari = 1;

        } else if (ngx_strstrn(user_agent, "Konqueror", 9 - 1)) {
            r->headers_in.konqueror = 1;
        }
    }

    return NGX_OK;
}


static ngx_int_t
ngx_http_process_multi_header_lines(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    ngx_array_t       *headers;
    ngx_table_elt_t  **ph;

    headers = (ngx_array_t *) ((char *) &r->headers_in + offset);

    if (headers->elts == NULL) {
        if (ngx_array_init(headers, r->pool, 1, sizeof(ngx_table_elt_t *))
            != NGX_OK)
        {
            ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
            return NGX_ERROR;
        }
    }

    ph = ngx_array_push(headers);
    if (ph == NULL) {
        ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
        return NGX_ERROR;
    }

    *ph = h;
    return NGX_OK;
}

//ngx_http_process_request_headersÍ·²¿ĞĞ½âÎöÍê±Ïºóµ÷ÓÃº¯Êıngx_http_process_request_header
//½âÎöµ½Í·²¿ĞĞµÄhost:  Ê±»áÖ´ĞĞ¸Ãº¯Êı
ngx_int_t
ngx_http_process_request_header(ngx_http_request_t *r)
{
    if (r->headers_in.server.len == 0
        && ngx_http_set_virtual_server(r, &r->headers_in.server)
           == NGX_ERROR)  
    {
        return NGX_ERROR;
    }

    if (r->headers_in.host == NULL && r->http_version > NGX_HTTP_VERSION_10) { //1.0ÒÔÉÏ°æ±¾±ØĞëĞ¯´øhost
        ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                   "client sent HTTP/1.1 request without \"Host\" header");
        ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
        return NGX_ERROR;
    }

    if (r->headers_in.content_length) {
        r->headers_in.content_length_n =
                            ngx_atoof(r->headers_in.content_length->value.data,
                                      r->headers_in.content_length->value.len);

        if (r->headers_in.content_length_n == NGX_ERROR) {
            ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                          "client sent invalid \"Content-Length\" header");
            ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
            return NGX_ERROR;
        }
    }

    if (r->method & NGX_HTTP_TRACE) {
        ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                      "client sent TRACE method");
        ngx_http_finalize_request(r, NGX_HTTP_NOT_ALLOWED);
        return NGX_ERROR;
    }

    if (r->headers_in.transfer_encoding) {
        if (r->headers_in.transfer_encoding->value.len == 7
            && ngx_strncasecmp(r->headers_in.transfer_encoding->value.data,
                               (u_char *) "chunked", 7) == 0) //Transfer-Encoding:chunked
        {
            r->headers_in.content_length = NULL;
            r->headers_in.content_length_n = -1;
            r->headers_in.chunked = 1;

        } else if (r->headers_in.transfer_encoding->value.len != 8
            || ngx_strncasecmp(r->headers_in.transfer_encoding->value.data,
                               (u_char *) "identity", 8) != 0)
        {
            ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                          "client sent unknown \"Transfer-Encoding\": \"%V\"",
                          &r->headers_in.transfer_encoding->value);
            ngx_http_finalize_request(r, NGX_HTTP_NOT_IMPLEMENTED);
            return NGX_ERROR;
        }
    }

    if (r->headers_in.connection_type == NGX_HTTP_CONNECTION_KEEP_ALIVE) {
        if (r->headers_in.keep_alive) {//Connection=keep-aliveÊ±²ÅÓĞĞ§
            r->headers_in.keep_alive_n =
                            ngx_atotm(r->headers_in.keep_alive->value.data,
                                      r->headers_in.keep_alive->value.len);
        }
    }

    return NGX_OK;
}

/*
ngx_http_process_request·½·¨¸ºÔğÔÚ½ÓÊÕÍêHTTPÍ·²¿ºó£¬µÚÒ»´ÎÓë¸÷¸öHTTPÄ£¿é¹²Í¬°´½×¶Î´¦ÀíÇëÇó£¬¶ø¶ÔÓÚngx_http_request_handler·½·¨£¬
Èç¹ûngx_http_process_requestÃ»ÄÜ´¦ÀíÍêÇëÇó£¬Õâ¸öÇëÇóÉÏµÄÊÂ¼şÔÙ´Î±»´¥·¢£¬ÄÇ¾Í½«ÓÉ´Ë·½·¨¼ÌĞø´¦ÀíÁË¡£
*/
//ngx_http_process_request_headersÍ·²¿ĞĞ½âÎöÍê±Ïºóµ÷ÓÃº¯Êıngx_http_process_request_header
void
ngx_http_process_request(ngx_http_request_t *r) 
{
    ngx_connection_t  *c;

    c = r->connection;

#if (NGX_HTTP_SSL)

    if (r->http_connection->ssl) {
        long                      rc;
        X509                     *cert;
        ngx_http_ssl_srv_conf_t  *sscf;

        if (c->ssl == NULL) {
            ngx_log_error(NGX_LOG_INFO, c->log, 0,
                          "client sent plain HTTP request to HTTPS port");
            ngx_http_finalize_request(r, NGX_HTTP_TO_HTTPS);
            return;
        }

        sscf = ngx_http_get_module_srv_conf(r, ngx_http_ssl_module);

        if (sscf->verify) {
            rc = SSL_get_verify_result(c->ssl->connection);

            if (rc != X509_V_OK
                && (sscf->verify != 3 || !ngx_ssl_verify_error_optional(rc)))
            {
                ngx_log_error(NGX_LOG_INFO, c->log, 0,
                              "client SSL certificate verify error: (%l:%s)",
                              rc, X509_verify_cert_error_string(rc));

                ngx_ssl_remove_cached_session(sscf->ssl.ctx,
                                       (SSL_get0_session(c->ssl->connection)));

                ngx_http_finalize_request(r, NGX_HTTPS_CERT_ERROR);
                return;
            }

            if (sscf->verify == 1) {
                cert = SSL_get_peer_certificate(c->ssl->connection);

                if (cert == NULL) {
                    ngx_log_error(NGX_LOG_INFO, c->log, 0,
                                  "client sent no required SSL certificate");

                    ngx_ssl_remove_cached_session(sscf->ssl.ctx,
                                       (SSL_get0_session(c->ssl->connection)));

                    ngx_http_finalize_request(r, NGX_HTTPS_NO_CERT);
                    return;
                }

                X509_free(cert);
            }
        }
    }

#endif
    /*
    ÓÉÓÚÏÖÔÚÒÑ¾­¿ªÊ¼×¼±¸µ÷ÓÃ¸÷HTTPÄ£¿é´¦ÀíÇëÇóÁË£¬Òò´Ë²»ÔÙ´æÔÚ½ÓÊÕHTTPÇëÇóÍ·²¿³¬Ê±µÄÎÊÌâ£¬ÄÇ¾ÍĞèÒª´Ó¶¨Ê±Æ÷ÖĞ°Ñµ±Ç°Á¬½ÓµÄ¶ÁÊÂ¼şÒÆ³ıÁË¡£
    ¼ì²é¶ÁÊÂ¼ş¶ÔÓ¦µÄtimer_set±êÖ¾Î»£¬Á¦1Ê±±íÊ¾¶ÁÊÂ¼şÒÑ¾­Ìí¼Óµ½¶¨Ê±Æ÷ÖĞÁË£¬ÕâÊ±ĞèÒªµ÷ÓÃngx_del_timer´Ó¶¨Ê±Æ÷ÖĞÒÆ³ı¶ÁÊÂ¼ş£»
     */
    if (c->read->timer_set) {//ngx_http_read_request_headerÖĞ¶ÁÈ¡²»µ½Êı¾İµÄÊ±ºò·µ»ØNGX_AGIN£¬»áÌí¼Ó¶¨Ê±Æ÷ºÍ¶ÁÊÂ¼ş±íÊ¾¼ÌĞøµÈ´ı¿Í»§¶ËÊı¾İµ½À´
        ngx_del_timer(c->read, NGX_FUNC_LINE);
    }

#if (NGX_STAT_STUB)
    (void) ngx_atomic_fetch_add(ngx_stat_reading, -1);
    r->stat_reading = 0;
    (void) ngx_atomic_fetch_add(ngx_stat_writing, 1);
    r->stat_writing = 1;
#endif

/*
´ÓÏÖÔÚ¿ªÊ¼²»»áÔÙĞèÒª½ÓÊÕHTTPÇëÇóĞĞ»òÕßÍ·²¿£¬ËùÒÔĞèÒªÖØĞÂÉèÖÃµ±Ç°Á¬½Ó¶Á/Ğ´ÊÂ¼şµÄ»Øµ÷·½·¨¡£ÔÚÕâÒ»²½ÖèÖĞ£¬½«Í¬Ê±°Ñ¶ÁÊÂ¼ş¡¢Ğ´ÊÂ¼şµÄ»Øµ÷
·½·¨¶¼ÉèÖÃÎªngx_http_request_handler·½·¨£¬ÇëÇóµÄºóĞø´¦Àí¶¼ÊÇÍ¨¹ıngx_http_request_handler·½·¨½øĞĞµÄ¡£
 */
    c->read->handler = ngx_http_request_handler; //ÓÉ¶ÁĞ´ÊÂ¼ş´¥·¢ngx_http_request_handler  //ÓÉepoll¶ÁÊÂ¼şÔÚngx_epoll_process_events´¥·¢
    c->write->handler = ngx_http_request_handler;   //ÓÉepollĞ´ÊÂ¼şÔÚngx_epoll_process_events´¥·¢

/*
ÉèÖÃngx_http_request_t½á¹¹ÌåµÄread_event_handler·½·¨gx_http_block_reading¡£µ±ÔÙ´ÎÓĞ¶ÁÊÂ¼şµ½À´Ê±£¬½«»áµ÷ÓÃngx_http_block_reading·½·¨
´¦ÀíÇëÇó¡£¶øÕâÀï½«ËüÉèÖÃÎªngx_http_block_reading·½·¨£¬Õâ¸ö·½·¨¿ÉÈÏÎª²»×öÈÎºÎÊÂ£¬ËüµÄÒâÒåÔÚÓÚ£¬Ä¿Ç°ÒÑ¾­¿ªÊ¼´¦ÀíHTTPÇëÇó£¬³ı·ÇÄ³¸öHTTPÄ£¿éÖØĞÂ
ÉèÖÃÁËread_event_handler·½·¨£¬·ñÔòÈÎºÎ¶ÁÊÂ¼ş¶¼½«µÃ²»µ½´¦Àí£¬Ò²¿ÉËÆÈÏÎª¶ÁÊÂ¼ş±»×è ÈûÁË¡£
*/
    r->read_event_handler = ngx_http_block_reading; //±íÊ¾ÔİÊ±²»Òª¶ÁÈ¡¿Í»§¶ËÇëÇó    

    /* ngx_http_process_requestºÍngx_http_request_handlerÕâÁ½¸ö·½·¨µÄ¹²Í¨Ö®´¦ÔÚÓÚ£¬ËüÃÇ¶¼»áÏÈ°´½×¶Îµ÷ÓÃ¸÷¸öHTTPÄ£¿é´¦ÀíÇëÇó£¬ÔÙ´¦ÀípostÇëÇó */
    ngx_http_handler(r); //ÕâÀïÃæ»áÖ´ĞĞngx_http_core_run_phases

/*
HTTP¿ò¼ÜÎŞÂÛÊÇµ÷ÓÃngx_http_process_request·½·¨£¨Ê×´Î´ÓÒµÎñÉÏ´¦ÀíÇëÇó£©»¹ÊÇngx_http_request_handler·½·¨£¨TCPÁ¬½ÓÉÏºóĞøµÄÊÂ¼ş´¥·¢Ê±£©´¦Àí
ÇëÇó£¬×îºó¶¼ÓĞÒ»¸ö²½Öè£¬¾ÍÊÇµ÷ÓÃngx_http_run_posted_requests·½·¨´¦ÀípostÇëÇó
*/
    //µ÷ÓÃngx_http_run_posted_requests·½·¨Ö´ĞĞpostÇëÇó
    ngx_http_run_posted_requests(c);
}

//¼ì²âÍ·²¿ĞĞhost:ºóÃæµÄ²ÎÊıÊÇ·ñÕıÈ·
static ngx_int_t
ngx_http_validate_host(ngx_str_t *host, ngx_pool_t *pool, ngx_uint_t alloc)
{
    u_char  *h, ch;
    size_t   i, dot_pos, host_len;

    enum {
        sw_usual = 0,
        sw_literal,
        sw_rest
    } state;

    dot_pos = host->len;
    host_len = host->len;

    h = host->data;

    state = sw_usual;

    for (i = 0; i < host->len; i++) {
        ch = h[i];

        switch (ch) {

        case '.':
            if (dot_pos == i - 1) {
                return NGX_DECLINED;
            }
            dot_pos = i;
            break;

        case ':':
            if (state == sw_usual) {
                host_len = i;
                state = sw_rest;
            }
            break;

        case '[':
            if (i == 0) {
                state = sw_literal;
            }
            break;

        case ']':
            if (state == sw_literal) {
                host_len = i + 1;
                state = sw_rest;
            }
            break;

        case '\0':
            return NGX_DECLINED;

        default:

            if (ngx_path_separator(ch)) {
                return NGX_DECLINED;
            }

            if (ch >= 'A' && ch <= 'Z') {
                alloc = 1;
            }

            break;
        }
    }

    if (dot_pos == host_len - 1) {
        host_len--;
    }

    if (host_len == 0) {
        return NGX_DECLINED;
    }

    if (alloc) {
        host->data = ngx_pnalloc(pool, host_len);
        if (host->data == NULL) {
            return NGX_ERROR;
        }

        ngx_strlow(host->data, h, host_len);
    }

    host->len = host_len;

    return NGX_OK;
}

/*
µ±¿Í»§¶Ë½¨Á¢Á¬½Óºó£¬²¢·¢ËÍÇëÇóÊı¾İ¹ıÀ´ºó£¬ÔÚngx_http_create_requestÖĞ´Óngx_http_connection_t->conf_ctx»ñÈ¡ÕâÈı¸öÖµ£¬Ò²¾ÍÊÇ¸ù¾İ¿Í»§¶ËÁ¬½Ó
±¾¶ËËù´¦IP:portËù¶ÔÓ¦µÄÄ¬ÈÏserver{}¿éÉÏÏÂÎÄ£¬Èç¹ûÊÇÒÔÏÂÇé¿ö:ip:portÏàÍ¬£¬µ¥ÔÚ²»Í¬µÄserver{}¿éÖĞ£¬ÄÇÃ´ÓĞ¿ÉÄÜ¿Í»§¶ËÇëÇó¹ıÀ´µÄÊ±ºòĞ¯´øµÄhost
Í·²¿ÏîµÄserver_name²»ÔÚÄ¬ÈÏµÄserver{}ÖĞ£¬¶øÔÚÁíÍâµÄserver{}ÖĞ£¬ËùÒÔĞèÒªÍ¨¹ıngx_http_set_virtual_serverÖØĞÂ»ñÈ¡server{}ºÍlocation{}ÉÏÏÂÎÄÅäÖÃ
ÀıÈç:
    server {  #1
        listen 1.1.1.1:80;
        server_name aaa
    }

    server {   #2
        listen 1.1.1.1:80;
        server_name bbb
    }
    ÕâÁ½¸öserver{}Õ¼ÓÃÍ¬Ò»¸öngx_http_conf_addr_t£¬µ«ËûÃÇÓµÓĞÁ½¸ö²»Í¬µÄngx_http_core_srv_conf_t(´æÔÚÓÚngx_http_conf_addr_t->servers),
    Õâ¸öÅäÖÃÔÚngx_http_init_connectionÖĞ»ñÈ¡Õâ¸öngx_http_port_t(1¸öngx_http_port_t¶ÔÓ¦Ò»¸öngx_http_conf_addr_t)°Ñngx_http_connection_t->conf_ctx
    Ö¸Ïòngx_http_addr_conf_s->default_server,Ò²¾ÍÊÇÖ¸Ïò#1,È»ºóngx_http_create_requestÖĞ°Ñmain_conf srv_conf  loc_conf Ö¸Ïò#1,
    µ«Èç¹ûÇëÇóĞĞµÄÍ·²¿µÄhost:bbb£¬ÄÇÃ´ĞèÒªÖØĞÂ»ñÈ¡¶ÔÓ¦µÄserver{} #2,¼ûngx_http_set_virtual_server->ngx_http_find_virtual_server
 */

//ÔÚ½âÎöµ½httpÍ·²¿µÄhost×Ö¶Îºó£¬»áÍ¨¹ı//ngx_http_process_request_headers->ngx_http_process_host->ngx_http_set_virtual_server
//»ñÈ¡server_nameÅäÖÃºÍhost×Ö·û´®ÍêÈ«Ò»ÑùµÄserver{}ÉÏÏÂÎÄÅäÖÃngx_http_core_srv_conf_tºÍngx_http_core_loc_conf_t
static ngx_int_t
ngx_http_set_virtual_server(ngx_http_request_t *r, ngx_str_t *host)
{
    ngx_int_t                  rc;
    ngx_http_connection_t     *hc;
    ngx_http_core_loc_conf_t  *clcf;
    ngx_http_core_srv_conf_t  *cscf;

#if (NGX_SUPPRESS_WARN)
    cscf = NULL;
#endif

    hc = r->http_connection;

#if (NGX_HTTP_SSL && defined SSL_CTRL_SET_TLSEXT_HOSTNAME)

    if (hc->ssl_servername) {
        if (hc->ssl_servername->len == host->len
            && ngx_strncmp(hc->ssl_servername->data,
                           host->data, host->len) == 0)
        {
#if (NGX_PCRE)
            if (hc->ssl_servername_regex
                && ngx_http_regex_exec(r, hc->ssl_servername_regex,
                                          hc->ssl_servername) != NGX_OK)
            {
                ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
                return NGX_ERROR;
            }
#endif
            return NGX_OK;
        }
    }

#endif
    //²éÕÒhost×Ö·û´®ºÍserver_nameÅäÖÃÏàÍ¬µÄserver{}ÉÏÏÂÎÄ
    rc = ngx_http_find_virtual_server(r->connection,
                                      hc->addr_conf->virtual_names,
                                      host, r, &cscf);

    if (rc == NGX_ERROR) {
        ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
        return NGX_ERROR;
    }

#if (NGX_HTTP_SSL && defined SSL_CTRL_SET_TLSEXT_HOSTNAME)

    if (hc->ssl_servername) {
        ngx_http_ssl_srv_conf_t  *sscf;

        if (rc == NGX_DECLINED) {
            cscf = hc->addr_conf->default_server;
            rc = NGX_OK;
        }

        sscf = ngx_http_get_module_srv_conf(cscf->ctx, ngx_http_ssl_module);

        if (sscf->verify) {
            ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                          "client attempted to request the server name "
                          "different from that one was negotiated");
            ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
            return NGX_ERROR;
        }
    }

#endif

    if (rc == NGX_DECLINED) {
        return NGX_OK;
    }

    /*
µ±¿Í»§¶Ë½¨Á¢Á¬½Óºó£¬²¢·¢ËÍÇëÇóÊı¾İ¹ıÀ´ºó£¬ÔÚngx_http_create_requestÖĞ´Óngx_http_connection_t->conf_ctx»ñÈ¡ÕâÈı¸öÖµ£¬Ò²¾ÍÊÇ¸ù¾İ¿Í»§¶ËÁ¬½Ó
±¾¶ËËù´¦IP:portËù¶ÔÓ¦µÄÄ¬ÈÏserver{}¿éÉÏÏÂÎÄ£¬Èç¹ûÊÇÒÔÏÂÇé¿ö:ip:portÏàÍ¬£¬µ¥ÔÚ²»Í¬µÄserver{}¿éÖĞ£¬ÄÇÃ´ÓĞ¿ÉÄÜ¿Í»§¶ËÇëÇó¹ıÀ´µÄÊ±ºòĞ¯´øµÄhost
Í·²¿ÏîµÄserver_name²»ÔÚÄ¬ÈÏµÄserver{}ÖĞ£¬¶øÔÚÁíÍâµÄserver{}ÖĞ£¬ËùÒÔĞèÒªÍ¨¹ıngx_http_set_virtual_serverÖØĞÂ»ñÈ¡server{}ºÍlocation{}ÉÏÏÂÎÄÅäÖÃ
ÀıÈç:
    server {  #1
        listen 1.1.1.1:80;
        server_name aaa
    }

    server {   #2
        listen 1.1.1.1:80;
        server_name bbb
    }
    Õâ¸öÅäÖÃÔÚngx_http_init_connectionÖĞ°Ñngx_http_connection_t->conf_ctxÖ¸Ïòngx_http_addr_conf_s->default_server,Ò²¾ÍÊÇÖ¸Ïò#1,È»ºó
    ngx_http_create_requestÖĞ°Ñmain_conf srv_conf  loc_conf Ö¸Ïò#1,
    µ«Èç¹ûÇëÇóĞĞµÄÍ·²¿µÄhost:bbb£¬ÄÇÃ´ĞèÒªÖØĞÂ»ñÈ¡¶ÔÓ¦µÄserver{} #2,¼ûngx_http_set_virtual_server
 */
    //°Ñ srv_conf  loc_confÖ¸ÏòhostÓëserver_nameÅäÖÃÏàÍ¬µÄserver{]ÉÏÏÂÎÄÅäÖÃsrv_conf  loc_conf

    /*
        ÕâÀïÒ²ÌåÏÖÁËÔÚngx_http_init_connectionÖĞ»ñÈ¡http{}ÉÏÏÂÎÄctx£¬Èç¹û¿Í»§¶ËÇëÇóÖĞ´øÓĞhost²ÎÊı£¬Ôò»á¼ÌĞøÔÚngx_http_set_virtual_serverÖĞÖØĞÂ»ñÈ¡
        ¶ÔÓ¦µÄserver{}ºÍlocation{}£¬Èç¹û¿Í»§¶ËÇëÇó²»´øhostÍ·²¿ĞĞ£¬ÔòÊ¹ÓÃÄ¬ÈÏµÄserver{},¼û ngx_http_init_connection
    */
    r->srv_conf = cscf->ctx->srv_conf;
    r->loc_conf = cscf->ctx->loc_conf;

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    ngx_set_connection_log(r->connection, clcf->error_log);

    return NGX_OK;
}

//´Óvirtual_names->names  hash±íÖĞ²éÕÒhostËù´¦×Ö·û´®×÷Îªkey£¬ÆäÔÚhashÖĞ¶ÔÓ¦½ÚµãµÄvalueÖµ,Ò²¾ÍÊÇ²éÕÒhost×Ö·û´®sever_nameÅäÖÃÏàÍ¬µÄserver{}ÉÏÏÂÎÄ¡£
/*
µ±¿Í»§¶Ë½¨Á¢Á¬½Óºó£¬²¢·¢ËÍÇëÇóÊı¾İ¹ıÀ´ºó£¬ÔÚngx_http_create_requestÖĞ´Óngx_http_connection_t->conf_ctx»ñÈ¡ÕâÈı¸öÖµ£¬Ò²¾ÍÊÇ¸ù¾İ¿Í»§¶ËÁ¬½Ó
±¾¶ËËù´¦IP:portËù¶ÔÓ¦µÄÄ¬ÈÏserver{}¿éÉÏÏÂÎÄ£¬Èç¹ûÊÇÒÔÏÂÇé¿ö:ip:portÏàÍ¬£¬µ¥ÔÚ²»Í¬µÄserver{}¿éÖĞ£¬ÄÇÃ´ÓĞ¿ÉÄÜ¿Í»§¶ËÇëÇó¹ıÀ´µÄÊ±ºòĞ¯´øµÄhost
Í·²¿ÏîµÄserver_name²»ÔÚÄ¬ÈÏµÄserver{}ÖĞ£¬¶øÔÚÁíÍâµÄserver{}ÖĞ£¬ËùÒÔĞèÒªÍ¨¹ıngx_http_set_virtual_serverÖØĞÂ»ñÈ¡server{}ºÍlocation{}ÉÏÏÂÎÄÅäÖÃ
ÀıÈç:
    server {  #1
        listen 1.1.1.1:80;
        server_name aaa
    }

    server {   #2
        listen 1.1.1.1:80;
        server_name bbb
    }
    ÕâÁ½¸öserver{}Õ¼ÓÃÍ¬Ò»¸öngx_http_conf_addr_t£¬µ«ËûÃÇÓµÓĞÁ½¸ö²»Í¬µÄngx_http_core_srv_conf_t(´æÔÚÓÚngx_http_conf_addr_t->servers),
    Õâ¸öÅäÖÃÔÚngx_http_init_connectionÖĞ»ñÈ¡Õâ¸öngx_http_port_t(1¸öngx_http_port_t¶ÔÓ¦Ò»¸öngx_http_conf_addr_t)°Ñngx_http_connection_t->conf_ctx
    Ö¸Ïòngx_http_addr_conf_s->default_server,Ò²¾ÍÊÇÖ¸Ïò#1,È»ºóngx_http_create_requestÖĞ°Ñmain_conf srv_conf  loc_conf Ö¸Ïò#1,
    µ«Èç¹ûÇëÇóĞĞµÄÍ·²¿µÄhost:bbb£¬ÄÇÃ´ĞèÒªÖØĞÂ»ñÈ¡¶ÔÓ¦µÄserver{} #2,¼ûngx_http_set_virtual_server->ngx_http_find_virtual_server
 */static ngx_int_t
ngx_http_find_virtual_server(ngx_connection_t *c,
    ngx_http_virtual_names_t *virtual_names, ngx_str_t *host,
    ngx_http_request_t *r, ngx_http_core_srv_conf_t **cscfp) //»ñÈ¡host×Ö·û´®¶ÔÓ¦µÄserver_nameËù¶Ô´¦µÄserver{}ÅäÖÃ¿éĞÅÏ¢
{
    ngx_http_core_srv_conf_t  *cscf;

    if (virtual_names == NULL) {
        return NGX_DECLINED;
    }

    //virtual_names->names hashÖĞµÄkeyÎª×Ö·û´®server_name xxxÖĞµÄxxx,valueÎª¸Ãserver_name xxxËùÔÚµÄserver{}¿é
    cscf = ngx_hash_find_combined(&virtual_names->names,
                                  ngx_hash_key(host->data, host->len),
                                  host->data, host->len);

    if (cscf) {
        *cscfp = cscf;
        return NGX_OK;
    }

#if (NGX_PCRE)

    if (host->len && virtual_names->nregex) {
        ngx_int_t                n;
        ngx_uint_t               i;
        ngx_http_server_name_t  *sn;

        sn = virtual_names->regex;

#if (NGX_HTTP_SSL && defined SSL_CTRL_SET_TLSEXT_HOSTNAME)

        if (r == NULL) {
            ngx_http_connection_t  *hc;

            for (i = 0; i < virtual_names->nregex; i++) {

                n = ngx_regex_exec(sn[i].regex->regex, host, NULL, 0);

                if (n == NGX_REGEX_NO_MATCHED) {
                    continue;
                }

                if (n >= 0) {
                    hc = c->data;
                    hc->ssl_servername_regex = sn[i].regex;

                    *cscfp = sn[i].server;
                    return NGX_OK;
                }

                ngx_log_error(NGX_LOG_ALERT, c->log, 0,
                              ngx_regex_exec_n " failed: %i "
                              "on \"%V\" using \"%V\"",
                              n, host, &sn[i].regex->name);

                return NGX_ERROR;
            }

            return NGX_DECLINED;
        }

#endif /* NGX_HTTP_SSL && defined SSL_CTRL_SET_TLSEXT_HOSTNAME */

        for (i = 0; i < virtual_names->nregex; i++) {

            n = ngx_http_regex_exec(r, sn[i].regex, host);

            if (n == NGX_DECLINED) {
                continue;
            }

            if (n == NGX_OK) {
                *cscfp = sn[i].server;
                return NGX_OK;
            }

            return NGX_ERROR;
        }
    }

#endif /* NGX_PCRE */

    return NGX_DECLINED;
}

/*
ngx_http_process_request·½·¨¸ºÔğÔÚ½ÓÊÕÍêHTTPÍ·²¿ºó£¬µÚÒ»´ÎÓë¸÷¸öHTTPÄ£¿é¹²Í¬°´½×¶Î´¦ÀíÇëÇó£¬¶ø¶ÔÓÚngx_http_request_handler·½·¨£¬
Èç¹ûngx_http_process_requestÃ»ÄÜ´¦ÀíÍêÇëÇó£¬Õâ¸öÇëÇóÉÏµÄÊÂ¼şÔÙ´Î±»´¥·¢£¬ÄÇ¾Í½«ÓÉ´Ë·½·¨¼ÌĞø´¦ÀíÁË¡£

µ±½âÎöµ½ÍêÕûµÄÍ·²¿ĞĞºÍÇëÇóĞĞºó£¬²»»áÔÙĞèÒª½ÓÊÕHTTPÇëÇóĞĞ»òÕßÍ·²¿£¬ËùÒÔĞèÒªÖØĞÂÉèÖÃµ±Ç°Á¬½Ó¶Á/Ğ´ÊÂ¼şµÄ»Øµ÷·½·¨¡£½«Í¬Ê±°Ñ¶ÁÊÂ¼ş¡¢Ğ´ÊÂ¼şµÄ»Øµ÷
·½·¨¶¼ÉèÖÃÎªngx_http_request_handler·½·¨£¬ÇëÇóµÄºóĞø´¦Àí¶¼ÊÇÍ¨¹ıngx_http_request_handler·½·¨½øĞĞµÄ¡£

HTTP¿ò¼ÜÎŞÂÛÊÇµ÷ÓÃngx_http_process_request·½·¨£¨Ê×´Î´ÓÒµÎñÉÏ´¦ÀíÇëÇó£©»¹ÊÇngx_http_request_handler·½·¨£¨TCPÁ¬½ÓÉÏºóĞøµÄÊÂ¼ş´¥·¢Ê±£©´¦Àí
ÇëÇó£¬×îºó¶¼ÓĞÒ»¸ö²½Öè£¬¾ÍÊÇµ÷ÓÃngx_http_run_posted_requests·½·¨´¦ÀípostÇëÇó
*/ 
//¿Í»§¶ËÊÂ¼ş´¦ÀíhandlerÒ»°ã(write(read)->handler)Ò»°ãÎªngx_http_request_handler£¬ ºÍºó¶ËµÄhandlerÒ»°ã(write(read)->handler)Ò»°ãÎªngx_http_upstream_handler
static void
ngx_http_request_handler(ngx_event_t *ev)
{
    ngx_connection_t    *c;
    ngx_http_request_t  *r;

/*
ngx_http_request_handlerÊÇHTTPÇëÇóÉÏ¶Á/Ğ´ÊÂ¼şµÄ»Øµ÷·½·¨¡£ÔÚngx_event_t½á¹¹Ìå±íÊ¾µÄÊÂ¼şÖĞ£¬data³ÉÔ±Ö¸ÏòÁËÕâ¸öÊÂ¼ş¶ÔÓ¦µÄngx_connection_tÁ¬½Ó£¬
ÔÚHTTP¿ò¼ÜµÄngx_connection_t½á¹¹ÌåÖĞµÄdata³ÉÔ±ÔòÖ¸ÏòÁËngx_http_request_t½á¹¹Ìå
*/
    c = ev->data;
    r = c->data;

    ngx_http_set_log_request(c->log, r);

    ngx_log_debug3(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   "http run request(ev->write:%d): \"%V?%V\"", ev->write, &r->uri, &r->args);

/*
 ¼ì²éÕâ¸öÊÂ¼şµÄwrite¿ÉĞ´±êÖ¾£¬Èç¹ûwrite±êÖ¾Îªl£¬Ôòµ÷ÓÃngx_http_request_t½á¹¹ÌåÖĞµÄwrite event- handler·½·¨¡£×¢Òâ£¬ÎÒÃÇÔÚngx_http_handler
 ·½·¨ÖĞÒÑ¾­½«write_event_handlerÉèÖÃÎªngx_http_core_run_phases·½·¨£¬¶øÒ»°ãÎÒÃÇ¿ª·¢µÄ²»Ì«¸´ÔÓµÄHTTPÄ£¿éÊÇ²»»áÖØĞÂÉèÖÃwrite_event_handler·½
 ·¨µÄ£¬Òò´Ë£¬Ò»µ©ÓĞ¿ÉĞ´ÊÂ¼şÊ±£¬¾Í»á¼ÌĞø°´ÕÕÁ÷³ÌÖ´ĞĞngx_http_core_run_phases·½·¨£¬²¢¼ÌĞø°´½×¶Îµ÷ÓÃ¸÷¸öHTTPÄ£¿éÊµÏÖµÄ·½·¨´¦ÀíÇëÇó¡£

Èç¹ûÒ»¸öÊÂ¼şµÄ¶ÁĞ´±êÖ¾Í¬Ê±Îª1Ê±£¬½öwrite_event_handler·½·¨»á±»µ÷ÓÃ£¬¼´¿ÉĞ´ÊÂ¼şµÄ´¦ÀíÓÅÏÈÓÚ¿É¶ÁÊÂ¼ş£¨ÕâÕıÊÇNginx¸ßĞÔÄÜÉè¼ÆµÄÌåÏÖ£¬
ÓÅÏÈ´¦Àí¿ÉĞ´ÊÂ¼ş¿ÉÒÔ¾¡¿ìÊÍ·ÅÄÚ´æ£¬¾¡Á¿±£³Ö¸÷HTTPÄ£¿éÉÙÊ¹ÓÃÄÚ´æÒÔÌá¸ß²¢·¢ÄÜÁ¦£©¡£ÒòÎª·şÎñÆ÷·¢ËÍ¸ø¿Í»§¶ËµÄ±¨ÎÄ³¤¶ÈÒ»°ã±ÈÇëÇó±¨ÎÄ´óºÜ¶à
 */
   //µ±evÎªngx_connection_t->write Ä¬ÈÏwriteÎª1£»µ±evÎªngx_connection_t->read Ä¬ÈÏwriteÎª0
    if (ev->write) { //ËµÃ÷evÊÇngx_connection_t->write
        r->write_event_handler(r); //ngx_http_core_run_phases

    } else {//ËµÃ÷evÊÇngx_connection_t->readÊÂ¼ş 
        r->read_event_handler(r);
    }

/*
HTTP¿ò¼ÜÎŞÂÛÊÇµ÷ÓÃngx_http_process_request·½·¨£¨Ê×´Î´ÓÒµÎñÉÏ´¦ÀíÇëÇó£©»¹ÊÇngx_http_request_handler·½·¨£¨TCPÁ¬½ÓÉÏºóĞøµÄÊÂ¼ş´¥·¢Ê±£©´¦Àí
ÇëÇó£¬×îºó¶¼ÓĞÒ»¸ö²½Öè£¬¾ÍÊÇµ÷ÓÃngx_http_run_posted_requests·½·¨´¦ÀípostÇëÇó
*/
/* ngx_http_process_requestºÍngx_http_request_handlerÕâÁ½¸ö·½·¨µÄ¹²Í¨Ö®´¦ÔÚÓÚ£¬ËüÃÇ¶¼»áÏÈ°´½×¶Îµ÷ÓÃ¸÷¸öHTTPÄ£¿é´¦ÀíÇëÇó£¬ÔÙ´¦ÀípostÇëÇó */
    ngx_http_run_posted_requests(c);
}



/*
    ºÃÁË£¬×ÓÇëÇó´´½¨Íê±Ï£¬Ò»°ãÀ´Ëµ×ÓÇëÇóµÄ´´½¨¶¼·¢ÉúÔÚÄ³¸öÇëÇóµÄcontent handler»òÕßÄ³¸öfilterÄÚ£¬´ÓÉÏÃæµÄº¯Êı¿ÉÒÔ¿´µ½×ÓÇëÇó²¢Ã»ÓĞÂíÉÏ±»Ö´ĞĞ£¬
Ö»ÊÇ±»¹ÒÔØÔÚÁËÖ÷ÇëÇóµÄposted_requestsÁ´±íÖĞ£¬ÄÇËüÊ²Ã´Ê±ºò¿ÉÒÔÖ´ĞĞÄØ£¿Ö®Ç°Ëµµ½posted_requestsÁ´±íÊÇÔÚngx_http_run_posted_requestsº¯ÊıÖĞ
±éÀú£¬ÄÇÃ´ngx_http_run_posted_requestsº¯ÊıÓÖÊÇÔÚÊ²Ã´Ê±ºòµ÷ÓÃ£¿ËüÊµ¼ÊÉÏÊÇÔÚÄ³¸öÇëÇóµÄ¶Á£¨Ğ´£©ÊÂ¼şµÄhandlerÖĞ£¬Ö´ĞĞÍê¸ÃÇëÇóÏà¹ØµÄ´¦Àíºó
±»µ÷ÓÃ£¬±ÈÈçÖ÷ÇëÇóÔÚ×ßÍêÒ»±éPHASEµÄÊ±ºò»áµ÷ÓÃngx_http_run_posted_requests£¬ÕâÊ±×ÓÇëÇóµÃÒÔÔËĞĞ¡£

    ÕâÊ±Êµ¼Ê»¹ÓĞ1¸öÎÊÌâĞèÒª½â¾ö£¬ÓÉÓÚnginxÊÇ¶à½ø³Ì£¬ÊÇ²»ÄÜ¹»ËæÒâ×èÈûµÄ£¨Èç¹ûÒ»¸öÇëÇó×èÈûÁËµ±Ç°½ø³Ì£¬¾ÍÏàµ±ÓÚ×èÈûÁËÕâ¸ö½ø³Ìacceptµ½µÄËùÓĞ
ÆäËûÇëÇó£¬Í¬Ê±¸Ã½ø³ÌÒ²²»ÄÜacceptĞÂÇëÇó£©£¬Ò»¸öÇëÇó¿ÉÄÜÓÉÓÚÄ³Ğ©Ô­ÒòĞèÒª×èÈû£¨±ÈÈç·ÃÎÊio£©£¬nginxµÄ×ö·¨ÊÇÉèÖÃ¸ÃÇëÇóµÄÒ»Ğ©×´Ì¬²¢ÔÚepoll
ÖĞÌí¼ÓÏàÓ¦µÄÊÂ¼ş£¬È»ºó×ªÈ¥´¦ÀíÆäËûÇëÇó£¬µÈµ½¸ÃÊÂ¼şµ½À´Ê±ÔÙ¼ÌĞø´¦Àí¸ÃÇëÇó£¬ÕâÑùµÄĞĞÎª¾ÍÒâÎ¶×ÅÒ»¸öÇëÇó¿ÉÄÜĞèÒª¶à´ÎÖ´ĞĞ»ú»á²ÅÄÜÍê³É£¬¶Ô
ÓÚÒ»¸öÇëÇóµÄ¶à¸ö×ÓÇëÇóÀ´Ëµ£¬ÒâÎ¶×ÅËüÃÇÍê³ÉµÄÏÈºóË³Ğò¿ÉÄÜºÍËüÃÇ´´½¨µÄË³ĞòÊÇ²»Ò»ÑùµÄ£¬ËùÒÔ±ØĞëÓĞÒ»ÖÖ»úÖÆÈÃÌáÇ°Íê³ÉµÄ×ÓÇëÇó±£´æËü²úÉúµÄ
Êı¾İ£¬¶ø²»ÊÇÖ±½ÓÊä³öµ½out chain£¬Í¬Ê±Ò²ÄÜ¹»ÈÃµ±Ç°ÄÜ¹»Íùout chainÊä³öÊı¾İµÄÇëÇó¼°Ê±µÄÊä³ö²úÉúµÄÊı¾İ¡£×÷ÕßIgor²ÉÓÃngx_connection_tÖĞµÄ
data×Ö¶Î£¬ÒÔ¼°Ò»¸öbody filter£¬¼´ngx_http_postpone_filter£¬»¹ÓĞngx_http_finalize_requestº¯ÊıÖĞµÄÒ»Ğ©Âß¼­À´½â¾öÕâ¸öÎÊÌâ¡£

²Î¿¼:http://blog.csdn.net/fengmo_q/article/details/6685840




ËµÃ÷:
root_rÎªÔ­Ê¼×îÉÏ²ãµÄÇëÇór£¬postponedÎª¸Ãr->postponedÖ¸Õë£¬
sbuxy_rÖĞµÄx´ú±íµÄÊÇ¸Ã×ÓÇëÇóµÄ¸¸ÇëÇóÊ±x£¬y´ú±í¸Ã×ÓÇëÇóÊ±¸¸ÇëÇóµÄµÚy¸ö×ÓÇëÇó¡£
datax´ú±ísubx_rÇëÇó²úÉúµÄÒ»¶ÎÊı¾İ,ËüÊÇÍ¨¹ıngx_http_postpone_filter_addÌí¼Óµ½r->postponedÁ´ÖĞ

                          -----root_r     
                          |postponed
                          |
            -------------sub1_r-------sub2_r-------data_root(ÊôÓÚroot_rÊı¾İ)
            |                           |postponed                    
            |postponed                  |
            |                           sub21_r-----data2(ÊôÓÚsub2_rÊı¾İ)
            |                           |
            |                           |
            |                           -----data2(ÊôÓÚsub21_rÊı¾İ)
            |
          sub11_r--------sub12_r-----data1(ÊôÓÚsub1_rÊı¾İ)
            |               |
            |postponed      |postponed
            |               |
            -----data11     -----data12(ÊôÓÚsub12_rÊı¾İ)


    Í¼ÖĞµÄroot½Úµã¼´ÎªÖ÷ÇëÇó£¬ËüµÄpostponedÁ´±í´Ó×óÖÁÓÒ¹ÒÔØÁË3¸ö½Úµã£¬SUB1ÊÇËüµÄµÚÒ»¸ö×ÓÇëÇó£¬DATA1ÊÇËü²úÉúµÄÒ»¶ÎÊı¾İ£¬SUB2ÊÇËüµÄµÚ2¸ö×ÓÇëÇó£¬
¶øÇÒÕâ2¸ö×ÓÇëÇó·Ö±ğÓĞËüÃÇ×Ô¼ºµÄ×ÓÇëÇó¼°Êı¾İ¡£ngx_connection_tÖĞµÄdata×Ö¶Î±£´æµÄÊÇµ±Ç°¿ÉÒÔÍùout chain·¢ËÍÊı¾İµÄÇëÇó£¬ÎÄÕÂ¿ªÍ·Ëµµ½·¢µ½¿Í»§¶Ë
µÄÊı¾İ±ØĞë°´ÕÕ×ÓÇëÇó´´½¨µÄË³Ğò·¢ËÍ£¬ÕâÀï¼´ÊÇ°´ºóĞø±éÀúµÄ·½·¨£¨SUB11->DATA11->SUB12->DATA12->(SUB1)->DATA1->SUB21->SUB22->(SUB2)->(ROOT)£©£¬
ÉÏÍ¼ÖĞµ±Ç°ÄÜ¹»Íù¿Í»§¶Ë£¨out chain£©·¢ËÍÊı¾İµÄÇëÇóÏÔÈ»¾ÍÊÇSUB11£¬Èç¹ûSUB12ÌáÇ°Ö´ĞĞÍê³É£¬²¢²úÉúÊı¾İDATA121£¬Ö»ÒªÇ°ÃæËü»¹ÓĞ½ÚµãÎ´·¢ËÍÍê±Ï£¬
DATA121Ö»ÄÜÏÈ¹ÒÔØÔÚSUB12µÄpostponedÁ´±íÏÂ¡£ÕâÀï»¹Òª×¢ÒâÒ»ÏÂµÄÊÇc->dataµÄÉèÖÃ£¬µ±SUB11Ö´ĞĞÍê²¢ÇÒ·¢ËÍÍêÊı¾İÖ®ºó£¬ÏÂÒ»¸ö½«Òª·¢ËÍµÄ½ÚµãÓ¦¸ÃÊÇ
DATA11£¬µ«ÊÇ¸Ã½ÚµãÊµ¼ÊÉÏ±£´æµÄÊÇÊı¾İ£¬¶ø²»ÊÇ×ÓÇëÇó£¬ËùÒÔc->dataÕâÊ±Ó¦¸ÃÖ¸ÏòµÄÊÇÓµÓĞ¸ÄÊı¾İ½ÚµãµÄSUB1ÇëÇó¡£

·¢ËÍÊı¾İµ½¿Í»§¶ËÓÅÏÈ¼¶:
1.×ÓÇëÇóÓÅÏÈ¼¶±È¸¸ÇëÇó¸ß
2.Í¬¼¶(Ò»¸ör²úÉú¶à¸ö×ÓÇëÇó)ÇëÇó£¬´Ó×óµ½ÓÒÓÅÏÈ¼¶ÓÉ¸ßµ½µÍ(ÒòÎªÏÈ´´½¨µÄ×ÓÇëÇóÏÈ·¢ËÍÊı¾İµ½¿Í»§¶Ë)
·¢ËÍÊı¾İµ½¿Í»§¶ËË³Ğò¿ØÖÆ¼ûngx_http_postpone_filter

*/

//subrequest×¢Òângx_http_run_posted_requestsÓëngx_http_subrequest ngx_http_postpone_filter ngx_http_finalize_requestÅäºÏÔÄ¶Á

/*
HTTP¿ò¼ÜÎŞÂÛÊÇµ÷ÓÃngx_http_process_request·½·¨£¨Ê×´Î´ÓÒµÎñÉÏ´¦ÀíÇëÇó£©»¹ÊÇngx_http_request_handler·½·¨£¨TCPÁ¬½ÓÉÏºóĞøµÄÊÂ¼ş´¥·¢Ê±£©´¦Àí
ÇëÇó£¬×îºó¶¼ÓĞÒ»¸ö²½Öè£¬¾ÍÊÇµ÷ÓÃngx_http_run_posted_requests·½·¨´¦ÀípostÇëÇó

ngx_http_run_posted_requestsº¯ÊıÓÖÊÇÔÚÊ²Ã´Ê±ºòµ÷ÓÃ£¿ËüÊµ¼ÊÉÏÊÇÔÚÄ³¸öÇëÇóµÄ¶Á£¨Ğ´£©ÊÂ¼şµÄhandlerÖĞ£¬Ö´ĞĞÍê¸ÃÇëÇóÏà¹ØµÄ´¦Àíºó±»µ÷ÓÃ£¬
±ÈÈçÖ÷ÇëÇóÔÚ×ßÍêÒ»±éPHASEµÄÊ±ºò»áµ÷ÓÃngx_http_run_posted_requests£¬ÕâÊ±×ÓÇëÇóµÃÒÔÔËĞĞ¡£
*/

void //ngx_http_run_posted_requestsº¯ÊıÊÇ´¦Àí×ÓÇëÇóµÄ¡£ //ngx_http_post_request½«¸Ã×ÓÇëÇó¹ÒÔØÔÚÖ÷ÇëÇóµÄposted_requestsÁ´±í¶ÓÎ²£¬ÔÚngx_http_run_posted_requestsÖĞÖ´ĞĞ
ngx_http_run_posted_requests(ngx_connection_t *c) //Ö´ĞĞr->main->posted_requestsÁ´±íÖĞËùÓĞ½ÚµãµÄ->write_event_handler()
{ //subrequest×¢Òângx_http_run_posted_requestsÓëngx_http_postpone_filter ngx_http_finalize_requestÅäºÏÔÄ¶Á
    ngx_http_request_t         *r;
    ngx_http_posted_request_t  *pr;

    //Èç¹ûÓÅÏÈ¼¶µÍµÄ×ÓÇëÇóµÄÊı¾İÏßµ½´ï£¬ÔòÏÈÍ¨¹ıngx_http_postpone_filter->ngx_http_postpone_filter_add»º´æµ½r->postpone£¬
    //È»ºórÌí¼Óµ½pr->request->posted_requests,×îºóÔÚ¸ßÓÅÏÈ¼¶ÇëÇóºó¶ËÊı¾İµ½À´ºó£¬»á°ÑÖ®Ç°»º´æÆğÀ´µÄµÍÓÅÏÈ¼¶ÇëÇóµÄÊı¾İÒ²Ò»
    //ÆğÔÚngx_http_run_posted_requestsÖĞ´¥·¢·¢ËÍ£¬´Ó¶ø±£Ö¤ÕæÕı·¢ËÍµ½¿Í»§¶ËÊı¾İÊ±°´ÕÕ×ÓÇëÇóÓÅÏÈ¼¶Ë³Ğò·¢ËÍµÄ
    for ( ;; ) {

        /* Ê×ÏÈ¼ì²éÁ¬½ÓÊÇ·ñÒÑÏú»Ù£¬Èç¹ûÁ¬½Ó±»Ïú»Ù£¬¾Í½áÊøngx_http_run_posted_requests·½·¨ */
        if (c->destroyed) {
            return;
        }

        r = c->data;
        pr = r->main->posted_requests;

        /*
        ¸ù¾İngx_http_request_t½á¹¹ÌåÖĞµÄmain³ÉÔ±ÕÒµ½Ô­Ê¼ÇëÇó£¬Õâ¸öÔ­Ê¼ÇëÇóµÄposted_requests³ÉÔ±Ö¸Ïò´ı´¦ÀíµÄpostÇëÇó×é³ÉµÄµ¥Á´±í£¬
        Èç¹ûposted_requestsÖ¸ÏòNULL¿ÕÖ¸Õë£¬Ôò½áÊøngx_http_run_posted_requests·½·¨£¬·ñÔòÈ¡³öÁ´±íÖĞÊ×¸öÖ¸ÏòpostÇëÇóµÄÖ¸Õë
          */
        if (pr == NULL) { //ÎªNULLËµÃ÷Ã»ÓĞ×ÓÇëÇó
            return;
        }

       /*
        ½«Ô­Ê¼ÇëÇóµÄposted_requestsÖ¸ÕëÖ¸ÏòÁ´±íÖĞÏÂÒ»¸öpostÇëÇó£¨Í¨¹ıµÚ1¸öpostÇëÇóµÄnextÖ¸Õë¿ÉÒÔ»ñµÃ£©£¬µ±È»£¬ÏÂÒ»¸öpostÇëÇóÓĞ¿ÉÄÜ²»´æÔÚ£¬
        ÕâÔÚÏÂÒ»´ÎÑ­»·ÖĞ¾Í»á¼ì²âµ½¡£
        */
        r->main->posted_requests = pr->next;

        r = pr->request;

        ngx_http_set_log_request(c->log, r);

        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c->log, 0,
                       "http posted request: \"%V?%V\"", &r->uri, &r->args);

        /*
          µ÷ÓÃÕâ¸öpostÇëÇóngx_http_request_t½á¹¹ÌåÖĞµÄwrite event handler·½·¨¡£ÎªÊ²Ã´²»ÊÇÖ´ĞĞread_ event_ handler·½·¨ÄØ£¿Ô­Òò
          ºÜ¼òµ¥£¬×ÓÇëÇó²»ÊÇ±»ÍøÂçÊÂ¼şÇı¶¯µÄ£¬Òò´Ë£¬Ö´ĞĞpostÇëÇóÊ±¾ÍÏàµ±ÓÚÓĞ¿ÉĞ´ÊÂ¼ş£¬ÓÉNginxÖ÷¶¯×ö³ö¶¯×÷¡£
          */ //Ò»°ã×ÓÇëÇóµÄwrite_event_handlerÔÚngx_http_set_write_handlerÖĞÉèÖÃÎªngx_http_writer
        r->write_event_handler(r);   /* ±éÀú¸Ã½Úµã£¨ÇëÇó£© */ 
    }
}

//°ÑprÌí¼Óµ½r->main->posted_requestsÎ²²¿
ngx_int_t //ngx_http_post_request½«¸Ã×ÓÇëÇó¹ÒÔØÔÚÖ÷ÇëÇóµÄposted_requestsÁ´±í¶ÓÎ²£¬ÔÚngx_http_run_posted_requestsÖĞÖ´ĞĞ
ngx_http_post_request(ngx_http_request_t *r, ngx_http_posted_request_t *pr)
{ //×¢ÒâÊÇ°ÑĞÂ´´½¨µÄngx_http_posted_request_tÌí¼Óµ½×îÉÏ²ãrµÄposted_requestsÖĞ(ÀıÈçÏÖÔÚÊÇµÚËÄ²ãr£¬Ôò×îÉÏ²ãÊÇµÚÒ»´Îr£¬¶ø²»ÊÇµÚÈı²ãr)
    ngx_http_posted_request_t  **p;

    if (pr == NULL) {
        pr = ngx_palloc(r->pool, sizeof(ngx_http_posted_request_t));
        if (pr == NULL) {
            return NGX_ERROR;
        }
    }

    pr->request = r;
    pr->next = NULL;

    for (p = &r->main->posted_requests; *p; p = &(*p)->next) { /* void */ }

    *p = pr;

    return NGX_OK;
}


/*
    ¶ÔÓÚÊÂ¼şÇı¶¯µÄ¼Ü¹¹À´Ëµ£¬½áÊøÇëÇóÊÇÒ»Ïî¸´ÔÓµÄ¹¤×÷¡£ÒòÎªÒ»¸öÇëÇó¿ÉÄÜ»á±»Ğí¶à¸öÊÂ¼ş´¥·¢£¬ÕâÊ¹µÃNginx¿ò¼Üµ÷¶Èµ½Ä³¸öÇëÇóµÄ»Øµ÷·½·¨
Ê±£¬ÔÚµ±Ç°ÒµÎñÄÚËÆºõĞèÒª½áÊøHTTPÇëÇó£¬µ«Èç¹ûÕæµÄ½áÊøÁËÇëÇó£¬Ïú»ÙÁËÓëÇëÇóÏà¹ØµÄÄÚ´æ£¬¶à°ë»áÔì³ÉÖØ´ó´íÎó£¬ÒòÎªÕâ¸öÇëÇó¿ÉÄÜ»¹ÓĞÆä
ËûÊÂ¼şÔÚ¶¨Ê±Æ÷»òÕßepollÖĞ¡£µ±ÕâĞ©ÊÂ¼ş±»»Øµ÷Ê±£¬ÇëÇóÈ´ÒÑ¾­²»´æÔÚÁË£¬Õâ¾ÍÊÇÑÏÖØµÄÄÚ´æ·ÃÎÊÔ½½ç´íÎó£¡Èç¹û³¢ÊÔÔÚÊôÓÚÄ³¸öHTTPÄ£¿éµÄ
»Øµ÷·½·¨ÖĞÊÔÍ¼½áÊøÇëÇó£¬ÏÈÒª°ÑÕâ¸öÇëÇóÏà¹ØµÄËùÓĞÊÂ¼ş£¨ÓĞĞ©ÊÂ¼ş¿ÉÄÜÊôÓÚÆäËûHTTPÄ£¿é£©¶¼´Ó¶¨Ê±Æ÷ºÍepollÖĞÈ¡³ö²¢µ÷ÓÃÆähandler·½·¨£¬
ÕâÓÖÌ«¸´ÔÓÁË£¬ÁíÍâ£¬²»Í¬HTTPÄ£¿éÉÏµÄ´úÂëñîºÏÌ«½ôÃÜ½«»áÄÑÒÔÎ¬»¤¡£
    ÄÇHTTP¿ò¼ÜÓÖÊÇÔõÑù½â¾öÕâ¸öÎÊÌâµÄÄØ£¿HTTP¿ò¼Ü°ÑÒ»¸öÇëÇó·ÖÎª¶àÖÖ¶¯×÷£¬Èç¹ûHTTP¿ò¼ÜÌá¹©µÄ·½·¨»áµ¼ÖÂNginxÔÙ´Îµ÷¶Èµ½ÇëÇó£¨ÀıÈç£¬
ÔÚÕâ¸ö·½·¨ÖĞ²úÉúÁËĞÂµÄÊÂ¼ş£¬»òÕßÖØĞÂ½«ÒÑÓĞÊÂ¼şÌí¼Óµ½epoll»òÕß¶¨Ê±Æ÷ÖĞ£©£¬ÄÇÃ´¿ÉÒÔÈÏÎªÕâÒ»²½µ÷ÓÃÊÇÒ»ÖÖ¶ÀÁ¢µÄ¶¯×÷¡£ÀıÈç£¬½ÓÊÕHTTP
ÇëÇóµÄ°üÌå¡¢µ÷ÓÃupstream»úÖÆÌá¹©µÄ·½·¨·ÃÎÊµÚÈı·½·şÎñ¡¢ÅÉÉú³ösubrequest×ÓÇëÇóµÈ¡£ÕâĞ©ËùÎ½¶ÀÁ¢µÄ¶¯×÷£¬¶¼ÊÇÔÚ¸æËßNginx£¬Èç¹û»ú»áºÏ
ÊÊ¾ÍÔÙ´Îµ÷ÓÃËüÃÇ´¦ÀíÇëÇó£¬ÒòÎªÕâ¸ö¶¯×÷²¢²»ÊÇNginxµ÷ÓÃÒ»´ÎËüÃÇµÄ·½·¨¾Í¿ÉÒÔ´¦ÀíÍê±ÏµÄ¡£Òò´Ë£¬Ã¿Ò»ÖÖ¶¯×÷¶ÔÓÚÕû¸öÇëÇóÀ´Ëµ¶¼ÊÇ¶ÀÁ¢µÄ£¬
HTTP¿ò¼ÜÏ£ÍûÃ¿¸ö¶¯×÷½áÊøÊ±½öÎ¬»¤×Ô¼ºµÄÒµÎñ£¬²»ÓÃÈ¥¹ØĞÄÕâ¸öÇëÇóÊÇ·ñ»¹×öÁËÆäËû¶¯×÷¡£ÕâÖÖÉè¼Æ´ó´ó½µµÍÁË¸´ÔÓ¶È¡£
    ÕâÖÖÉè¼Æ¾ßÌåÓÖÊÇÔõÃ´ÊµÏÖµÄÄØ£¿Ã¿¸öHTTPÇëÇó¶¼ÓĞÒ»¸öÒıÓÃ¼ÆÊı£¬Ã¿ÅÉÉú³öÒ»ÖÖĞÂµÄ»á¶ÀÁ¢ÏòÊÂ¼şÊÕ¼¯Æ÷×¢²áÊÂ¼şµÄ¶¯×÷Ê±£¨Èçngx_http_
read_ client_request_body·½·¨»òÕßngx_http_subrequest·½·¨£©£¬¶¼»á°ÑÒıÓÃ¼ÆÊı¼Ó1£¬ÕâÑùÃ¿¸ö¶¯×÷½áÊøÊ±¶¼Í¨¹ıµ÷ÓÃngx_http_finalize_request·½·¨
À´½áÊøÇëÇó£¬¶øngx_http_finalize_request·½·¨Êµ¼ÊÉÏÈ´»áÔÚÒıÓÃ¼ÆÊı¼õ1ºóÏÈ¼ì²éÒıÓÃ¼ÆÊıµÄÖµ£¬Èç¹û²»ÎªOÊÇ²»»áÕæÕıÏú»ÙÇëÇóµÄ¡£
*/ //ngx_http_finalize_request -> ngx_http_finalize_connection ,×¢ÒâºÍngx_http_terminate_requestµÄÇø±ğ
void
ngx_http_finalize_request(ngx_http_request_t *r, ngx_int_t rc) 
{//subrequest×¢Òângx_http_run_posted_requestsÓëngx_http_postpone_filter ngx_http_finalize_requestÅäºÏÔÄ¶Á
    ngx_connection_t          *c;
    ngx_http_request_t        *pr;
    ngx_http_core_loc_conf_t  *clcf;

    c = r->connection;

    ngx_log_debug5(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   "http finalize request rc: %d, \"%V?%V\" a:%d, c:%d",
                   rc, &r->uri, &r->args, r == c->data, r->main->count);

    /*
    NGX_DONE²ÎÊı±íÊ¾²»ĞèÒª×öÈÎºÎÊÂ£¬Ö±½Óµ÷ÓÃngx_http_finalize_connection·½·¨£¬Ö®ºóngx_http_finalize_request·½·¨½áÊø¡£µ±Ä³Ò»ÖÖ¶¯×÷
£¨Èç½ÓÊÕHTTPÇëÇó°üÌå£©Õı³£½áÊø¶øÇëÇó»¹ÓĞÒµÎñÒª¼ÌĞø´¦ÀíÊ±£¬¶à°ë¶¼ÊÇ´«µİNGX_DONE²ÎÊı¡£Õâ¸öngx_http_finalize_connection·½·¨»¹»áÈ¥¼ì
²éÒıÓÃ¼ÆÊıÇé¿ö£¬²¢²»Ò»¶¨»áÏú»ÙÇëÇó¡£
     */
    if (rc == NGX_DONE) {
        ngx_http_finalize_connection(r);  
        return;
    }

    if (rc == NGX_OK && r->filter_finalize) {
        c->error = 1;
    }

    /*
   NGX_DECLINED²ÎÊı±íÊ¾ÇëÇó»¹ĞèÒª°´ÕÕ11¸öHTTP½×¶Î¼ÌĞø´¦ÀíÏÂÈ¥£¬ÕâÊ±ĞèÒª¼ÌĞøµ÷ÓÃngx_http_core_run_phases·½·¨´¦ÀíÇëÇó¡£Õâ
Ò»²½ÖĞÊ×ÏÈ»á°Ñngx_http_request_t½á¹¹ÌåµÄwrite¡ªevent handlerÉèÎªngx_http_core_run_phases·½·¨¡£Í¬Ê±£¬½«ÇëÇóµÄcontent_handler³ÉÔ±
ÖÃÎªNULL¿ÕÖ¸Õë£¬ËüÊÇÒ»ÖÖÓÃÓÚÔÚNGX_HTTP_CONTENT_PHASE½×¶Î´¦ÀíÇëÇóµÄ·½Ê½£¬½«ÆäÉèÖÃÎªNULL×ãÎªÁËÈÃngx_http_core_content_phase·½·¨
¿ÉÒÔ¼ÌĞøµ÷ÓÃNGX_HTTP_CONTENT_PHASE½×¶ÎµÄÆäËû´¦Àí·½·¨¡£
     */
    if (rc == NGX_DECLINED) {
        r->content_handler = NULL;
        r->write_event_handler = ngx_http_core_run_phases;
        ngx_http_core_run_phases(r);
        return;
    }

    /*
    ¼ì²éµ±Ç°ÇëÇóÊÇ·ñÎªsubrequest×ÓÇëÇó£¬Èç¹ûÊÇ×ÓÇëÇó£¬ÄÇÃ´µ÷ÓÃpost_subrequestÏÂµÄhandler»Øµ÷·½·¨¡£subrequestµÄÓÃ·¨£¬¿ÉÒÔ¿´
    µ½post_subrequestÕıÊÇ´ËÊ±±»µ÷ÓÃµÄ¡£
     */  /* Èç¹ûµ±Ç°ÇëÇóÊÇÒ»¸ö×ÓÇëÇó£¬¼ì²éËüÊÇ·ñÓĞ»Øµ÷handler£¬ÓĞµÄ»°Ö´ĞĞÖ® */  
    if (r != r->main && r->post_subrequest) {//Èç¹ûµ±Ç°ÇëÇóÊôÓÚÄ³¸öÔ­Ê¼ÇëÇóµÄ×ÓÇëÇó
        rc = r->post_subrequest->handler(r, r->post_subrequest->data, rc); //r±äÁ¿ÊÇ×ÓÇëÇó£¨²»ÊÇ¸¸ÇëÇó£©
    }

    if (rc == NGX_ERROR
        || rc == NGX_HTTP_REQUEST_TIME_OUT
        || rc == NGX_HTTP_CLIENT_CLOSED_REQUEST
        || c->error)
    {
        //Ö±½Óµ÷ÓÃngx_http_terminate_request·½·¨Ç¿ÖÆ½áÊøÇëÇó£¬Í¬Ê±£¬ngx_http_finalize_request·½·¨½áÊø¡£
        if (ngx_http_post_action(r) == NGX_OK) {
            return;
        }

        if (r->main->blocked) {
            r->write_event_handler = ngx_http_request_finalizer;
        }

        ngx_http_terminate_request(r, rc);
        return;
    }

    /*
    Èç¹ûrcÎªNGX_HTTP_NO_CONTENT¡¢NGX_HTTP_CREATED»òÕß´óÓÚ»òµÈÓÚNGX_HTTP_SPECIAL_RESPONSE£¬Ôò±íÊ¾ÇëÇóµÄ¶¯×÷ÊÇÉÏ´«ÎÄ¼ş£¬
    »òÕßHTTPÄ£¿éĞèÒªHTTP¿ò¼Ü¹¹Ôì²¢·¢ËÍÏìÓ¦Âë´óÓÚ»òµÈÓÚ300ÒÔÉÏµÄÌØÊâÏìÓ¦
     */
    if (rc >= NGX_HTTP_SPECIAL_RESPONSE
        || rc == NGX_HTTP_CREATED
        || rc == NGX_HTTP_NO_CONTENT)
    {
        if (rc == NGX_HTTP_CLOSE) {
            ngx_http_terminate_request(r, rc);
            return;
        }

        /*
            ¼ì²éµ±Ç°ÇëÇóµÄmainÊÇ·ñÖ¸Ïò×Ô¼º£¬Èç¹ûÊÇ£¬Õâ¸öÇëÇó¾ÍÊÇÀ´×Ô¿Í»§¶ËµÄÔ­Ê¼ÇëÇó£¨·Ç×ÓÇëÇó£©£¬ÕâÊ±¼ì²é¶Á/Ğ´ÊÂ¼şµÄtimer_set±êÖ¾Î»£¬
            Èç¹ûtimer_setÎª1£¬Ôò±íÃ÷ÊÂ¼şÔÚ¶¨Ê±Æ÷Éê£¬ĞèÒªµ÷ÓÃngx_del_timer·½·¨°Ñ¶Á/Ğ´ÊÂ¼ş´Ó¶¨Ê±Æ÷ÖĞÒÆ³ı¡£
          */
        if (r == r->main) {
            if (c->read->timer_set) {
                ngx_del_timer(c->read, NGX_FUNC_LINE);
            }

            if (c->write->timer_set) {
                ngx_del_timer(c->write, NGX_FUNC_LINE);
            }
        }

        /* ÉèÖÃ¶Á£¯Ğ´ÊÂ¼şµÄ»Øµ÷·½·¨Îªngx_http_request_handler·½·¨£¬Õâ¸ö·½·¨£¬Ëü»á¼ÌĞø´¦ÀíHTTPÇëÇó¡£ */
        c->read->handler = ngx_http_request_handler;
        c->write->handler = ngx_http_request_handler;

    /*
      µ÷ÓÃngx_http_special_response_handler·½·¨£¬¸Ã·½·¨¸ºÔğ¸ù¾İrc²ÎÊı¹¹ÔìÍêÕûµÄHTTPÏìÓ¦¡£ÎªÊ²Ã´¿ÉÒÔÔÚÕâÒ»²½ÖĞ¹¹ÔìÕâÑùµÄÏìÓ¦ÄØ£¿
      ÕâÊ±rcÒªÃ´ÊÇ±íÊ¾ÉÏ´«³É¹¦µÄ201»òÕß204£¬ÒªÃ´¾ÍÊÇ±íÊ¾Òì²½µÄ300ÒÔÉÏµÄÏìÓ¦Âë£¬¶ÔÓÚÕâĞ©Çé¿ö£¬¶¼ÊÇ¿ÉÒÔÈÃHTTP¿ò¼Ü¶ÀÁ¢¹¹ÔìÏìÓ¦°üµÄ¡£
      */
        ngx_http_finalize_request(r, ngx_http_special_response_handler(r, rc));
        return;
    }

    if (r != r->main) { //×ÓÇëÇó
         /* ¸Ã×ÓÇëÇó»¹ÓĞÎ´´¦ÀíÍêµÄÊı¾İ»òÕß×ÓÇëÇó */  
        if (r->buffered || r->postponed) { //¼ì²éout»º³åÇøÄÚÊÇ·ñ»¹ÓĞÃ»·¢ËÍÍêµÄÏìÓ¦
             /* Ìí¼ÓÒ»¸ö¸Ã×ÓÇëÇóµÄĞ´ÊÂ¼ş£¬²¢ÉèÖÃºÏÊÊµÄwrite event hander£¬ 
               ÒÔ±ãÏÂ´ÎĞ´ÊÂ¼şÀ´µÄÊ±ºò¼ÌĞø´¦Àí£¬ÕâÀïÊµ¼ÊÉÏÏÂ´ÎÖ´ĞĞÊ±»áµ÷ÓÃngx_http_output_filterº¯Êı£¬ 
               ×îÖÕ»¹ÊÇ»á½øÈëngx_http_postpone_filter½øĞĞ´¦Àí£¬ÔÚ¸Ãº¯ÊıÖĞ²»Ò»¶¨»á°ÑÊı¾İ·¢ËÍ³öÈ¥£¬¶øÊÇ¹Ò½Óµ½postponeÁ´ÉÏ£¬µÈ¸ßÓÅÏÈ¼¶µÄ×ÓÇëÇóÏÈ·¢ËÍ */ 
            if (ngx_http_set_write_handler(r) != NGX_OK) { 
                ngx_http_terminate_request(r, 0);
            }

            return;
        }

        /*
            ÓÉÓÚµ±Ç°ÇëÇóÊÇ×ÓÇëÇó£¬ÄÇÃ´Õı³£Çé¿öÏÂĞèÒªÌøµ½ËüµÄ¸¸ÇëÇóÉÏ£¬¼¤»î¸¸ÇëÇó¼ÌĞøÏòÏÂÖ´ĞĞ£¬ËùÒÔÕâÒ»²½Ê×ÏÈ¸ù¾İngx_http_request_t½á
        ¹¹ÌåµÄparent³ÉÔ±ÕÒµ½¸¸ÇëÇó£¬ÔÙ¹¹ÔìÒ»¸öngx_http_posted_request_t½á¹¹Ìå°Ñ¸¸ÇëÇó·ÅÖÃÆäÖĞ£¬×îºó°Ñ¸Ã½á¹¹ÌåÌí¼Óµ½Ô­Ê¼ÇëÇóµÄ
        posted_requestsÁ´±íÖĞ£¬ÕâÑùngx_http_run_posted_requests·½·¨¾Í»áµ÷ÓÃ¸¸ÇëÇóµÄwrite_event_handler·½·¨ÁË¡£
          */

        /* ¸Ã×ÓÇëÇóÒÑ¾­´¦ÀíÍê±Ï£¬Èç¹ûËüÓµÓĞ·¢ËÍÊı¾İµÄÈ¨Àû£¬Ôò½«È¨ÀûÒÆ½»¸ø¸¸ÇëÇó£¬ */  
        pr = r->parent;

        /*
                          -----root_r     
                          |postponed
                          |
            -------------sub1_r-------sub2_r-------data_root(ÊôÓÚroot_rÊı¾İ)
            |                           |postponed                    
            |postponed                  |
            |                           sub21_r-----data2(ÊôÓÚsub2_rÊı¾İ)
            |                           |
            |                           |
            |                           -----data2(ÊôÓÚsub21_rÊı¾İ)
            |
          sub11_r--------sub12_r-----data1(ÊôÓÚsub1_rÊı¾İ)
            |               |
            |postponed      |postponed
            |               |
            -----data11     -----data12(ÊôÓÚsub12_rÊı¾İ)

          ÏÂÃæµÄifÅĞ¶ÏÖ»ÓĞrÎªsub11_r²ÅÂú×ãr == c->data£¬Èç¹ûµ±Ç°r²»ÊÇsub11_r£¬Ôò°Ñ
     */
        if (r == c->data) { 
        //Õâ¸öÓÅÏÈ¼¶×î¸ßµÄ×ÓÇëÇóÊı¾İ·¢ËÍÍê±ÏÁË£¬ÔòÖ±½Ó´Ópr->postponedÖĞÕª³ı£¬ÀıÈçÕâ´ÎÕª³ıµÄÊÇsub11_r£¬ÔòÏÂ¸öÓÅÏÈ¼¶×î¸ß·¢ËÍ¿Í»§¶ËÊı¾İµÄÊÇsub12_r

            r->main->count--;
            r->main->subrequests++;

            if (!r->logged) {

                clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

                if (clcf->log_subrequest) {
                    ngx_http_log_request(r);
                }

                r->logged = 1;

            } else {
                ngx_log_error(NGX_LOG_ALERT, c->log, 0,
                              "subrequest: \"%V?%V\" logged again",
                              &r->uri, &r->args);
            }

            r->done = 1;
             /* Èç¹û¸Ã×ÓÇëÇó²»ÊÇÌáÇ°Íê³É£¬Ôò´Ó¸¸ÇëÇóµÄpostponedÁ´±íÖĞÉ¾³ı */  
            if (pr->postponed && pr->postponed->request == r) {
                pr->postponed = pr->postponed->next;
            }

            /* ½«·¢ËÍÈ¨ÀûÒÆ½»¸ø¸¸ÇëÇó£¬¸¸ÇëÇóÏÂ´ÎÖ´ĞĞµÄÊ±ºò»á·¢ËÍËüµÄpostponedÁ´±íÖĞ¿ÉÒÔ 
               ·¢ËÍµÄÊı¾İ½Úµã£¬»òÕß½«·¢ËÍÈ¨ÀûÒÆ½»¸øËüµÄÏÂÒ»¸ö×ÓÇëÇó */ 
            c->data = pr;

        } else {

            ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c->log, 0,
                           "http finalize non-active request: \"%V?%V\"",
                           &r->uri, &r->args);
            /* µ½ÕâÀïÆäÊµ±íÃ÷¸Ã×ÓÇëÇóÌáÇ°Ö´ĞĞÍê³É£¬¶øÇÒËüÃ»ÓĞ²úÉúÈÎºÎÊı¾İ£¬ÔòËüÏÂ´ÎÔÙ´Î»ñµÃ 
               Ö´ĞĞ»ú»áÊ±£¬½«»áÖ´ĞĞngx_http_request_finalzierº¯Êı£¬ËüÊµ¼ÊÉÏÊÇÖ´ĞĞ 
               ngx_http_finalize_request£¨r,0£©£¬Ò²¾ÍÊÇÊ²Ã´¶¼²»¸É£¬Ö±µ½ÂÖµ½Ëü·¢ËÍÊı¾İÊ±£¬ 
               ngx_http_finalize_request º¯Êı»á½«Ëü´Ó¸¸ÇëÇóµÄpostponedÁ´±íÖĞÉ¾³ı */  
            r->write_event_handler = ngx_http_request_finalizer; //Ò²¾ÍÊÇÓÅÏÈ¼¶µÍµÄÇëÇó±ÈÓÅÏÈ¼¶¸ßµÄÇëÇóÏÈµÃµ½ºó¶Ë·µ»ØµÄÊı¾İ£¬

            if (r->waited) {
                r->done = 1;
            }
        }

         /* ½«¸¸ÇëÇó¼ÓÈëposted_request¶ÓÎ²£¬»ñµÃÒ»´ÎÔËĞĞ»ú»á */  
        if (ngx_http_post_request(pr, NULL) != NGX_OK) {
            r->main->count++;
            ngx_http_terminate_request(r, 0);
            return;
        }

        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c->log, 0,
                       "http wake parent request: \"%V?%V\"",
                       &pr->uri, &pr->args);

        return;
    }

    /* ÕâÀïÊÇ´¦ÀíÖ÷ÇëÇó½áÊøµÄÂß¼­£¬Èç¹ûÖ÷ÇëÇóÓĞÎ´·¢ËÍµÄÊı¾İ»òÕßÎ´´¦ÀíµÄ×ÓÇëÇó£¬ Ôò¸øÖ÷ÇëÇóÌí¼ÓĞ´ÊÂ¼ş£¬²¢ÉèÖÃºÏÊÊµÄwrite event hander£¬ 
       ÒÔ±ãÏÂ´ÎĞ´ÊÂ¼şÀ´µÄÊ±ºò¼ÌĞø´¦Àí */  
       
    //ngx_http_request_t->outÖĞ»¹ÓĞÎ´·¢ËÍµÄ°üÌå£¬
    //ngx_http_finalize_request->ngx_http_set_write_handler->ngx_http_writerÍ¨¹ıÕâÖÖ·½Ê½°ÑÎ´·¢ËÍÍê±ÏµÄÏìÓ¦±¨ÎÄ·¢ËÍ³öÈ¥
    if (r->buffered || c->buffered || r->postponed || r->blocked) { //ÀıÈç»¹ÓĞÎ´·¢ËÍµÄÊı¾İ£¬¼ûngx_http_copy_filter£¬Ôòbuffered²»Îª0

        if (ngx_http_set_write_handler(r) != NGX_OK) { 
            ngx_http_terminate_request(r, 0);
        }

        return;
    }

    if (r != c->data) {
        ngx_log_error(NGX_LOG_ALERT, c->log, 0,
                      "http finalize non-active request: \"%V?%V\"",
                      &r->uri, &r->args);
        return;
    }

    r->done = 1;
    r->write_event_handler = ngx_http_request_empty_handler;

    if (!r->post_action) {
        r->request_complete = 1;
    }

    if (ngx_http_post_action(r) == NGX_OK) {
        return;
    }

    /* µ½ÁËÕâÀïÕæµÄÒª½áÊøÇëÇóÁË¡£Ê×ÏÈÅĞ¶Ï¶Á£¯Ğ´ÊÂ¼şµÄtimer-set±êÖ¾Î»£¬Èç¹ûtimer-setÎª1£¬ÔòĞèÒª°ÑÏàÓ¦µÄ¶Á/Ğ´ÊÂ¼ş´Ó¶¨Ê±Æ÷ÖĞÒÆ³ı */

    if (c->read->timer_set) {
        ngx_del_timer(c->read, NGX_FUNC_LINE);
    }

    if (c->write->timer_set) {
        c->write->delayed = 0;
        //ÕâÀïµÄ¶¨Ê±Æ÷Ò»°ãÔÚngx_http_set_write_handler->ngx_add_timerÖĞÌí¼ÓµÄ
        ngx_del_timer(c->write, NGX_FUNC_LINE);
    }

    if (c->read->eof) {
        ngx_http_close_request(r, 0);
        return;
    }

    ngx_http_finalize_connection(r);
}

/*
ngx_http_terminate_request·½·¨ÊÇÌá¹©¸øHTTPÄ£¿éÊ¹ÓÃµÄ½áÊøÇëÇó·½·¨£¬µ«ËüÊôÓÚ·ÇÕı³£½áÊøµÄ³¡¾°£¬¿ÉÒÔÀí½âÎªÇ¿ÖÆ¹Ø±ÕÇëÇó¡£Ò²¾ÍÊÇËµ£¬
µ±µ÷ÓÃngx_http_terminate_request·½·¨½áÊøÇëÇóÊ±£¬Ëü»áÖ±½ÓÕÒ³ö¸ÃÇëÇóµÄmain³ÉÔ±Ö¸ÏòµÄÔ­Ê¼ÇëÇó£¬²¢Ö±½Ó½«¸ÃÔ­Ê¼ÇëÇóµÄÒıÓÃ¼ÆÊıÖÃÎª1£¬
Í¬Ê±»áµ÷ÓÃngx_http_close_request·½·¨È¥¹Ø±ÕÇëÇó
*/ //ngx_http_finalize_request -> ngx_http_finalize_connection ,×¢ÒâºÍngx_http_terminate_requestµÄÇø±ğ
static void
ngx_http_terminate_request(ngx_http_request_t *r, ngx_int_t rc)
{
    ngx_http_cleanup_t    *cln;
    ngx_http_request_t    *mr;
    ngx_http_ephemeral_t  *e;

    mr = r->main;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   "http terminate request count:%d", mr->count);

    if (rc > 0 && (mr->headers_out.status == 0 || mr->connection->sent == 0)) {
        mr->headers_out.status = rc;
    }

    cln = mr->cleanup;
    mr->cleanup = NULL;

    while (cln) {
        if (cln->handler) {
            cln->handler(cln->data);
        }

        cln = cln->next;
    }

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   "http terminate cleanup count:%d blk:%d",
                   mr->count, mr->blocked);

    if (mr->write_event_handler) {

        if (mr->blocked) {
            return;
        }

        e = ngx_http_ephemeral(mr);
        mr->posted_requests = NULL;
        mr->write_event_handler = ngx_http_terminate_handler;
        (void) ngx_http_post_request(mr, &e->terminal_posted_request);
        return;
    }

    ngx_http_close_request(mr, rc);
}


static void
ngx_http_terminate_handler(ngx_http_request_t *r)
{
    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   "http terminate handler count:%d", r->count);

    r->count = 1;

    ngx_http_close_request(r, 0);
}

/*
ngx_http_finalize_connection·½·¨ËäÈ»±Èngx_http_close_request·½·¨¸ßÁËÒ»¸ö²ã´Î£¬µ«HTTPÄ£¿éÒ»°ã»¹ÊÇ²»»áÖ±½Óµ÷ÓÃËü¡£
ngx_http_finalize_connection·½·¨ÔÚ½áÊøÇëÇóÊ±£¬½â¾öÁËkeepaliveÌØĞÔºÍ×ÓÇëÇóµÄÎÊÌâ   ngx_http_finalize_request -> ngx_http_finalize_connection ,×¢ÒâºÍngx_http_terminate_requestµÄÇø±ğ
*/ //¸Ãº¯ÊıÓÃÓÚÅĞ¶ÏÊÇÀí½â¹Ø±ÕÁ¬½Ó£¬»¹ÊÇÍ¨¹ı±£»î³¬Ê±¹Ø±ÕÁ¬½Ó£¬»¹ÊÇÑÓ³Ù¹Ø±ÕÁ¬½Ó
static void
ngx_http_finalize_connection(ngx_http_request_t *r) //ngx_http_finalize_request->ngx_http_finalize_connection
{
    ngx_http_core_loc_conf_t  *clcf;

#if (NGX_HTTP_SPDY)
    if (r->spdy_stream) {
        ngx_http_close_request(r, 0);
        return;
    }
#endif

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    /*
    ²é¿´Ô­Ê¼ÇëÇóµÄÒıÓÃ¼ÆÊı£®Èç¹û²»µÈÓÚ1£¬Ôò±íÊ¾»¹ÓĞ¶à¸ö¶¯×÷ÔÚ²Ù×÷×ÅÇëÇó£¬½Ó×Å¼ÌĞø¼ì²édiscard_body±êÖ¾Î»¡£Èç¹û
discard_bodyÎªl£¬Ôò±íÊ¾ÕıÔÚ¶ªÆú°üÌå£¬ÕâÊ±»áÔÙÒ»´Î°ÑÇëÇóµÄread_event_handler³ÉÔ±ÉèÎªngx_http_discarded_request_body_handler·½·¨£¬
     */
    if (r->main->count != 1) {

        if (r->discard_body) {
            r->read_event_handler = ngx_http_discarded_request_body_handler;
            //½«¶ÁÊÂ¼şÌí¼Óµ½¶¨Ê±Æ÷ÖĞ£¬ÆäÖĞ³¬Ê±Ê±¼äÊÇlingering_timeoutÅäÖÃÏî¡£
            ngx_add_timer(r->connection->read, clcf->lingering_timeout, NGX_FUNC_LINE);

            if (r->lingering_time == 0) {
                r->lingering_time = ngx_time()
                                      + (time_t) (clcf->lingering_time / 1000);
            }
        }

        ngx_http_close_request(r, 0);
        return;
    }

    if (r->reading_body) {
        r->keepalive = 0; //Ê¹ÓÃÑÓ³Ù¹Ø±ÕÁ¬½Ó¹¦ÄÜ£¬¾Í²»ĞèÒªÔÙÅĞ¶Ïkeepalive¹¦ÄÜ¹ØÁ¬½ÓÁË
        r->lingering_close = 1;
    }

    /*
    Èç¹ûÒıÓÃ¼ÆÊıÎª1£¬ÔòËµÃ÷ÕâÊ±ÒªÕæµÄ×¼±¸½áÊøÇëÇóÁË¡£²»¹ı£¬»¹Òª¼ì²éÇëÇóµÄkeepalive³ÉÔ±£¬Èç¹ûkeepaliveÎª1£¬ÔòËµÃ÷Õâ¸öÇëÇóĞèÒªÊÍ·Å£¬
µ«TCPÁ¬½Ó»¹ÊÇÒª¸´ÓÃµÄ£»Èç¹ûkeepaliveÎª0¾Í²»ĞèÒª¿¼ÂÇkeepaliveÇëÇóÁË£¬µ«»¹ĞèÒª¼ì²âÇëÇóµÄlingering_close³ÉÔ±£¬Èç¹ûlingering_closeÎª1£¬
ÔòËµÃ÷ĞèÒªÑÓ³Ù¹Ø±ÕÇëÇó£¬ÕâÊ±Ò²²»ÄÜÕæµÄÈ¥½áÊøÇëÇó£¬Èç¹ûlingering_closeÎª0£¬²ÅÕæµÄ½áÊøÇëÇó¡£
     */
    if (!ngx_terminate
         && !ngx_exiting
         && r->keepalive
         && clcf->keepalive_timeout > 0) 
         //Èç¹û¿Í»§¶ËÇëÇóĞ¯´øµÄ±¨ÎÄÍ·ÖĞÉèÖÃÁË³¤Á¬½Ó£¬²¢ÇÒÎÒÃÇµÄkeepalive_timeoutÅäÖÃÏî´óÓÚ0(Ä¬ÈÏ75s),Ôò²»ÄÜ¹Ø±ÕÁ¬½Ó£¬Ö»ÓĞµÈÕâ¸öÊ±¼äµ½ºó»¹Ã»ÓĞÊı¾İµ½À´£¬²Å¹Ø±ÕÁ¬½Ó
    {
        ngx_http_set_keepalive(r); 
        return;
    }

    if (clcf->lingering_close == NGX_HTTP_LINGERING_ALWAYS
        || (clcf->lingering_close == NGX_HTTP_LINGERING_ON
            && (r->lingering_close
                || r->header_in->pos < r->header_in->last
                || r->connection->read->ready)))
    {
       /*
        µ÷ÓÃngx_http_set_lingering_close·½·¨ÑÓ³Ù¹Ø±ÕÇëÇó¡£Êµ¼ÊÉÏ£¬Õâ¸ö·½·¨µÄÒâÒå¾ÍÔÚÓÚ°ÑÒ»Ğ©±ØĞë×öµÄÊÂÇé×öÍê
        £¨Èç½ÓÊÕÓÃ»§¶Ë·¢À´µÄ×Ö·ûÁ÷£©ÔÙ¹Ø±ÕÁ¬½Ó¡£
        */
        ngx_http_set_lingering_close(r);
        return;
    }

    ngx_http_close_request(r, 0);
}

//µ÷ÓÃngx_http_write_filterĞ´Êı¾İ£¬Èç¹û·µ»ØNGX_AGAIN,ÔòÒÔºóµÄĞ´Êı¾İ´¥·¢Í¨¹ıÔÚngx_http_set_write_handler->ngx_http_writerÌí¼Óepoll writeÊÂ¼şÀ´´¥·¢
static ngx_int_t
ngx_http_set_write_handler(ngx_http_request_t *r)
{
    ngx_event_t               *wev;
    ngx_http_core_loc_conf_t  *clcf;

    r->http_state = NGX_HTTP_WRITING_REQUEST_STATE;

    r->read_event_handler = r->discard_body ?
                                ngx_http_discarded_request_body_handler:
                                ngx_http_test_reading;
    r->write_event_handler = ngx_http_writer;

#if (NGX_HTTP_SPDY)
    if (r->spdy_stream) {
        return NGX_OK;
    }
#endif

    wev = r->connection->write;

    if (wev->ready && wev->delayed) {
        return NGX_OK;
    }

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
    if (!wev->delayed) { //±¾´Îngx_http_write_filterÃ»ÓĞ°ÑÊı¾İ·¢ËÍÍê±Ï£¬ÔòĞèÒªÌí¼ÓĞ´ÊÂ¼ş¶¨Ê±Æ÷
    /*
    ÒòÎª³¬Ê±µÄÔ­ÒòÖ´ĞĞÁË¸Ãwrite_event_handler(ÀıÈçÔÚÏò¿Í»§¶Ë·¢ËÍÊı¾İµÄ¹ı³ÌÖĞ£¬¿Í»§¶ËÒ»Ö±²»recv£¬¾Í»áÔì³ÉÄÚºË»º´æÇøÂú£¬
    Êı¾İÓÀÔ¶·¢ËÍ²»³öÈ¥£¬ÓÚÊÇ¾ÍÔÚngx_http_set_write_handlerÖĞÌí¼ÓÁËĞ´ÊÂ¼ş¶¨Ê±Æ÷)£¬´Ó¶ø¿ÉÒÔ¼ì²éÊÇ·ñĞ´³¬Ê±£¬´Ó¶ø¿ÉÒÔ¹Ø±ÕÁ¬½Ó
     */

     /*
        µ±Êı¾İÈ«²¿·¢ËÍµ½¿Í»§¶Ëºó£¬ÔÚngx_http_finalize_requestÖĞÉ¾³ı
        if (c->write->timer_set) {
            c->write->delayed = 0;
            //ÕâÀïµÄ¶¨Ê±Æ÷Ò»°ãÔÚngx_http_set_write_handler->ngx_add_timerÖĞÌí¼ÓµÄ
            ngx_del_timer(c->write, NGX_FUNC_LINE);
        }
       */
        ngx_add_timer(wev, clcf->send_timeout, NGX_FUNC_LINE);
    }

    if (ngx_handle_write_event(wev, clcf->send_lowat, NGX_FUNC_LINE) != NGX_OK) {
        ngx_http_close_request(r, 0);
        return NGX_ERROR;
    }

    return NGX_OK;
}

//ngx_http_finalize_request->ngx_http_set_write_handler->ngx_http_writerÍ¨¹ıÕâÖÖ·½Ê½°ÑÎ´·¢ËÍÍê±ÏµÄÏìÓ¦±¨ÎÄ·¢ËÍ³öÈ¥
/*
ngx_http_writer·½·¨¶Ô¸÷¸öHTTPÄ£¿é¶øÑÔÊÇ²»¿É¼ûµÄ£¬µ«Êµ¼ÊÉÏËü·Ç³£ÖØÒª£¬ÒòÎªÎŞÂÛÊÇngx_http_send_header»¹ÊÇ
ngx_http_output_filter·½·¨£¬ËüÃÇÔÚµ÷ÓÃÊ±Ò»°ã¶¼ÎŞ·¨·¢ËÍÈ«²¿µÄÏìÓ¦£¬Ê£ÏÂµÄÏìÓ¦ÄÚÈİ¶¼µÃ¿¿ngx_http_writer·½·¨À´·¢ËÍ
*/ //ngx_http_writer·½·¨½öÓÃÓÚÔÚºóÌ¨·¢ËÍÏìÓ¦µ½¿Í»§¶Ë¡£
//µ÷ÓÃngx_http_write_filterĞ´Êı¾İ£¬Èç¹û·µ»ØNGX_AGAIN,ÔòÒÔºóµÄĞ´Êı¾İ´¥·¢Í¨¹ıÔÚngx_http_set_write_handler->ngx_http_writerÌí¼Óepoll writeÊÂ¼şÀ´´¥·¢
static void
ngx_http_writer(ngx_http_request_t *r)
{
    int                        rc;
    ngx_event_t               *wev;
    ngx_connection_t          *c;
    ngx_http_core_loc_conf_t  *clcf;

    c = r->connection;
    wev = c->write;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, wev->log, 0,
                   "http writer handler: \"%V?%V\"", &r->uri, &r->args);

    clcf = ngx_http_get_module_loc_conf(r->main, ngx_http_core_module);

/*
    ¼ì²éÁ¬½ÓÉÏĞ´ÊÂ¼şµÄtimedout±êÖ¾Î»£¬Èç¹ûtimedoutÎª0£¬Ôò±íÊ¾Ğ´ÊÂ¼şÎ´³¬Ê±£»Èç¹ûtimedoutÎª1£¬Ôò±íÊ¾µ±Ç°µÄĞ´ÊÂ¼şÒÑ¾­³¬Ê±£¬ÕâÊ±
ÓĞÁ½ÖÖ¿ÉÄÜĞÔ£º
µÚÒ»ÖÖ£¬ÓÉÓÚÍøÂçÒì³£»òÕß¿Í»§¶Ë³¤Ê±¼ä²»½ÓÊÕÏìÓ¦£¬µ¼ÖÂÕæÊµµÄ·¢ËÍÏìÓ¦³¬Ê±£»
µÚ¶şÖÖ£¬ÓÉÓÚÉÏÒ»´Î·¢ËÍÏìÓ¦Ê±·¢ËÍËÙÂÊ¹ı¿ì£¬³¬¹ıÁËÇëÇóµÄlimit_rateËÙÂÊÉÏÏŞ£¬ngx_http_write_filter·½·¨¾Í»áÉèÖÃÒ»¸ö³¬Ê±
Ê±¼ä½«Ğ´ÊÂ¼şÌí¼Óµ½¶¨Ê±Æ÷ÖĞ£¬ÕâÊ±±¾´ÎµÄ³¬Ê±Ö»ÊÇÓÉÏŞËÙµ¼ÖÂ£¬²¢·ÇÕæÕı³¬Ê±¡£ÄÇÃ´£¬ÈçºÎÅĞ¶ÏÕâ¸ö³¬Ê±ÊÇÕæµÄ³¬Ê±»¹ÊÇ³öÓÚÏŞËÙµÄ¿¼ÂÇÄØ£¿Õâ
Òª¿´ÊÂ¼şµÄdelayed±êÖ¾Î»¡£Èç¹ûÊÇÏŞËÙ°ÑĞ´ÊÂ¼ş¼ÓÈë¶¨Ê±Æ÷£¬Ò»¶¨»á°Ñdelayed±êÖ¾Î»ÖÃÎª1£¬Èç¹ûĞ´ÊÂ¼şµÄdelayed±êÖ¾Î»Îª0£¬ÄÇ¾ÍÊÇÕæµÄ³¬Ê±
ÁË£¬ÕâÊ±µ÷ÓÃngx_http_finalize_request·½·¨½áÊøÇëÇó£¬´«ÈËµÄ²ÎÊıÊÇNGX_HTTP_REQUEST_TIME_OUT£¬±íÊ¾ĞèÒªÏò¿Í»§¶Ë·¢ËÍ408´íÎóÂë£»
 */
    if (wev->timedout) { 
    /*
    ÒòÎª³¬Ê±µÄÔ­ÒòÖ´ĞĞÁË¸Ãwrite_event_handler(ÀıÈçÔÚÏò¿Í»§¶Ë·¢ËÍÊı¾İµÄ¹ı³ÌÖĞ£¬¿Í»§¶ËÒ»Ö±²»recv£¬¾Í»áÔì³ÉÄÚºË»º´æÇøÂú£¬
    Êı¾İÓÀÔ¶·¢ËÍ²»³öÈ¥£¬ÓÚÊÇ¾ÍÔÚngx_http_set_write_handlerÖĞÌí¼ÓÁËĞ´ÊÂ¼ş¶¨Ê±Æ÷)£¬´Ó¶ø¿ÉÒÔ¼ì²éÊÇ·ñĞ´³¬Ê±£¬´Ó¶ø¿ÉÒÔ¹Ø±ÕÁ¬½Ó
     */
        if (!wev->delayed) { //ÓÉÓÚÍøÂçÒì³£»òÕß¿Í»§¶Ë³¤Ê±¼ä²»½ÓÊÕÏìÓ¦£¬µ¼ÖÂÕæÊµµÄ·¢ËÍÏìÓ¦³¬Ê±£»
            ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT,
                          "client timed out");
            c->timedout = 1;

            ngx_http_finalize_request(r, NGX_HTTP_REQUEST_TIME_OUT);
            return;
        }

        //limit_rateËÙÂÊÒıÆğµÄ³¬Ê±£¬¼ûngx_http_write_filter£¬ÕâÊôÓÚÕı³£Çé¿ö
        wev->timedout = 0;
        wev->delayed = 0;

        /*
          ÔÙ¼ì²éĞ´ÊÂ¼şµÄready±êÖ¾Î»£¬Èç¹ûÎª1£¬Ôò±íÊ¾ÔÚÓë¿Í»§¶ËµÄTCPÁ¬½ÓÉÏ¿ÉÒÔ·¢ËÍÊı¾İ£»Èç¹ûÎª0£¬Ôò±íÊ¾Ôİ²»¿É·¢ËÍÊı¾İ¡£
          */
        if (!wev->ready) {
            //½«Ğ´ÊÂ¼şÌí¼Óµ½¶¨Ê±Æ÷ÖĞ£¬ÕâÀïµÄ³¬Ê±Ê±¼ä¾ÍÊÇÅäÖÃÎÄ¼şÖĞµÄsend_timeout²ÎÊı£¬ÓëÏŞËÙ¹¦ÄÜÎŞ¹Ø¡£
            ngx_add_timer(wev, clcf->send_timeout, NGX_FUNC_LINE);

            if (ngx_handle_write_event(wev, clcf->send_lowat, NGX_FUNC_LINE) != NGX_OK) {
                ngx_http_close_request(r, 0);
            }

            return;
        }

    }

    if (wev->delayed || r->aio) {
        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, wev->log, 0,
                       "http writer delayed");

        if (ngx_handle_write_event(wev, clcf->send_lowat, NGX_FUNC_LINE) != NGX_OK) {
            ngx_http_close_request(r, 0);
        }

        return;
    }

    /*
    µ÷ÓÃngx_http_output_filter·½·¨·¢ËÍÏìÓ¦£¬ÆäÖĞµÚ2¸ö²ÎÊı£¨Ò²¾ÍÊÇ±íÊ¾ĞèÒª·¢ËÍµÄ»º³åÇø£©ÎªNULLÖ¸Õë¡£ÕâÒâÎ¶×Å£¬ĞèÒªµ÷ÓÃ¸÷°üÌå¹ı
    ÂËÄ£¿é´¦Àíout»º³åÇøÖĞµÄÊ£ÓàÄÚÈİ£¬×îºóµ÷ÓÃngx_http_write filter·½·¨°ÑÏìÓ¦·¢ËÍ³öÈ¥¡£
     */
    rc = ngx_http_output_filter(r, NULL);//NULL±íÊ¾Õâ´ÎÃ»ÓĞĞÄµÄÊı¾İ¼ÓÈëµ½outÖĞ£¬Ö±½Ó°ÑÉÏ´ÎÃ»ÓĞ·¢ËÍÍêµÄout·¢ËÍ³öÈ¥¼´¿É

    ngx_log_debug3(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   "http writer output filter: %d, \"%V?%V\"",
                   rc, &r->uri, &r->args);

    if (rc == NGX_ERROR) {
        ngx_http_finalize_request(r, rc);
        return;
    }

/*
·¢ËÍÏìÓ¦ºó£¬²é¿´ngx_http_request_t½á¹¹ÌåÖĞµÄbufferedºÍpostponed±êÖ¾Î»£¬Èç¹ûÈÎÒ»¸ö²»Îª0£¬ÔòÒâÎ¶×ÅÃ»ÓĞ·¢ËÍÍêoutÖĞµÄÈ«²¿ÏìÓ¦£¬
ÇëÇómainÖ¸ÕëÖ¸ÏòÇëÇó×ÔÉí£¬±íÊ¾Õâ¸öÇëÇóÊÇÔ­Ê¼ÇëÇó£¬ÔÙ¼ì²éÓë¿Í»§¶Ë¼äµÄÁ¬½Óngx_connection-t½á¹¹ÌåÖĞµÄbuffered±êÖ¾Î»£¬Èç¹ûbuffered
²»Îª0£¬Í¬Ñù±íÊ¾Ã»ÓĞ·¢ËÍÍêoutÖĞµÄÈ«²¿ÏìÓ¦£»³ı´ËÒÔÍâ£¬¶¼±íÊ¾outÖĞµÄÈ«²¿ÏìÓ¦½Ô·¢ËÍÍê±Ï¡£
 */
    if (r->buffered || r->postponed || (r == r->main && c->buffered)) {

#if (NGX_HTTP_SPDY)
        if (r->spdy_stream) {
            return;
        }
#endif

        if (!wev->delayed) {
            ngx_add_timer(wev, clcf->send_timeout, NGX_FUNC_LINE);
        }

        if (ngx_handle_write_event(wev, clcf->send_lowat, NGX_FUNC_LINE) != NGX_OK) {
            ngx_http_close_request(r, 0);
        }

        return;
    }

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, wev->log, 0,
                   "http writer done: \"%V?%V\"", &r->uri, &r->args);

/*
½«ÇëÇóµÄwrite_event_handler·½·¨ÖÃÎªngx_http_request_empty_handler£¬Ò²¾ÍÊÇËµ£¬Èç¹ûÕâ¸öÇëÇóµÄÁ¬½ÓÉÏÔÙÓĞ¿ÉĞ´ÊÂ¼ş£¬½«²»×öÈÎºÎ´¦Àí¡£
 */
    r->write_event_handler = ngx_http_request_empty_handler;

    ngx_http_finalize_request(r, rc);
}


static void
ngx_http_request_finalizer(ngx_http_request_t *r)
{
    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   "http finalizer done: \"%V?%V\"", &r->uri, &r->args);

    ngx_http_finalize_request(r, 0);
}

/*
°Ñ¶ÁÊÂ¼ş´ÓepollÖĞÒÆ³ı¡£Ö»¶Ôepoll ltÄ£Ê½Æä×÷ÓÃËüµÄÒâÒåÔÚÓÚ£¬Ä¿Ç°ÒÑ¾­¿ªÊ¼´¦ÀíHTTPÇëÇó£¬³ı·ÇÄ³¸öHTTPÄ£¿éÖØĞÂÉèÖÃÁËread_event_handler·½·¨£¬
·ñÔòÈÎºÎ¶ÁÊÂ¼ş¶¼½«µÃ²»µ½´¦Àí£¬Ò²¿ÉËÆÈÏÎª¶ÁÊÂ¼ş±»×è ÈûÁË¡£

×¢ÒâÕâÀïÃæ»áµ÷ÓÃngx_del_event£¬Òò´ËÈç¹ûĞèÒª¼ÌĞø¶ÁÈ¡¿Í»§¶ËÇëÇóÄÚÈİ£¬ĞèÒª¼ÓÉÏngx_add_event£¬ÀıÈç¿ÉÒÔ²Î¿¼ÏÂngx_http_discard_request_body
*/
void
ngx_http_block_reading(ngx_http_request_t *r)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   "http reading blocked");

    /* aio does not call this handler */

    if ((ngx_event_flags & NGX_USE_LEVEL_EVENT)
        && r->connection->read->active)
    {
        if (ngx_del_event(r->connection->read, NGX_READ_EVENT, 0) != NGX_OK) {
            ngx_http_close_request(r, 0);
        }
    }
}

//ÏóÕ÷ĞÔµÄ¶Á1¸ö×Ö½Ú£¬ÆäÊµÉ¶Ò²Ã»¸É
void ngx_http_test_reading(ngx_http_request_t *r)
{
    int                n;
    char               buf[1];
    ngx_err_t          err;
    ngx_event_t       *rev;
    ngx_connection_t  *c;

    c = r->connection;
    rev = c->read;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0, "http test reading");

#if (NGX_HTTP_SPDY)

    if (r->spdy_stream) {
        if (c->error) {
            err = 0;
            goto closed;
        }

        return;
    }

#endif

#if (NGX_HAVE_KQUEUE)

    if (ngx_event_flags & NGX_USE_KQUEUE_EVENT) {

        if (!rev->pending_eof) {
            return;
        }

        rev->eof = 1;
        c->error = 1;
        err = rev->kq_errno;

        goto closed;
    }

#endif

#if (NGX_HAVE_EPOLLRDHUP)

    if ((ngx_event_flags & NGX_USE_EPOLL_EVENT) && rev->pending_eof) {
        socklen_t  len;

        rev->eof = 1;
        c->error = 1;

        err = 0;
        len = sizeof(ngx_err_t);

        /*
         * BSDs and Linux return 0 and set a pending error in err
         * Solaris returns -1 and sets errno
         */

        if (getsockopt(c->fd, SOL_SOCKET, SO_ERROR, (void *) &err, &len)
            == -1)
        {
            err = ngx_socket_errno;
        }

        goto closed;
    }

#endif

    n = recv(c->fd, buf, 1, MSG_PEEK);

    if (n == 0) {
        rev->eof = 1;
        c->error = 1;
        err = 0;

        goto closed;

    } else if (n == -1) {
        err = ngx_socket_errno;

        if (err != NGX_EAGAIN) {
            rev->eof = 1;
            c->error = 1;

            goto closed;
        }
    }

    /* aio does not call this handler */

    if ((ngx_event_flags & NGX_USE_LEVEL_EVENT) && rev->active) {

        if (ngx_del_event(rev, NGX_READ_EVENT, 0) != NGX_OK) {
            ngx_http_close_request(r, 0);
        }
    }

    return;

closed:

    if (err) {
        rev->error = 1;
    }

    ngx_log_error(NGX_LOG_INFO, c->log, err,
                  "client prematurely closed connection");

    ngx_http_finalize_request(r, NGX_HTTP_CLIENT_CLOSED_REQUEST);
}

/*
ngx_http_set_keepalive·½·¨½«µ±Ç°Á¬½ÓÉèÎªkeepalive×´Ì¬¡£ËüÊµ¼ÊÉÏ»á°Ñ±íÊ¾ÇëÇóµÄngx_http_request_t½á¹¹ÌåÊÍ·Å£¬È´ÓÖ²»»áµ÷ÓÃ
ngx_http_close_connection·½·¨¹Ø±ÕÁ¬½Ó£¬Í¬Ê±Ò²ÔÚ¼ì²âkeepaliveÁ¬½ÓÊÇ·ñ³¬Ê±£¬¶ÔÓÚÕâ¸ö·½·¨£¬´Ë´¦²»×öÏêÏ¸½âÊÍ
*/
//ngx_http_finalize_request -> ngx_http_finalize_connection ->ngx_http_set_keepalive
static void
ngx_http_set_keepalive(ngx_http_request_t *r)
{
    int                        tcp_nodelay;
    ngx_int_t                  i;
    ngx_buf_t                 *b, *f;
    ngx_event_t               *rev, *wev;
    ngx_connection_t          *c;
    ngx_http_connection_t     *hc;
    ngx_http_core_srv_conf_t  *cscf;
    ngx_http_core_loc_conf_t  *clcf;

    c = r->connection;
    rev = c->read;

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0, "set http keepalive handler");

    if (r->discard_body) {
        r->write_event_handler = ngx_http_request_empty_handler;
        r->lingering_time = ngx_time() + (time_t) (clcf->lingering_time / 1000);
        ngx_add_timer(rev, clcf->lingering_timeout, NGX_FUNC_LINE);
        return;
    }

    c->log->action = "closing request";

    hc = r->http_connection;
    b = r->header_in;

    if (b->pos < b->last) {

        /* the pipelined request */

        if (b != c->buffer) {

            /*
             * If the large header buffers were allocated while the previous
             * request processing then we do not use c->buffer for
             * the pipelined request (see ngx_http_create_request()).
             *
             * Now we would move the large header buffers to the free list.
             */

            cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);

            if (hc->free == NULL) {
                hc->free = ngx_palloc(c->pool,
                  cscf->large_client_header_buffers.num * sizeof(ngx_buf_t *));

                if (hc->free == NULL) {
                    ngx_http_close_request(r, 0);
                    return;
                }
            }

            for (i = 0; i < hc->nbusy - 1; i++) {
                f = hc->busy[i];
                hc->free[hc->nfree++] = f;
                f->pos = f->start;
                f->last = f->start;
            }

            hc->busy[0] = b;
            hc->nbusy = 1;
        }
    }

    /* guard against recursive call from ngx_http_finalize_connection() */
    r->keepalive = 0;

    ngx_http_free_request(r, 0);

    c->data = hc;

    if (ngx_handle_read_event(rev, 0, NGX_FUNC_LINE) != NGX_OK) {
        ngx_http_close_connection(c);
        return;
    }

    wev = c->write;
    wev->handler = ngx_http_empty_handler;

    if (b->pos < b->last) {

        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0, "pipelined request");

        c->log->action = "reading client pipelined request line";

        r = ngx_http_create_request(c);
        if (r == NULL) {
            ngx_http_close_connection(c);
            return;
        }

        r->pipeline = 1;

        c->data = r;

        c->sent = 0;
        c->destroyed = 0;

        if (rev->timer_set) {
            ngx_del_timer(rev, NGX_FUNC_LINE);
        }

        rev->handler = ngx_http_process_request_line;
        ngx_post_event(rev, &ngx_posted_events);
        return;
    }

    /*
     * To keep a memory footprint as small as possible for an idle keepalive
     * connection we try to free c->buffer's memory if it was allocated outside
     * the c->pool.  The large header buffers are always allocated outside the
     * c->pool and are freed too.
     */

    b = c->buffer;

    if (ngx_pfree(c->pool, b->start) == NGX_OK) {

        /*
         * the special note for ngx_http_keepalive_handler() that
         * c->buffer's memory was freed
         */

        b->pos = NULL;

    } else {
        b->pos = b->start;
        b->last = b->start;
    }

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c->log, 0, "hc free: %p %d",
                   hc->free, hc->nfree);

    if (hc->free) {
        for (i = 0; i < hc->nfree; i++) {
            ngx_pfree(c->pool, hc->free[i]->start);
            hc->free[i] = NULL;
        }

        hc->nfree = 0;
    }

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c->log, 0, "hc busy: %p %d",
                   hc->busy, hc->nbusy);

    if (hc->busy) {
        for (i = 0; i < hc->nbusy; i++) {
            ngx_pfree(c->pool, hc->busy[i]->start);
            hc->busy[i] = NULL;
        }

        hc->nbusy = 0;
    }

#if (NGX_HTTP_SSL)
    if (c->ssl) {
        ngx_ssl_free_buffer(c);
    }
#endif

    rev->handler = ngx_http_keepalive_handler;

    if (wev->active && (ngx_event_flags & NGX_USE_LEVEL_EVENT)) {
        if (ngx_del_event(wev, NGX_WRITE_EVENT, 0) != NGX_OK) {
            ngx_http_close_connection(c);
            return;
        }
    }

    c->log->action = "keepalive";

    if (c->tcp_nopush == NGX_TCP_NOPUSH_SET) {
        if (ngx_tcp_push(c->fd) == -1) {
            ngx_connection_error(c, ngx_socket_errno, ngx_tcp_push_n " failed");
            ngx_http_close_connection(c);
            return;
        }

        c->tcp_nopush = NGX_TCP_NOPUSH_UNSET;
        tcp_nodelay = ngx_tcp_nodelay_and_tcp_nopush ? 1 : 0;

    } else {
        tcp_nodelay = 1;
    }

    if (tcp_nodelay
        && clcf->tcp_nodelay
        && c->tcp_nodelay == NGX_TCP_NODELAY_UNSET)
    {
        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0, "tcp_nodelay");

        if (setsockopt(c->fd, IPPROTO_TCP, TCP_NODELAY,
                       (const void *) &tcp_nodelay, sizeof(int))
            == -1)
        {
#if (NGX_SOLARIS)
            /* Solaris returns EINVAL if a socket has been shut down */
            c->log_error = NGX_ERROR_IGNORE_EINVAL;
#endif

            ngx_connection_error(c, ngx_socket_errno,
                                 "setsockopt(TCP_NODELAY) failed");

            c->log_error = NGX_ERROR_INFO;
            ngx_http_close_connection(c);
            return;
        }

        c->tcp_nodelay = NGX_TCP_NODELAY_SET;
    }

#if 0
    /* if ngx_http_request_t was freed then we need some other place */
    r->http_state = NGX_HTTP_KEEPALIVE_STATE;
#endif

    c->idle = 1;
    ngx_reusable_connection(c, 1);

    ngx_add_timer(rev, clcf->keepalive_timeout, NGX_FUNC_LINE); //Æô¶¯±£»î¶¨Ê±Æ÷£¬Ê±¼äÍ¨¹ıkeepalive_timeoutÉèÖÃ

    if (rev->ready) {
        ngx_post_event(rev, &ngx_posted_events);
    }
}

//ngx_http_finalize_request -> ngx_http_finalize_connection ->ngx_http_set_keepalive ->ngx_http_keepalive_handler
/*
¿ÉÒÔÍ¨¹ıÁ½ÖÖ·½Ê½Ö´ĞĞµ½¸Ãº¯Êı:
1. ±£»î¶¨Ê±Æ÷³¬Ê±ngx_http_set_keepalive
2. ¿Í»§¶ËÏÈ¶Ï¿ªÁ¬½Ó£¬¿Í»§¶Ë¶Ï¿ªÁ¬½ÓµÄÊ±ºòepoll_wait() error on fd£¬È»ºóÖ±½Óµ÷ÓÃ¸Ã¶ÁÊÂ¼şhandler
*/
static void
ngx_http_keepalive_handler(ngx_event_t *rev)
{
    size_t             size;
    ssize_t            n;
    ngx_buf_t         *b;
    ngx_connection_t  *c;

    c = rev->data;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0, "http keepalive handler");

    if (rev->timedout || c->close) { //±£»î³¬Ê±
        ngx_http_close_connection(c);
        return;
    }

#if (NGX_HAVE_KQUEUE)

    if (ngx_event_flags & NGX_USE_KQUEUE_EVENT) {
        if (rev->pending_eof) {
            c->log->handler = NULL;
            ngx_log_error(NGX_LOG_INFO, c->log, rev->kq_errno,
                          "kevent() reported that client %V closed "
                          "keepalive connection", &c->addr_text);
#if (NGX_HTTP_SSL)
            if (c->ssl) {
                c->ssl->no_send_shutdown = 1;
            }
#endif
            ngx_http_close_connection(c);
            return;
        }
    }

#endif

    b = c->buffer;
    size = b->end - b->start;

    if (b->pos == NULL) {

        /*
         * The c->buffer's memory was freed by ngx_http_set_keepalive().
         * However, the c->buffer->start and c->buffer->end were not changed
         * to keep the buffer size.
         */

        b->pos = ngx_palloc(c->pool, size);
        if (b->pos == NULL) {
            ngx_http_close_connection(c);
            return;
        }

        b->start = b->pos;
        b->last = b->pos;
        b->end = b->pos + size;
    }

    /*
     * MSIE closes a keepalive connection with RST flag
     * so we ignore ECONNRESET here.
     */

    c->log_error = NGX_ERROR_IGNORE_ECONNRESET;
    ngx_set_socket_errno(0);

    n = c->recv(c, b->last, size); //±£»î³¬Ê±£¬Í¬Ê±Ö´ĞĞÒ»´Î¶Á²Ù×÷£¬ÕâÑù¾Í¿ÉÒÔÏÈ¼ì²é¶Ô·½ÊÇ·ñÒÑ¾­¹Ø±ÕÁËtcpÁ¬½Ó£¬ 
    c->log_error = NGX_ERROR_INFO;

    if (n == NGX_AGAIN) {//tcpÁ¬½ÓÕı³££¬²¢ÇÒÃ»ÓĞÊı¾İ
        if (ngx_handle_read_event(rev, 0, NGX_FUNC_LINE) != NGX_OK) {
            ngx_http_close_connection(c);
            return;
        }

        /*
         * Like ngx_http_set_keepalive() we are trying to not hold
         * c->buffer's memory for a keepalive connection.
         */

        if (ngx_pfree(c->pool, b->start) == NGX_OK) {

            /*
             * the special note that c->buffer's memory was freed
             */

            b->pos = NULL;
        }

        return;
    }

    if (n == NGX_ERROR) {
        ngx_http_close_connection(c);
        return;
    }

    c->log->handler = NULL;

    if (n == 0) { //¶Ô·½ÒÑ¾­¹Ø±ÕÁ¬½Ó
        ngx_log_error(NGX_LOG_INFO, c->log, ngx_socket_errno,
                      "client %V closed keepalive connection", &c->addr_text);
        ngx_http_close_connection(c);
        return;
    }

    b->last += n;

    c->log->handler = ngx_http_log_error;
    c->log->action = "reading client request line";

    c->idle = 0;
    ngx_reusable_connection(c, 0);

    c->data = ngx_http_create_request(c);
    if (c->data == NULL) {
        ngx_http_close_connection(c);
        return;
    }

    c->sent = 0;
    c->destroyed = 0;

    ngx_del_timer(rev, NGX_FUNC_LINE);

/*
ÕâÑùµÄÇëÇóĞĞ³¤¶ÈÊÇ²»¶¨µÄ£¬ËüÓëURI³¤¶ÈÏà¹Ø£¬ÕâÒâÎ¶×ÅÔÚ¶ÁÊÂ¼ş±»´¥·¢Ê±£¬ÄÚºËÌ×½Ó×Ö»º³åÇøµÄ´óĞ¡Î´±Ø×ã¹»½ÓÊÕµ½È«²¿µÄHTTPÇëÇóĞĞ£¬ÓÉ´Ë¿ÉÒÔµÃ³ö½áÂÛ£º
µ÷ÓÃÒ»´Îngx_http_process_request_line·½·¨²»Ò»¶¨ÄÜ¹»×öÍêÕâÏî¹¤×÷¡£ËùÒÔ£¬ngx_http_process_request_line·½·¨Ò²»á×÷Îª¶ÁÊÂ¼şµÄ»Øµ÷·½·¨£¬Ëü¿ÉÄÜ»á±»
epollÕâ¸öÊÂ¼şÇı¶¯»úÖÆ¶à´Îµ÷¶È£¬·´¸´µØ½ÓÊÕTCPÁ÷²¢Ê¹ÓÃ×´Ì¬»ú½âÎöËüÃÇ£¬Ö±µ½È·ÈÏ½ÓÊÕµ½ÁËÍêÕûµÄHTTPÇëÇóĞĞ£¬Õâ¸ö½×¶Î²ÅËãÍê³É£¬²Å»á½øÈëÏÂÒ»¸ö½×¶Î½ÓÊÕHTTPÍ·²¿¡£
*/
    rev->handler = ngx_http_process_request_line;
    ngx_http_process_request_line(rev);
}

/*
lingering_close
Óï·¨£ºlingering_close off | on | always;
Ä¬ÈÏ£ºlingering_close on;
ÅäÖÃ¿é£ºhttp¡¢server¡¢location
¸ÃÅäÖÃ¿ØÖÆNginx¹Ø±ÕÓÃ»§Á¬½ÓµÄ·½Ê½¡£always±íÊ¾¹Ø±ÕÓÃ»§Á¬½ÓÇ°±ØĞëÎŞÌõ¼şµØ´¦ÀíÁ¬½ÓÉÏËùÓĞÓÃ»§·¢ËÍµÄÊı¾İ¡£off±íÊ¾¹Ø±ÕÁ¬½ÓÊ±ÍêÈ«²»¹ÜÁ¬½Ó
ÉÏÊÇ·ñÒÑ¾­ÓĞ×¼±¸¾ÍĞ÷µÄÀ´×ÔÓÃ»§µÄÊı¾İ¡£onÊÇÖĞ¼äÖµ£¬Ò»°ãÇé¿öÏÂÔÚ¹Ø±ÕÁ¬½ÓÇ°¶¼»á´¦ÀíÁ¬½ÓÉÏµÄÓÃ»§·¢ËÍµÄÊı¾İ£¬³ıÁËÓĞĞ©Çé¿öÏÂÔÚÒµÎñÉÏÈÏ¶¨ÕâÖ®ºóµÄÊı¾İÊÇ²»±ØÒªµÄ¡£
*/ //ÓÉlingering_close¾ö¶¨
/*
lingering_close´æÔÚµÄÒâÒå¾ÍÊÇÀ´¶ÁÈ¡Ê£ÏÂµÄ¿Í»§¶Ë·¢À´µÄÊı¾İ£¬ËùÒÔnginx»áÓĞÒ»¸ö¶Á³¬Ê±Ê±¼ä£¬Í¨¹ılingering_timeoutÑ¡ÏîÀ´ÉèÖÃ£¬Èç¹ûÔÚ
lingering_timeoutÊ±¼äÄÚ»¹Ã»ÓĞÊÕµ½Êı¾İ£¬ÔòÖ±½Ó¹ØµôÁ¬½Ó¡£nginx»¹Ö§³ÖÉèÖÃÒ»¸ö×ÜµÄ¶ÁÈ¡Ê±¼ä£¬Í¨¹ılingering_timeÀ´ÉèÖÃ£¬Õâ¸öÊ±¼äÒ²¾ÍÊÇ
nginxÔÚ¹Ø±ÕĞ´Ö®ºó£¬±£ÁôsocketµÄÊ±¼ä£¬¿Í»§¶ËĞèÒªÔÚÕâ¸öÊ±¼äÄÚ·¢ËÍÍêËùÓĞµÄÊı¾İ£¬·ñÔònginxÔÚÕâ¸öÊ±¼ä¹ıºó£¬»áÖ±½Ó¹ØµôÁ¬½Ó¡£µ±È»£¬nginx
ÊÇÖ§³ÖÅäÖÃÊÇ·ñ´ò¿ªlingering_closeÑ¡ÏîµÄ£¬Í¨¹ılingering_closeÑ¡ÏîÀ´ÅäÖÃ¡£ ÄÇÃ´£¬ÎÒÃÇÔÚÊµ¼ÊÓ¦ÓÃÖĞ£¬ÊÇ·ñÓ¦¸Ã´ò¿ªlingering_closeÄØ£¿Õâ
¸ö¾ÍÃ»ÓĞ¹Ì¶¨µÄÍÆ¼öÖµÁË£¬ÈçMaxim DouninËùËµ£¬lingering_closeµÄÖ÷Òª×÷ÓÃÊÇ±£³Ö¸üºÃµÄ¿Í»§¶Ë¼æÈİĞÔ£¬µ«ÊÇÈ´ĞèÒªÏûºÄ¸ü¶àµÄ¶îÍâ×ÊÔ´£¨±ÈÈç
Á¬½Ó»áÒ»Ö±Õ¼×Å£©¡£
*/
static void
ngx_http_set_lingering_close(ngx_http_request_t *r)
{
    ngx_event_t               *rev, *wev;
    ngx_connection_t          *c;
    ngx_http_core_loc_conf_t  *clcf;

    c = r->connection;

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    rev = c->read;
    rev->handler = ngx_http_lingering_close_handler;

    r->lingering_time = ngx_time() + (time_t) (clcf->lingering_time / 1000);
    //ÔÚ×¼±¸¶Ï¿ªÁ¬½ÓµÄÊ±ºò£¬Èç¹ûÉèÖÃÁËlingering_close always£¬ÄÇÃ´ÔÚ´¦ÀíÍê¸÷ÖÖÊÂÇéºó£¬»áÑÓ³Ùlingering_timeoutÕâÃ´¶àÊ±¼äÄÚ£¬Èç¹û¿Í»§¶Ë»¹ÊÇÊı¾İµ½À´£¬·şÎñÆ÷¶Ë¿ÉÒÔ¼ÌĞø¶ÁÈ¡
    ngx_add_timer(rev, clcf->lingering_timeout, NGX_FUNC_LINE); //rev->handler = ngx_http_lingering_close_handler;

    if (ngx_handle_read_event(rev, 0, NGX_FUNC_LINE) != NGX_OK) {
        ngx_http_close_request(r, 0);
        return;
    }

    wev = c->write;
    wev->handler = ngx_http_empty_handler;

    if (wev->active && (ngx_event_flags & NGX_USE_LEVEL_EVENT)) {
        if (ngx_del_event(wev, NGX_WRITE_EVENT, 0) != NGX_OK) {
            ngx_http_close_request(r, 0);
            return;
        }
    }

    if (ngx_shutdown_socket(c->fd, NGX_WRITE_SHUTDOWN) == -1) { //¹Ø±ÕĞ´¶Ë£¬shutdown,µ«ÊÇ»¹¿ÉÒÔ¼ÌĞø¶Á
        ngx_connection_error(c, ngx_socket_errno,
                             ngx_shutdown_socket_n " failed");
        ngx_http_close_request(r, 0);
        return;
    }

    if (rev->ready) {
        ngx_http_lingering_close_handler(rev);
    }
}


static void
ngx_http_lingering_close_handler(ngx_event_t *rev)
{
    ssize_t                    n;
    ngx_msec_t                 timer;
    ngx_connection_t          *c;
    ngx_http_request_t        *r;
    ngx_http_core_loc_conf_t  *clcf;
    u_char                     buffer[NGX_HTTP_LINGERING_BUFFER_SIZE];

    c = rev->data;
    r = c->data;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   "http lingering close handler");

    if (rev->timedout) { //¸Ã¶¨Ê±Æ÷ÔÚngx_http_set_lingering_closeÉèÖÃµÄ
        ngx_http_close_request(r, 0);
        return;
    }

    timer = (ngx_msec_t) r->lingering_time - (ngx_msec_t) ngx_time();
    if ((ngx_msec_int_t) timer <= 0) {
        ngx_http_close_request(r, 0);
        return;
    }

    do {
        n = c->recv(c, buffer, NGX_HTTP_LINGERING_BUFFER_SIZE);

        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c->log, 0, "lingering read: %d", n);

        if (n == NGX_ERROR || n == 0) {
            ngx_http_close_request(r, 0);
            return;
        }

    } while (rev->ready);

    if (ngx_handle_read_event(rev, 0, NGX_FUNC_LINE) != NGX_OK) {
        ngx_http_close_request(r, 0);
        return;
    }

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    timer *= 1000;

    if (timer > clcf->lingering_timeout) {
        timer = clcf->lingering_timeout; 
    }

    //Èç¹ûÔÚlingering_timeoutÊ±¼äÄÚÓÖÊı¾İ´ïµ½£¬Ôò°ÑÖØĞÂÌí¼Ó¶¨Ê±Æ÷£¬ÆäÊ±¼äÎªtimer£¬Òò´ËÖ»Òªlingering_timeoutÊ±¼äÄÚÓĞÊı¾İ´ïµ½£¬
    //ÔòÁ¬½ÓÔÚlingering_timeoutµÄÊ±ºò¹Ø±Õ
    ngx_add_timer(rev, timer, NGX_FUNC_LINE); //ngx_http_lingering_close_handler
}

/*
Õâ¸ö·½·¨½öÓÒÒ»¸öÓÃÍ¾£ºµ±ÒµÎñÉÏ²»ĞèÒª´¦Àí¿ÉĞ´ÊÂ¼şÊ±£¬¾Í°Ñngx_http_empty_handler·½·¨ÉèÖÃµ½Á¬½ÓµÄ¿ÉĞ´ÊÂ¼şµÄhandlerÖĞ£¬
ÕâÑù¿ÉĞ´ÊÂ¼ş±»¶¨Ê±Æ÷»òÕßepoll´¥·¢ºóÊÇ²»×öÈÎºÎ¹¤×÷µÄ¡£
*/
void
ngx_http_empty_handler(ngx_event_t *wev)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, wev->log, 0, "http empty handler");

    return;
}


void
ngx_http_request_empty_handler(ngx_http_request_t *r)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   "http request empty handler");

    return;
}

//ÔÚ·¢ËÍºó¶ËµÄ·µ»ØµÄÊı¾İµ½¿Í»§¶Ë³É¹¦ºó£¬»áµ÷ÓÃ¸Ãº¯Êı£¬Ò»°ãÔÚchunk´«ËÍ·½Ê½µÄÊ±ºòÓĞĞ§£¬µ÷ÓÃngx_http_chunked_body_filter±êÊ¶¸Ãchunk´«ËÍ·½Ê½µÄ°üÌå´«ËÍ½ÓÊÕ

//Êµ¼ÊÉÏÔÚ½ÓÊÜÍêºó¶ËÊı¾İºó£¬ÔÚÏë¿Í»§¶Ë·¢ËÍ°üÌå²¿·ÖµÄÊ±ºò£¬»áÁ½´Îµ÷ÓÃ¸Ãº¯Êı£¬Ò»´ÎÊÇngx_event_pipe_write_to_downstream-> p->output_filter(),
//ÁíÒ»´ÎÊÇngx_http_upstream_finalize_request->ngx_http_send_special,

//ÍøÒ³°üÌåÒ»°ã½ø¹ı¸Ãº¯Êı´¥·¢½øĞĞ·¢ËÍ£¬Í·²¿ĞĞÔÚ¸Ãº¯ÊıÍâÒÑ¾­·¢ËÍ³öÈ¥ÁË£¬ÀıÈçngx_http_upstream_send_response->ngx_http_send_header
ngx_int_t
ngx_http_send_special(ngx_http_request_t *r, ngx_uint_t flags)
{//¸Ãº¯ÊıÊµ¼ÊÉÏ¾ÍÊÇ×öÒ»¼şÊÂ£¬¾ÍÊÇÔÚÒª·¢ËÍ³öÈ¥µÄchainÁ´Ä©Î²Ìí¼ÓÒ»¸ö¿Õchain(¼ûngx_output_chain->ngx_output_chain_add_copy)£¬µ±±éÀúchain·¢ËÍÊı¾İµÄÊ±ºò£¬ÒÔ´ËÀ´±ê¼ÇÊı¾İ·¢ËÍÍê±Ï£¬ÕâÊÇ×îºóÒ»¸öchain£¬

//¼ûngx_http_write_filter -> if (!last && !flush && in && size < (off_t) clcf->postpone_output) {
    ngx_buf_t    *b;
    ngx_chain_t   out;

    b = ngx_calloc_buf(r->pool);
    if (b == NULL) {
        return NGX_ERROR;
    }

    //¼ûngx_http_write_filter -> if (!last && !flush && in && size < (off_t) clcf->postpone_output) {
    if (flags & NGX_HTTP_LAST) {

        if (r == r->main && !r->post_action) {//Ò»°ã½øÈëÕâ¸öifÀïÃæ
            b->last_buf = 1; 

        } else {
            b->sync = 1;
            b->last_in_chain = 1;
        }
    }

    if (flags & NGX_HTTP_FLUSH) {
        b->flush = 1;
    }

    out.buf = b;
    out.next = NULL;

    ngx_int_t last_buf = b->last_buf;
    ngx_int_t sync = b->sync;
    ngx_int_t last_in_chain = b->last_in_chain;
    ngx_int_t flush = b->flush;
    
    ngx_log_debugall(r->connection->log, 0, "ngx http send special, flags:%ui, last_buf:%i, sync:%i, last_in_chain:%i, flush:%i",
        flags, last_buf, sync,  last_in_chain, flush);
    return ngx_http_output_filter(r, &out);
}

//
static ngx_int_t
ngx_http_post_action(ngx_http_request_t *r)
{
    ngx_http_core_loc_conf_t  *clcf;

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    if (clcf->post_action.data == NULL) {//post_action XXXÃ»ÓĞÅäÖÃÖ±½Ó·µ»Ø
        return NGX_DECLINED;
    }

    if (r->post_action && r->uri_changes == 0) {
        return NGX_DECLINED;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   "post action: \"%V\"", &clcf->post_action);

    r->main->count--;

    r->http_version = NGX_HTTP_VERSION_9;
    r->header_only = 1;
    r->post_action = 1;

    r->read_event_handler = ngx_http_block_reading;

    if (clcf->post_action.data[0] == '/') {
        ngx_http_internal_redirect(r, &clcf->post_action, NULL);

    } else {
        ngx_http_named_location(r, &clcf->post_action);
    }

    return NGX_OK;
}

/*
ngx_http_close_request·½·¨ÊÇ¸ü¸ß²ãµÄÓÃÓÚ¹Ø±ÕÇëÇóµÄ·½·¨£¬µ±È»£¬HTTPÄ£¿éÒ»°ãÒ²²»»áÖ±½Óµ÷ÓÃËüµÄ¡£ÔÚÉÏÃæ¼¸½ÚÖĞ·´¸´Ìáµ½µÄÒıÓÃ¼ÆÊı£¬
¾ÍÊÇÓÉngx_http_close_request·½·¨¸ºÔğ¼ì²âµÄ£¬Í¬Ê±Ëü»áÔÚÒıÓÃ¼ÆÊıÇåÁãÊ±ÕıÊ½µ÷ÓÃngx_http_free_request·½·¨ºÍngx_http_close_connection(ngx_close_connection)
·½·¨À´ÊÍ·ÅÇëÇó¡¢¹Ø±ÕÁ¬½Ó,¼ûngx_http_close_request,×¢ÒâºÍngx_http_finalize_connectionµÄÇø±ğ
*/
static void
ngx_http_close_request(ngx_http_request_t *r, ngx_int_t rc)
{
    ngx_connection_t  *c;

    //ÒıÓÃ¼ÆÊıÒ»°ã¶¼×÷ÓÃÓÚÕâ¸öÇëÇóµÄÔ­Ê¼ÇëÇóÉÏ£¬Òò´Ë£¬ÔÚ½áÊøÇëÇóÊ±Í³Ò»¼ì²éÔ­Ê¼ÇëÇóµÄÒıÓÃ¼ÆÊı¾Í¿ÉÒÔÁË
    r = r->main;
    c = r->connection;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   "http request count:%d blk:%d", r->count, r->blocked);

    if (r->count == 0) {
        ngx_log_error(NGX_LOG_ALERT, c->log, 0, "http request count is zero");
    }

    r->count--;

    /* 
     ÔÚHTTPÄ£¿éÖĞÃ¿½øĞĞÒ»ÀàĞÂµÄ²Ù×÷£¬°üÀ¨ÎªÒ»¸öÇëÇóÌí¼ÓĞÂµÄÊÂ¼ş£¬»òÕß°ÑÒ»Ğ©ÒÑÒïÓÉ¶¨Ê±Æ÷¡¢epollÖĞÒÆ³ıµÄÊÂ¼şÖØĞÂ¼ÓÈëÆäÖĞ£¬¶¼ĞèÒª°ÑÕâ¸ö
     ÇëÇóµÄÒıÓÃ¼ÆÊı¼Ó1¡£ÕâÊÇÒòÎªĞèÒªÈÃHTTP¿ò¼ÜÖªµÀ£¬HTTPÄ£¿é¶ÔÓÚ¸ÃÇëÇóÓĞ¶ÀÁ¢µÄÒì²½´¦Àí»úÖÆ£¬½«ÓÉ¸ÃHTTPÄ£¿é¾ö¶¨Õâ¸ö²Ù×÷Ê²Ã´Ê±ºò½áÊø£¬·À
     Ö¹ÔÚÕâ¸ö²Ù×÷»¹Î´½áÊøÊ±HTTP¿ò¼ÜÈ´°ÑÕâ¸öÇëÇóÏú»ÙÁË£¨ÈçÆäËûHTTPÄ£¿éÍ¨¹ıµ÷ÓÃngx_http_finalize_request·½·¨ÒªÇóHTTP¿ò¼Ü½áÊøÇëÇó£©£¬µ¼ÖÂ
     ÇëÇó³öÏÖ²»¿ÉÖªµÄÑÏÖØ´íÎó¡£Õâ¾ÍÒªÇóÃ¿¸ö²Ù×÷ÔÚ¡°ÈÏÎª¡±×ÔÉíµÄ¶¯×÷½áÊøÊ±£¬¶¼µÃ×îÖÕµ÷ÓÃµ½ngx_http_close_request·½·¨£¬¸Ã·½·¨»á×Ô¶¯¼ì²éÒıÓÃ
     ¼ÆÊı£¬µ±ÒıÓÃ¼ÆÊıÎª0Ê±²ÅÕæÕıµØÏú»ÙÇëÇó

         ÓÉngx_http_request_t½á¹¹ÌåµÄmain³ÉÔ±ÖĞÈ¡³ö¶ÔÓ¦µÄÔ­Ê¼ÇëÇó£¨µ±È»£¬¿ÉÄÜ¾ÍÊÇÕâ¸öÇëÇó±¾Éí£©£¬ÔÙÈ¡³öcountÒıÓÃ¼ÆÊı²¢¼õl¡£
	È»ºó£¬¼ì²écountÒıÓÃ¼ÆÊıÊÇ·ñÒÑ¾­Îª0£¬ÒÔ¼°blocked±êÖ¾Î»ÊÇ·ñÎª0¡£Èç¹ûcountÒÑ¾­ÎªO£¬ÔòÖ¤Ã÷ÇëÇóÃ»ÓĞÆäËû¶¯×÷ÒªÊ¹ÓÃÁË£¬Í¬Ê±blocked±ê
	Ö¾Î»Ò²Îª0£¬±íÊ¾Ã»ÓĞHTTPÄ£¿é»¹ĞèÒª´¦ÀíÇëÇó£¬ËùÒÔ´ËÊ±ÇëÇó¿ÉÒÔÕæÕıÊÍ·Å£»Èç¹ûcountÒıÓÃ¼ÆÊı´ó¸É0£¬»òÕßblocked´óÓÚ0£¬ÕâÑù¶¼²»¿ÉÒÔ½á
	ÊøÇëÇó£¬ngx_http_close_reques't·½·¨Ö±½Ó½áÊø¡£
     */
    if (r->count || r->blocked) {
        return;
    }

    //Ö»ÓĞcountÎª0²ÅÄÜ¼ÌĞøºóĞøµÄÊÍ·Å×ÊÔ´²Ù×÷
#if (NGX_HTTP_SPDY)
    if (r->spdy_stream) {
        ngx_http_spdy_close_stream(r->spdy_stream, rc);
        return;
    }
#endif

    ngx_http_free_request(r, rc);
    ngx_http_close_connection(c);
}

/*
ngx_http_free_requestÇî·¨½«»áÊÍ·ÅÇëÇó¶ÔÓ¦µÄngx_http_request_tÊı¾İ½á¹¹£¬Ëü²¢²»»áÏñngx_http_close_connection·½·¨Ò»ÑùÈ¥ÊÍ·Å³ĞÔØÇëÇóµÄ
TCPÁ¬½Ó£¬Ã¿Ò»¸öTCPÁ¬½Ó¿ÉÒÔ·´¸´µØ³ĞÔØ¶à¸öHTTPÇëÇó£¬Òò´Ë£¬ngx_http_free_requestÊÇ±Èngx_http_close_connection¸ü¸ß²ã´ÎµÄ·½·¨£¬Ç°Õß±ØÈ»ÏÈÓÚºóÕßµ÷ÓÃ

ngx_http_close_request·½·¨ÊÇ¸ü¸ß²ãµÄÓÃÓÚ¹Ø±ÕÇëÇóµÄ·½·¨£¬µ±È»£¬HTTPÄ£¿éÒ»°ãÒ²²»»áÖ±½Óµ÷ÓÃËüµÄ¡£ÔÚÉÏÃæ¼¸½ÚÖĞ·´¸´Ìáµ½µÄÒıÓÃ¼ÆÊı£¬
¾ÍÊÇÓÉngx_http_close_request·½·¨¸ºÔğ¼ì²âµÄ£¬Í¬Ê±Ëü»áÔÚÒıÓÃ¼ÆÊıÇåÁãÊ±ÕıÊ½µ÷ÓÃngx_http_free_request·½·¨ºÍngx_http_close_connection(ngx_close_connection)
·½·¨À´ÊÍ·ÅÇëÇó¡¢¹Ø±ÕÁ¬½Ó,¼ûngx_http_close_request
*/
void
ngx_http_free_request(ngx_http_request_t *r, ngx_int_t rc) //ÊÍ·ÅrequestµÄÏà¹Ø×ÊÔ´
{
    ngx_log_t                 *log;
    ngx_pool_t                *pool;
    struct linger              linger;
    ngx_http_cleanup_t        *cln;
    ngx_http_log_ctx_t        *ctx;
    ngx_http_core_loc_conf_t  *clcf;

    log = r->connection->log;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, log, 0, "http close request");

    if (r->pool == NULL) {
        ngx_log_error(NGX_LOG_ALERT, log, 0, "http request already closed");
        return;
    }

    cln = r->cleanup;
    r->cleanup = NULL;
    /* Ñ­»·µØ±éÀúÇëÇóngx_http_request_t½á¹¹ÌåÖĞµÄcleanupÁ´±í£¬ÒÀ´Îµ÷ÓÃÃ¿Ò»¸öngx_http_cleanup_pt·½·¨ÊÍ·Å×ÊÔ´¡£ */
    while (cln) {
        if (cln->handler) {
            cln->handler(cln->data);
        }

        cln = cln->next;
    }

#if (NGX_STAT_STUB)

    if (r->stat_reading) {
        (void) ngx_atomic_fetch_add(ngx_stat_reading, -1);
    }

    if (r->stat_writing) {
        (void) ngx_atomic_fetch_add(ngx_stat_writing, -1);
    }

#endif

    if (rc > 0 && (r->headers_out.status == 0 || r->connection->sent == 0)) {
        r->headers_out.status = rc;
    }

    log->action = "logging request";

    /* 
    ÔÚ11¸öngx_http_phases½×¶ÎÖĞ£¬×îºóÒ»¸ö½×¶Î½Ğ×öNGX_HTTP_LOG_PHASE£¬ËüÊÇÓÃÀ´¼ÇÂ¼¿Í»§¶ËµÄ·ÃÎÊÈÕÖ¾µÄ¡£ÔÚÕâÒ»²½ÖèÖĞ£¬½«»áÒÀ´Î
    µ÷ÓÃNGX_HTTP_LOG_PHASE½×¶ÎµÄËùÓĞ»Øµ÷·½·¨¼ÇÂ¼ÈÕÖ¾¡£¹Ù·½µÄngx_http_log_moduleÄ£¿é¾ÍÊÇÔÚÕâÀï¼ÇÂ¼access_logµÄ¡£
     */
    ngx_http_log_request(r); //´òÓ¡http log handler  ½ÓÈë°´ÕÕaccess_format¸ñÊ½ÈÕÖ¾Ğ´Èë½ÓÈëÈÕÖ¾ÎÄ¼ş

    log->action = "closing request";

    /*
     socketstructtcpwindowsÊı¾İ½á¹¹´ËÑ¡ÏîÖ¸¶¨º¯Êıclose¶ÔÃæÏòÁ¬½ÓµÄĞ­ÒéÈçºÎ²Ù×÷£¨ÈçTCP£©¡£ÄÚºËÈ±Ê¡close²Ù×÷ÊÇÁ¢¼´·µ»Ø£¬Èç¹ûÓĞ
     Êı¾İ²ĞÁôÔÚÌ×½Ó¿Ú»º³åÇøÖĞÔòÏµÍ³½«ÊÔ×Å½«ÕâĞ©Êı¾İ·¢ËÍ¸ø¶Ô·½¡£ 

     SO_LINGERÑ¡ÏîÓÃÀ´¸Ä±ä´ËÈ±Ê¡ÉèÖÃ¡£Ê¹ÓÃÈçÏÂ½á¹¹£º 
     struct linger { 
     
          int l_onoff; / * 0 = off, nozero = on * / 
     
          int l_linger; / * linger time * / 
     
     }; 
     
     ÓĞÏÂÁĞÈıÖÖÇé¿ö£º 
     
     1¡¢ÉèÖÃ l_onoffÎª0£¬Ôò¸ÃÑ¡Ïî¹Ø±Õ£¬l_lingerµÄÖµ±»ºöÂÔ£¬µÈÓÚÄÚºËÈ±Ê¡Çé¿ö£¬closeµ÷ÓÃ»áÁ¢¼´·µ»Ø¸øµ÷ÓÃÕß£¬Èç¹û¿ÉÄÜ½«»á´«ÊäÈÎºÎÎ´·¢ËÍµÄÊı¾İ£» 
     
     2¡¢ÉèÖÃ l_onoffÎª·Ç0£¬l_lingerÎª0£¬ÔòÌ×½Ó¿Ú¹Ø±ÕÊ±TCPØ²ÕÛÁ¬½Ó£¬TCP½«¶ªÆú±£ÁôÔÚÌ×½Ó¿Ú·¢ËÍ»º³åÇøÖĞµÄÈÎºÎÊı¾İ²¢·¢ËÍÒ»¸öRST¸ø¶Ô·½£¬¶ø²»ÊÇÍ¨³£µÄËÄ
     ·Ö×éÖÕÖ¹ĞòÁĞ£¬Õâ±ÜÃâÁËTIME_WAIT×´Ì¬£» 
     3¡¢ÉèÖÃ l_onoff Îª·Ç0£¬l_lingerÎª·Ç0£¬µ±Ì×½Ó¿Ú¹Ø±ÕÊ±ÄÚºË½«ÍÏÑÓÒ»¶ÎÊ±¼ä£¨ÓÉl_linger¾ö¶¨£©¡£Èç¹ûÌ×½Ó¿Ú»º³åÇøÖĞÈÔ²ĞÁôÊı¾İ£¬½ø³Ì½«´¦ÓÚË¯Ãß×´Ì¬£¬
     Ö±µ½£¨a£©ËùÓĞÊı¾İ·¢ËÍÍêÇÒ±»¶Ô·½È·ÈÏ£¬Ö®ºó½øĞĞÕı³£µÄÖÕÖ¹ĞòÁĞ£¨ÃèÊö×Ö·ÃÎÊ¼ÆÊıÎª0£©»ò£¨b£©ÑÓ³ÙÊ±¼äµ½¡£´ËÖÖÇé¿öÏÂ£¬Ó¦ÓÃ³ÌĞò¼ì²écloseµÄ·µ»ØÖµÊÇ·Ç³£ÖØÒªµÄ£¬
     Èç¹ûÔÚÊı¾İ·¢ËÍÍê²¢±»È·ÈÏÇ°Ê±¼äµ½£¬close½«·µ»ØEWOULDBLOCK´íÎóÇÒÌ×½Ó¿Ú·¢ËÍ»º³åÇøÖĞµÄÈÎºÎÊı¾İ¶¼¶ªÊ§ ¡£ closeµÄ³É¹¦·µ»Ø½ö¸æËßÎÒÃÇ·¢ËÍµÄÊı¾İ£¨ºÍFIN£©ÒÑ
     ÓÉ¶Ô·½TCPÈ·ÈÏ£¬Ëü²¢²»ÄÜ¸æËßÎÒÃÇ¶Ô·½Ó¦ÓÃ½ø³ÌÊÇ·ñÒÑ¶ÁÁËÊı¾İ¡£Èç¹ûÌ×½Ó¿ÚÉèÎª·Ç×èÈûµÄ£¬Ëü½«²»µÈ´ıcloseÍê³É¡£ 

     SO_LINGERÊÇÒ»¸ösocketÑ¡Ïî£¬Í¨¹ısetsockopt API½øĞĞÉèÖÃ£¬Ê¹ÓÃÆğÀ´±È½Ï¼òµ¥£¬µ«ÆäÊµÏÖ»úÖÆ±È½Ï¸´ÔÓ£¬ÇÒ×ÖÃæÒâË¼ÉÏ±È½ÏÄÑÀí½â¡£
     ½âÊÍ×îÇå³şµÄµ±Êô¡¶UnixÍøÂç±à³Ì¾í1¡·ÖĞµÄËµÃ÷£¨7.5ÕÂ½Ú£©£¬ÕâÀï¼òµ¥ÕªÂ¼£º
     SO_LINGERµÄÖµÓÃÈçÏÂÊı¾İ½á¹¹±íÊ¾£º
     struct linger {
          int l_onoff; / * 0 = off, nozero = on * /
          int l_linger; / * linger time * /
     
     };
     
     
     
     
     ÆäÈ¡ÖµºÍ´¦ÀíÈçÏÂ£º
     1¡¢ÉèÖÃ l_onoffÎª0£¬Ôò¸ÃÑ¡Ïî¹Ø±Õ£¬l_lingerµÄÖµ±»ºöÂÔ£¬µÈÓÚÄÚºËÈ±Ê¡Çé¿ö£¬closeµ÷ÓÃ»áÁ¢¼´·µ»Ø¸øµ÷ÓÃÕß£¬Èç¹û¿ÉÄÜ½«»á´«ÊäÈÎºÎÎ´·¢ËÍµÄÊı¾İ£»
     2¡¢ÉèÖÃ l_onoffÎª·Ç0£¬l_lingerÎª0£¬ÔòÌ×½Ó¿Ú¹Ø±ÕÊ±TCPØ²ÕÛÁ¬½Ó£¬TCP½«¶ªÆú±£ÁôÔÚÌ×½Ó¿Ú·¢ËÍ»º³åÇøÖĞµÄÈÎºÎÊı¾İ²¢·¢ËÍÒ»¸öRST¸ø¶Ô·½£¬
        ¶ø²»ÊÇÍ¨³£µÄËÄ·Ö×éÖÕÖ¹ĞòÁĞ£¬Õâ±ÜÃâÁËTIME_WAIT×´Ì¬£»
     3¡¢ÉèÖÃ l_onoff Îª·Ç0£¬l_lingerÎª·Ç0£¬µ±Ì×½Ó¿Ú¹Ø±ÕÊ±ÄÚºË½«ÍÏÑÓÒ»¶ÎÊ±¼ä£¨ÓÉl_linger¾ö¶¨£©¡£
        Èç¹ûÌ×½Ó¿Ú»º³åÇøÖĞÈÔ²ĞÁôÊı¾İ£¬½ø³Ì½«´¦ÓÚË¯Ãß×´Ì¬£¬Ö± µ½£¨a£©ËùÓĞÊı¾İ·¢ËÍÍêÇÒ±»¶Ô·½È·ÈÏ£¬Ö®ºó½øĞĞÕı³£µÄÖÕÖ¹ĞòÁĞ£¨ÃèÊö×Ö·ÃÎÊ¼ÆÊıÎª0£©
        »ò£¨b£©ÑÓ³ÙÊ±¼äµ½¡£´ËÖÖÇé¿öÏÂ£¬Ó¦ÓÃ³ÌĞò¼ì²écloseµÄ·µ»ØÖµÊÇ·Ç³£ÖØÒªµÄ£¬Èç¹ûÔÚÊı¾İ·¢ËÍÍê²¢±»È·ÈÏÇ°Ê±¼äµ½£¬close½«·µ»ØEWOULDBLOCK´íÎóÇÒÌ×½Ó¿Ú·¢ËÍ»º³åÇøÖĞµÄÈÎºÎÊı¾İ¶¼¶ªÊ§¡£
        closeµÄ³É¹¦·µ»Ø½ö¸æËßÎÒÃÇ·¢ËÍµÄÊı¾İ£¨ºÍFIN£©ÒÑÓÉ¶Ô·½TCPÈ·ÈÏ£¬Ëü²¢²»ÄÜ¸æËßÎÒÃÇ¶Ô·½Ó¦ÓÃ½ø³ÌÊÇ·ñÒÑ¶ÁÁËÊı¾İ¡£Èç¹ûÌ×½Ó¿ÚÉèÎª·Ç×èÈûµÄ£¬Ëü½«²»µÈ´ıcloseÍê³É¡£
        
     µÚÒ»ÖÖÇé¿öÆäÊµºÍ²»ÉèÖÃÃ»ÓĞÇø±ğ£¬µÚ¶şÖÖÇé¿ö¿ÉÒÔÓÃÓÚ±ÜÃâTIME_WAIT×´Ì¬£¬µ«ÔÚLinuxÉÏ²âÊÔµÄÊ±ºò£¬²¢Î´·¢ÏÖ·¢ËÍÁËRSTÑ¡Ïî£¬¶øÊÇÕı³£½øĞĞÁËËÄ²½¹Ø±ÕÁ÷³Ì£¬
     ³õ²½ÍÆ¶ÏÊÇ¡°Ö»ÓĞÔÚ¶ªÆúÊı¾İµÄÊ±ºò²Å·¢ËÍRST¡±£¬Èç¹ûÃ»ÓĞ¶ªÆúÊı¾İ£¬Ôò×ßÕı³£µÄ¹Ø±ÕÁ÷³Ì¡£
     ²é¿´LinuxÔ´Âë£¬È·ÊµÓĞÕâÃ´Ò»¶Î×¢ÊÍºÍÔ´Âë£º
     =====linux-2.6.37 net/ipv4/tcp.c 1915=====
     / * As outlined in RFC 2525, section 2.17, we send a RST here because
     * data was lost. To witness the awful effects of the old behavior of
     * always doing a FIN, run an older 2.1.x kernel or 2.0.x, start a bulk
     * GET in an FTP client, suspend the process, wait for the client to
     * advertise a zero window, then kill -9 the FTP client, wheee...
     * Note: timeout is always zero in such a case.
     * /
     if (data_was_unread) {
     / * Unread data was tossed, zap the connection. * /
     NET_INC_STATS_USER(sock_net(sk), LINUX_MIB_TCPABORTONCLOSE);
     tcp_set_state(sk, TCP_CLOSE);
     tcp_send_active_reset(sk, sk->sk_allocation);
     } 
     ÁíÍâ£¬´ÓÔ­ÀíÉÏÀ´Ëµ£¬Õâ¸öÑ¡ÏîÓĞÒ»¶¨µÄÎ£ÏÕĞÔ£¬¿ÉÄÜµ¼ÖÂ¶ªÊı¾İ£¬Ê¹ÓÃµÄÊ±ºòÒªĞ¡ĞÄÒ»Ğ©£¬µ«ÎÒÃÇÔÚÊµ²âlibmemcachedµÄ¹ı³ÌÖĞ£¬Ã»ÓĞ·¢ÏÖ´ËÀàÏÖÏó£¬
     Ó¦¸ÃÊÇºÍlibmemcachedµÄÍ¨Ñ¶Ğ­ÒéÉèÖÃÓĞ¹Ø£¬Ò²¿ÉÄÜÊÇÎÒÃÇµÄÑ¹Á¦²»¹»´ó£¬²»»á³öÏÖÕâÖÖÇé¿ö¡£
     
     
     µÚÈıÖÖÇé¿öÆäÊµ¾ÍÊÇµÚÒ»ÖÖºÍµÚ¶şÖÖµÄÕÛÖĞ´¦Àí£¬ÇÒµ±socketÎª·Ç×èÈûµÄ³¡¾°ÏÂÊÇÃ»ÓĞ×÷ÓÃµÄ¡£
     ¶ÔÓÚÓ¦¶Ô¶ÌÁ¬½Óµ¼ÖÂµÄ´óÁ¿TIME_WAITÁ¬½ÓÎÊÌâ£¬¸öÈËÈÏÎªµÚ¶şÖÖ´¦ÀíÊÇ×îÓÅµÄÑ¡Ôñ£¬libmemcached¾ÍÊÇ²ÉÓÃÕâÖÖ·½Ê½£¬
     ´ÓÊµ²âÇé¿öÀ´¿´£¬´ò¿ªÕâ¸öÑ¡Ïîºó£¬TIME_WAITÁ¬½ÓÊıÎª0£¬ÇÒ²»ÊÜÍøÂç×éÍø£¨ÀıÈçÊÇ·ñĞéÄâ»úµÈ£©µÄÓ°Ïì¡£ 
     */
    if (r->connection->timedout) { //¼õÉÙtime_wait×´Ì¬£¬ÄÚºËµÄËÄ´Î»ÓÊÖ,¼Ó¿ìËÄ´Î»ÓÊÖ¡£Ö»ÓĞÔÚ¹Ø±ÕÌ×½Ó×ÖµÄÊ±ºòÄÚºË»¹ÓĞÊı¾İÃ»ÓĞ½ÓÊÕ»òÕß·¢ËÍ²Å»á·¢ËÍRST
        clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

        if (clcf->reset_timedout_connection) {
            linger.l_onoff = 1;
            linger.l_linger = 0;

            if (setsockopt(r->connection->fd, SOL_SOCKET, SO_LINGER,
                           (const void *) &linger, sizeof(struct linger)) == -1)
            {
                ngx_log_error(NGX_LOG_ALERT, log, ngx_socket_errno,
                              "setsockopt(SO_LINGER) failed");
            }
        }
    }

    /* the various request strings were allocated from r->pool */
    ctx = log->data;
    ctx->request = NULL;

    r->request_line.len = 0;

    r->connection->destroyed = 1;

    /*
     * Setting r->pool to NULL will increase probability to catch double close
     * of request since the request object is allocated from its own pool.
     */

    pool = r->pool;
    r->pool = NULL;

    ngx_destroy_pool(pool);
}


static void
ngx_http_log_request(ngx_http_request_t *r)
{
    ngx_uint_t                  i, n;
    ngx_http_handler_pt        *log_handler;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);

    log_handler = cmcf->phases[NGX_HTTP_LOG_PHASE].handlers.elts;
    n = cmcf->phases[NGX_HTTP_LOG_PHASE].handlers.nelts;

    for (i = 0; i < n; i++) {
        log_handler[i](r); //ngx_http_log_handler
    }
}

/*
ngx_http_close connection·½·¨ÊÇHTTP¿ò¼ÜÌá¹©µÄÒ»¸öÓÃÓÚÊÍ·ÅTCPÁ¬½ÓµÄ·½·¨£¬ËüµÄÄ¿µÄºÜ¼òµ¥£¬¾ÍÊÇ¹Ø±ÕÕâ¸öTCPÁ¬½Ó£¬µ±ÇÒ½öµ±HTTP
ÇëÇóÕæÕı½áÊøÊ±²Å»áµ÷ÓÃÕâ¸ö·½·¨
*/
/*
ngx_http_free_requestÇî·¨½«»áÊÍ·ÅÇëÇó¶ÔÓ¦µÄngx_http_request_tÊı¾İ½á¹¹£¬Ëü²¢²»»áÏñngx_http_close_connection·½·¨Ò»ÑùÈ¥ÊÍ·Å³ĞÔØÇëÇóµÄ
TCPÁ¬½Ó£¬Ã¿Ò»¸öTCPÁ¬½Ó¿ÉÒÔ·´¸´µØ³ĞÔØ¶à¸öHTTPÇëÇó£¬Òò´Ë£¬ngx_http_free_requestÊÇ±Èngx_http_close_connection¸ü¸ß²ã´ÎµÄ·½·¨£¬Ç°Õß±ØÈ»ÏÈÓÚºóÕßµ÷ÓÃ

ngx_http_close_request·½·¨ÊÇ¸ü¸ß²ãµÄÓÃÓÚ¹Ø±ÕÇëÇóµÄ·½·¨£¬µ±È»£¬HTTPÄ£¿éÒ»°ãÒ²²»»áÖ±½Óµ÷ÓÃËüµÄ¡£ÔÚÉÏÃæ¼¸½ÚÖĞ·´¸´Ìáµ½µÄÒıÓÃ¼ÆÊı£¬
¾ÍÊÇÓÉngx_http_close_request·½·¨¸ºÔğ¼ì²âµÄ£¬Í¬Ê±Ëü»áÔÚÒıÓÃ¼ÆÊıÇåÁãÊ±ÕıÊ½µ÷ÓÃngx_http_free_request·½·¨ºÍngx_http_close_connection(ngx_close_connection)
·½·¨À´ÊÍ·ÅÇëÇó¡¢¹Ø±ÕÁ¬½Ó,¼ûngx_http_close_request
*/
void
ngx_http_close_connection(ngx_connection_t *c)
{
    ngx_pool_t  *pool;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   "close http connection: %d", c->fd);

#if (NGX_HTTP_SSL)

    if (c->ssl) {
        if (ngx_ssl_shutdown(c) == NGX_AGAIN) {
            c->ssl->handler = ngx_http_close_connection;
            return;
        }
    }

#endif

#if (NGX_STAT_STUB)
    (void) ngx_atomic_fetch_add(ngx_stat_active, -1);
#endif

    c->destroyed = 1; //±íÊ¾connectionÏú»Ù

    pool = c->pool;

    ngx_close_connection(c);

    ngx_destroy_pool(pool);
}


static u_char *
ngx_http_log_error(ngx_log_t *log, u_char *buf, size_t len)
{
    u_char              *p;
    ngx_http_request_t  *r;
    ngx_http_log_ctx_t  *ctx;

    if (log->action) {
        p = ngx_snprintf(buf, len, " while %s", log->action);
        len -= p - buf;
        buf = p;
    }

    ctx = log->data;

    p = ngx_snprintf(buf, len, ", client: %V", &ctx->connection->addr_text);
    len -= p - buf;

    r = ctx->request;

    if (r) {
        return r->log_handler(r, ctx->current_request, p, len); //ngx_http_log_error_handler

    } else {
        p = ngx_snprintf(p, len, ", server: %V",
                         &ctx->connection->listening->addr_text);
    }

    return p;
}


static u_char *
ngx_http_log_error_handler(ngx_http_request_t *r, ngx_http_request_t *sr,
    u_char *buf, size_t len)
{
    char                      *uri_separator;
    u_char                    *p;
    ngx_http_upstream_t       *u;
    ngx_http_core_srv_conf_t  *cscf;

    cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);

    p = ngx_snprintf(buf, len, ", server: %V", &cscf->server_name);
    len -= p - buf;
    buf = p;

    if (r->request_line.data == NULL && r->request_start) {
        for (p = r->request_start; p < r->header_in->last; p++) {
            if (*p == CR || *p == LF) {
                break;
            }
        }

        r->request_line.len = p - r->request_start;
        r->request_line.data = r->request_start;
    }

    if (r->request_line.len) {
        p = ngx_snprintf(buf, len, ", request: \"%V\"", &r->request_line);
        len -= p - buf;
        buf = p;
    }

    if (r != sr) {
        p = ngx_snprintf(buf, len, ", subrequest: \"%V\"", &sr->uri);
        len -= p - buf;
        buf = p;
    }

    u = sr->upstream;

    if (u && u->peer.name) {

        uri_separator = "";

#if (NGX_HAVE_UNIX_DOMAIN)
        if (u->peer.sockaddr && u->peer.sockaddr->sa_family == AF_UNIX) {
            uri_separator = ":";
        }
#endif

        p = ngx_snprintf(buf, len, ", upstream: \"%V%V%s%V\"",
                         &u->schema, u->peer.name,
                         uri_separator, &u->uri);
        len -= p - buf;
        buf = p;
    }

    if (r->headers_in.host) {
        p = ngx_snprintf(buf, len, ", host: \"%V\"",
                         &r->headers_in.host->value);
        len -= p - buf;
        buf = p;
    }

    if (r->headers_in.referer) {
        p = ngx_snprintf(buf, len, ", referrer: \"%V\"",
                         &r->headers_in.referer->value);
        buf = p;
    }

    return buf;
}
